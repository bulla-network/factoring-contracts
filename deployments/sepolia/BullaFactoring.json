{
  "address": "0xDF0fCe31285dcAB9124bF763AB9E5466723BeF35",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "contract IInvoiceProviderAdapter",
          "name": "_invoiceProviderAdapter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_underwriter",
          "type": "address"
        },
        {
          "internalType": "contract Permissions",
          "name": "_depositPermissions",
          "type": "address"
        },
        {
          "internalType": "contract Permissions",
          "name": "_factoringPermissions",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bullaDao",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_protocolFeeBps",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_adminFeeBps",
          "type": "uint16"
        },
        {
          "internalType": "string",
          "name": "_poolName",
          "type": "string"
        },
        {
          "internalType": "uint16",
          "name": "_taxBps",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_targetYieldBps",
          "type": "uint16"
        },
        {
          "internalType": "string",
          "name": "_tokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_tokenSymbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CallerNotBullaDao",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CallerNotOriginalCreditor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CallerNotUnderwriter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DeductionsExceedsRealisedGains",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientAllowance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSpender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "ERC4626ExceededMaxDeposit",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "ERC4626ExceededMaxMint",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "ERC4626ExceededMaxRedeem",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "ERC4626ExceededMaxWithdraw",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FunctionNotSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ImpairReserveMustBeGreater",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ImpairReserveNotSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPercentage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvoiceAlreadyFunded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvoiceAlreadyImpairedByFund",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvoiceAlreadyPaid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvoiceCanceled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvoiceCannotBePaid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvoiceCreditorChanged",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvoiceNotApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvoiceNotImpaired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvoicePaidAmountChanged",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvoiceTokenMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MathOverflowedMulDiv",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoFeesToWithdraw",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoTaxBalanceToWithdraw",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "UnauthorizedDeposit",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "UnauthorizedFactoring",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnpaidInvoice",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "paidInvoiceIds",
          "type": "uint256[]"
        }
      ],
      "name": "ActivePaidInvoicesReconciled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "oldFeeBps",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "newFeeBps",
          "type": "uint16"
        }
      ],
      "name": "AdminFeeBpsChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bullaDao",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AdminFeesWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDuration",
          "type": "uint256"
        }
      ],
      "name": "ApprovalDurationChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "BullaDaoAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            },
            {
              "internalType": "uint8",
              "name": "hashFunction",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "size",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct IBullaFactoring.Multihash",
          "name": "attachment",
          "type": "tuple"
        }
      ],
      "name": "DepositMadeWithAttachment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "DepositPermissionsChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "FactoringPermissionsChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newGracePeriodDays",
          "type": "uint256"
        }
      ],
      "name": "GracePeriodDaysChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newImpairReserve",
          "type": "uint256"
        }
      ],
      "name": "ImpairReserveChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "invoiceId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "interestApr",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "upfrontBps",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "validUntil",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "minDays",
          "type": "uint16"
        }
      ],
      "name": "InvoiceApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "invoiceId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fundedAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "originalCreditor",
          "type": "address"
        }
      ],
      "name": "InvoiceFunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "invoiceId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lossAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gainAmount",
          "type": "uint256"
        }
      ],
      "name": "InvoiceImpaired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "invoiceId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "kickbackAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "originalCreditor",
          "type": "address"
        }
      ],
      "name": "InvoiceKickbackAmountSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "invoiceId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "trueInterest",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "trueProtocolFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "adminFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fundedAmountNet",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "kickbackAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "originalCreditor",
          "type": "address"
        }
      ],
      "name": "InvoicePaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "invoiceId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "originalCreditor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "totalRefundOrPaymentAmount",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "interestToCharge",
          "type": "uint256"
        }
      ],
      "name": "InvoiceUnfactored",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "oldProtocolFeeBps",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "newProtocolFeeBps",
          "type": "uint16"
        }
      ],
      "name": "ProtocolFeeBpsChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bullaDao",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ProtocolFeesWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            },
            {
              "internalType": "uint8",
              "name": "hashFunction",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "size",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct IBullaFactoring.Multihash",
          "name": "attachment",
          "type": "tuple"
        }
      ],
      "name": "SharesRedeemedWithAttachment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "newTargetYield",
          "type": "uint16"
        }
      ],
      "name": "TargetYieldChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TaxBalanceWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "oldTaxBps",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newTaxBps",
          "type": "uint256"
        }
      ],
      "name": "TaxBpsChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldUnderwriter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newUnderwriter",
          "type": "address"
        }
      ],
      "name": "UnderwriterChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "activeInvoices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminFeeBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminFeeBps",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approvalDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "invoiceId",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_interestApr",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_upfrontBps",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "minDaysInterestApplied",
          "type": "uint16"
        }
      ],
      "name": "approveInvoice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "approvedInvoices",
      "outputs": [
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "faceValue",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "creditor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "debtor",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "dueDate",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "paidAmount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isCanceled",
              "type": "bool"
            }
          ],
          "internalType": "struct IInvoiceProviderAdapter.Invoice",
          "name": "invoiceSnapshot",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "validUntil",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fundedTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "interestApr",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "upfrontBps",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "fundedAmountGross",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fundedAmountNet",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "minDaysInterestApplied",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "trueFaceValue",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "protocolFeeBps",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "adminFeeBps",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetAddress",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bullaDao",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "calculateAccruedProfits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "accruedProfits",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "calculateCapitalAccount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "invoiceId",
          "type": "uint256"
        }
      ],
      "name": "calculateKickbackAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "kickbackAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "trueInterest",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "trueProtocolFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "trueAdminFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "calculateRealizedGainLoss",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "invoiceId",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "factorerUpfrontBps",
          "type": "uint16"
        }
      ],
      "name": "calculateTargetFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fundedAmountGross",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "adminFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetInterest",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetProtocolFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "netFundedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "convertToAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "convertToShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creationTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deployedCapitalForActiveInvoicesExcludingImpaired",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositPermissions",
      "outputs": [
        {
          "internalType": "contract Permissions",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            },
            {
              "internalType": "uint8",
              "name": "hashFunction",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "size",
              "type": "uint8"
            }
          ],
          "internalType": "struct IBullaFactoring.Multihash",
          "name": "attachment",
          "type": "tuple"
        }
      ],
      "name": "depositWithAttachment",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factoringPermissions",
      "outputs": [
        {
          "internalType": "contract Permissions",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "invoiceId",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "factorerUpfrontBps",
          "type": "uint16"
        }
      ],
      "name": "fundInvoice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFundInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "creationTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fundBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deployedCapital",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "capitalAccount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokensAvailableForRedemption",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "adminFeeBps",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "impairReserve",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "targetYieldBps",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBullaFactoring.FundInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "invoiceId",
          "type": "uint256"
        }
      ],
      "name": "getFundedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gracePeriodDays",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "invoiceId",
          "type": "uint256"
        }
      ],
      "name": "impairInvoice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "impairReserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "impairments",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "gainAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lossAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isImpaired",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "invoiceProviderAdapter",
      "outputs": [
        {
          "internalType": "contract IInvoiceProviderAdapter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "maxRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "maxWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "originalCreditors",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "paidInvoiceTax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "paidInvoicesGain",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pricePerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeeBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeeBps",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reconcileActivePaidInvoices",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            },
            {
              "internalType": "uint8",
              "name": "hashFunction",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "size",
              "type": "uint8"
            }
          ],
          "internalType": "struct IBullaFactoring.Multihash",
          "name": "attachment",
          "type": "tuple"
        }
      ],
      "name": "redeemWithAttachment",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_newAdminFeeBps",
          "type": "uint16"
        }
      ],
      "name": "setAdminFeeBps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        }
      ],
      "name": "setApprovalDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newBullaDao",
          "type": "address"
        }
      ],
      "name": "setBullaDaoAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newDepositPermissionsAddress",
          "type": "address"
        }
      ],
      "name": "setDepositPermissions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newFactoringPermissionsAddress",
          "type": "address"
        }
      ],
      "name": "setFactoringPermissions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_days",
          "type": "uint256"
        }
      ],
      "name": "setGracePeriodDays",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_impairReserve",
          "type": "uint256"
        }
      ],
      "name": "setImpairReserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_newProtocolFeeBps",
          "type": "uint16"
        }
      ],
      "name": "setProtocolFeeBps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_targetYieldBps",
          "type": "uint16"
        }
      ],
      "name": "setTargetYield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_newTaxBps",
          "type": "uint16"
        }
      ],
      "name": "setTaxBps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newUnderwriter",
          "type": "address"
        }
      ],
      "name": "setUnderwriter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetYieldBps",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "taxBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "taxBps",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underwriter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "invoiceId",
          "type": "uint256"
        }
      ],
      "name": "unfactorInvoice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "viewPoolStatus",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "paidInvoices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "impairedInvoices",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAdminFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawProtocolFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawTaxBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdc85b6d40241877901384176bd75468ffd0820836165bdad182b84223f2fb934",
  "receipt": {
    "to": null,
    "from": "0xa933edDd60C16e11bC8858F2Ca75E82991038b4F",
    "contractAddress": "0xDF0fCe31285dcAB9124bF763AB9E5466723BeF35",
    "transactionIndex": 14,
    "gasUsed": "4611496",
    "logsBloom": "0x
    "blockHash": "0x0c0d6a37f23fd7b9652f005263e9cebaca65fbe6906f7f436d039aa2632b379c",
    "transactionHash": "0xdc85b6d40241877901384176bd75468ffd0820836165bdad182b84223f2fb934",
    "logs": [
      {
        "transactionIndex": 14,
        "blockNumber": 6813150,
        "transactionHash": "0xdc85b6d40241877901384176bd75468ffd0820836165bdad182b84223f2fb934",
        "address": "0xDF0fCe31285dcAB9124bF763AB9E5466723BeF35",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a933eddd60c16e11bc8858f2ca75e82991038b4f"
        ],
        "data": "0x",
        "logIndex": 38,
        "blockHash": "0x0c0d6a37f23fd7b9652f005263e9cebaca65fbe6906f7f436d039aa2632b379c"
      }
    ],
    "blockNumber": 6813150,
    "cumulativeGasUsed": "5665093",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x94a9D9AC8a22534E3FaCa9F4e7F2E2cf85d5E4C8",
    "0x15ef2BD80BE2247C9007A35c761Ea9aDBe1063C5",
    "0x5d72984B2e1170EAA0DA4BC22B25C87729C5EBB3",
    "0xB39bF6Fcd9bd97F7616FAD7b6118Fc2E911eA1d8",
    "0x996e2beFD170CeB741b0072AE97E524Bdf410E9e",
    "0x89e03e7980c92fd81ed3a9b72f5c73fdf57e5e6d",
    25,
    50,
    "Bulla TCS Factoring Pool Sepolia Test v2",
    10,
    730,
    "Bulla TCS Factoring Pool",
    "BFT-TCS"
  ],
  "numDeployments": 18,
  "solcInputHash": "35cbeedc48972d6a8dd8fd31be925c0b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"contract IInvoiceProviderAdapter\",\"name\":\"_invoiceProviderAdapter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underwriter\",\"type\":\"address\"},{\"internalType\":\"contract Permissions\",\"name\":\"_depositPermissions\",\"type\":\"address\"},{\"internalType\":\"contract Permissions\",\"name\":\"_factoringPermissions\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bullaDao\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_protocolFeeBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_adminFeeBps\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"_poolName\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"_taxBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_targetYieldBps\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotBullaDao\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotOriginalCreditor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotUnderwriter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeductionsExceedsRealisedGains\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxDeposit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxMint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxRedeem\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FunctionNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ImpairReserveMustBeGreater\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ImpairReserveNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPercentage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvoiceAlreadyFunded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvoiceAlreadyImpairedByFund\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvoiceAlreadyPaid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvoiceCanceled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvoiceCannotBePaid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvoiceCreditorChanged\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvoiceNotApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvoiceNotImpaired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvoicePaidAmountChanged\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvoiceTokenMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoFeesToWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoTaxBalanceToWithdraw\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"UnauthorizedDeposit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"UnauthorizedFactoring\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnpaidInvoice\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"paidInvoiceIds\",\"type\":\"uint256[]\"}],\"name\":\"ActivePaidInvoicesReconciled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"oldFeeBps\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"newFeeBps\",\"type\":\"uint16\"}],\"name\":\"AdminFeeBpsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bullaDao\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AdminFeesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"ApprovalDurationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"BullaDaoAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"hashFunction\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"size\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct IBullaFactoring.Multihash\",\"name\":\"attachment\",\"type\":\"tuple\"}],\"name\":\"DepositMadeWithAttachment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"DepositPermissionsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"FactoringPermissionsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newGracePeriodDays\",\"type\":\"uint256\"}],\"name\":\"GracePeriodDaysChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newImpairReserve\",\"type\":\"uint256\"}],\"name\":\"ImpairReserveChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"invoiceId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"interestApr\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"upfrontBps\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"minDays\",\"type\":\"uint16\"}],\"name\":\"InvoiceApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"invoiceId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundedAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"originalCreditor\",\"type\":\"address\"}],\"name\":\"InvoiceFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"invoiceId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lossAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gainAmount\",\"type\":\"uint256\"}],\"name\":\"InvoiceImpaired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"invoiceId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"kickbackAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"originalCreditor\",\"type\":\"address\"}],\"name\":\"InvoiceKickbackAmountSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"invoiceId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"trueInterest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"trueProtocolFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adminFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundedAmountNet\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"kickbackAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"originalCreditor\",\"type\":\"address\"}],\"name\":\"InvoicePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"invoiceId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"originalCreditor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"totalRefundOrPaymentAmount\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestToCharge\",\"type\":\"uint256\"}],\"name\":\"InvoiceUnfactored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"oldProtocolFeeBps\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newProtocolFeeBps\",\"type\":\"uint16\"}],\"name\":\"ProtocolFeeBpsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bullaDao\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProtocolFeesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"hashFunction\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"size\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct IBullaFactoring.Multihash\",\"name\":\"attachment\",\"type\":\"tuple\"}],\"name\":\"SharesRedeemedWithAttachment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newTargetYield\",\"type\":\"uint16\"}],\"name\":\"TargetYieldChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TaxBalanceWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"oldTaxBps\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newTaxBps\",\"type\":\"uint256\"}],\"name\":\"TaxBpsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldUnderwriter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newUnderwriter\",\"type\":\"address\"}],\"name\":\"UnderwriterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeInvoices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminFeeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminFeeBps\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approvalDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"invoiceId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_interestApr\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_upfrontBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"minDaysInterestApplied\",\"type\":\"uint16\"}],\"name\":\"approveInvoice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approvedInvoices\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"faceValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creditor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dueDate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"paidAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isCanceled\",\"type\":\"bool\"}],\"internalType\":\"struct IInvoiceProviderAdapter.Invoice\",\"name\":\"invoiceSnapshot\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundedTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"interestApr\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"upfrontBps\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"fundedAmountGross\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundedAmountNet\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"minDaysInterestApplied\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"trueFaceValue\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"protocolFeeBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"adminFeeBps\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetAddress\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bullaDao\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateAccruedProfits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accruedProfits\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateCapitalAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"invoiceId\",\"type\":\"uint256\"}],\"name\":\"calculateKickbackAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"kickbackAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"trueInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"trueProtocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"trueAdminFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateRealizedGainLoss\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"invoiceId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"factorerUpfrontBps\",\"type\":\"uint16\"}],\"name\":\"calculateTargetFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fundedAmountGross\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"adminFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetProtocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"netFundedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployedCapitalForActiveInvoicesExcludingImpaired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositPermissions\",\"outputs\":[{\"internalType\":\"contract Permissions\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"hashFunction\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"size\",\"type\":\"uint8\"}],\"internalType\":\"struct IBullaFactoring.Multihash\",\"name\":\"attachment\",\"type\":\"tuple\"}],\"name\":\"depositWithAttachment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoringPermissions\",\"outputs\":[{\"internalType\":\"contract Permissions\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"invoiceId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"factorerUpfrontBps\",\"type\":\"uint16\"}],\"name\":\"fundInvoice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"creationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deployedCapital\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"capitalAccount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensAvailableForRedemption\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"adminFeeBps\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"impairReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetYieldBps\",\"type\":\"uint256\"}],\"internalType\":\"struct IBullaFactoring.FundInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"invoiceId\",\"type\":\"uint256\"}],\"name\":\"getFundedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gracePeriodDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"invoiceId\",\"type\":\"uint256\"}],\"name\":\"impairInvoice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"impairReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"impairments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gainAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lossAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isImpaired\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invoiceProviderAdapter\",\"outputs\":[{\"internalType\":\"contract IInvoiceProviderAdapter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"originalCreditors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"paidInvoiceTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"paidInvoicesGain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeBps\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reconcileActivePaidInvoices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"hashFunction\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"size\",\"type\":\"uint8\"}],\"internalType\":\"struct IBullaFactoring.Multihash\",\"name\":\"attachment\",\"type\":\"tuple\"}],\"name\":\"redeemWithAttachment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newAdminFeeBps\",\"type\":\"uint16\"}],\"name\":\"setAdminFeeBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setApprovalDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newBullaDao\",\"type\":\"address\"}],\"name\":\"setBullaDaoAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newDepositPermissionsAddress\",\"type\":\"address\"}],\"name\":\"setDepositPermissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newFactoringPermissionsAddress\",\"type\":\"address\"}],\"name\":\"setFactoringPermissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"setGracePeriodDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_impairReserve\",\"type\":\"uint256\"}],\"name\":\"setImpairReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newProtocolFeeBps\",\"type\":\"uint16\"}],\"name\":\"setProtocolFeeBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_targetYieldBps\",\"type\":\"uint16\"}],\"name\":\"setTargetYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newTaxBps\",\"type\":\"uint16\"}],\"name\":\"setTaxBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newUnderwriter\",\"type\":\"address\"}],\"name\":\"setUnderwriter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetYieldBps\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxBps\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underwriter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"invoiceId\",\"type\":\"uint256\"}],\"name\":\"unfactorInvoice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewPoolStatus\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"paidInvoices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"impairedInvoices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAdminFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTaxBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"@solidoracle\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC4626ExceededMaxDeposit(address,uint256,uint256)\":[{\"details\":\"Attempted to deposit more assets than the max amount for `receiver`.\"}],\"ERC4626ExceededMaxMint(address,uint256,uint256)\":[{\"details\":\"Attempted to mint more shares than the max amount for `receiver`.\"}],\"ERC4626ExceededMaxRedeem(address,uint256,uint256)\":[{\"details\":\"Attempted to redeem more shares than the max amount for `receiver`.\"}],\"ERC4626ExceededMaxWithdraw(address,uint256,uint256)\":[{\"details\":\"Attempted to withdraw more assets than the max amount for `receiver`.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"MathOverflowedMulDiv()\":[{\"details\":\"Muldiv operation overflow.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"approveInvoice(uint256,uint16,uint16,uint16)\":{\"params\":{\"invoiceId\":\"The ID of the invoice to approve\"}},\"asset()\":{\"details\":\"See {IERC4626-asset}. \"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"calculateAccruedProfits()\":{\"details\":\"Iterates through all active invoices, calculates interest for each, deducts taxes, and sums the net accrued interest\",\"returns\":{\"accruedProfits\":\"The total net accrued profits across all active invoices\"}},\"calculateCapitalAccount()\":{\"returns\":{\"_0\":\"The calculated capital account balance\"}},\"calculateKickbackAmount(uint256)\":{\"params\":{\"invoiceId\":\"The ID of the invoice for which to calculate the kickback amount\"},\"returns\":{\"kickbackAmount\":\"The calculated kickback amount\",\"trueAdminFee\":\"The true admin fee amount\",\"trueInterest\":\"The true interest amount\",\"trueProtocolFee\":\"The true protocol fee amount\"}},\"calculateRealizedGainLoss()\":{\"returns\":{\"_0\":\"The total realized gain adjusted for losses\"}},\"calculateTargetFees(uint256,uint16)\":{\"params\":{\"factorerUpfrontBps\":\"The upfront bps specified by the factorer\",\"invoiceId\":\"The ID of the invoice for which to calculate the fees\"},\"returns\":{\"adminFee\":\"The target calculated admin fee\",\"fundedAmountGross\":\"The gross amount to be funded to the factorer\",\"netFundedAmount\":\"The net amount that will be funded to the factorer after deducting fees\",\"targetInterest\":\"The calculated interest fee\",\"targetProtocolFee\":\"The calculated protocol fee\"}},\"constructor\":{\"params\":{\"_asset\":\"underlying supported stablecoin asset for deposit \",\"_invoiceProviderAdapter\":\"adapter for invoice provider\",\"_underwriter\":\"address of the underwriter\"}},\"convertToAssets(uint256)\":{\"details\":\"See {IERC4626-convertToAssets}. \"},\"convertToShares(uint256)\":{\"details\":\"See {IERC4626-convertToShares}. \"},\"decimals()\":{\"returns\":{\"_0\":\"The number of decimals for this token\"}},\"deployedCapitalForActiveInvoicesExcludingImpaired()\":{\"returns\":{\"_0\":\"The total funded amount for all active invoices\"}},\"deposit(uint256,address)\":{\"params\":{\"assets\":\"The amount of assets to deposit\",\"receiver\":\"The address to receive the fund shares\"},\"returns\":{\"_0\":\"The number of shares issued for the deposit\"}},\"depositWithAttachment(uint256,address,(bytes32,uint8,uint8))\":{\"params\":{\"assets\":\"The amount of assets to deposit\",\"attachment\":\"The attachment data for the deposit\",\"receiver\":\"The address to receive the fund shares\"},\"returns\":{\"_0\":\"The number of shares issued for the deposit\"}},\"fundInvoice(uint256,uint16)\":{\"details\":\"No checks needed for the creditor, as transferFrom will revert unless it gets executed by the nft owner (i.e. claim creditor)\",\"params\":{\"factorerUpfrontBps\":\"factorer specified upfront bps\",\"invoiceId\":\"The ID of the invoice to fund\"}},\"getFundInfo()\":{\"returns\":{\"_0\":\"FundInfo The fund information\"}},\"impairInvoice(uint256)\":{\"params\":{\"invoiceId\":\"The ID of the invoice to impair\"}},\"maxDeposit(address)\":{\"details\":\"See {IERC4626-maxDeposit}. \"},\"maxMint(address)\":{\"details\":\"See {IERC4626-maxMint}. \"},\"maxRedeem()\":{\"returns\":{\"_0\":\"The maximum number of shares that can be redeemed\"}},\"maxRedeem(address)\":{\"params\":{\"_owner\":\"The owner of the shares being redeemed\"},\"returns\":{\"_0\":\"The maximum number of shares that can be redeemed\"}},\"maxWithdraw(address)\":{\"params\":{\"_owner\":\"The owner of the assets to be withdrawn\"},\"returns\":{\"_0\":\"The maximum number of assets that can be withdrawn\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"previewDeposit(uint256)\":{\"details\":\"See {IERC4626-previewDeposit}. \"},\"previewMint(uint256)\":{\"details\":\"See {IERC4626-previewMint}. \"},\"previewRedeem(uint256)\":{\"details\":\"See {IERC4626-previewRedeem}. \"},\"previewWithdraw(uint256)\":{\"details\":\"See {IERC4626-previewWithdraw}. \"},\"pricePerShare()\":{\"returns\":{\"_0\":\"The current price per share, scaled to the underlying asset's decimal places\"}},\"reconcileActivePaidInvoices()\":{\"details\":\"This function should be called when viewPoolStatus returns some updates, to ensure accurate accounting\"},\"redeem(uint256,address,address)\":{\"params\":{\"_owner\":\"The owner of the shares being redeemed\",\"receiver\":\"The address to receive the assets\",\"shares\":\"The number of shares to redeem\"},\"returns\":{\"_0\":\"The number of shares redeemed\"}},\"redeemWithAttachment(uint256,address,address,(bytes32,uint8,uint8))\":{\"params\":{\"_owner\":\"The owner of the shares being redeemed\",\"attachment\":\"The attachment data for the redemption\",\"receiver\":\"The address to receive the redeemed assets\",\"shares\":\"The number of shares to redeem\"},\"returns\":{\"_0\":\"The amount of assets redeemed\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setAdminFeeBps(uint16)\":{\"params\":{\"_newAdminFeeBps\":\"The new admin fee in basis points\"}},\"setApprovalDuration(uint256)\":{\"details\":\"This function can only be called by the contract owner\",\"params\":{\"_duration\":\"The new duration in seconds\"}},\"setBullaDaoAddress(address)\":{\"params\":{\"_newBullaDao\":\"The new address for the Bulla DAO\"}},\"setDepositPermissions(address)\":{\"params\":{\"_newDepositPermissionsAddress\":\"The new deposit permissions contract address\"}},\"setFactoringPermissions(address)\":{\"params\":{\"_newFactoringPermissionsAddress\":\"The address of the new factoring permissions contract\"}},\"setGracePeriodDays(uint256)\":{\"details\":\"This function can only be called by the contract owner\",\"params\":{\"_days\":\"The number of days for the grace period\"}},\"setImpairReserve(uint256)\":{\"params\":{\"_impairReserve\":\"The new impair reserve amount\"}},\"setProtocolFeeBps(uint16)\":{\"params\":{\"_newProtocolFeeBps\":\"The new protocol fee in basis points\"}},\"setTargetYield(uint16)\":{\"params\":{\"_targetYieldBps\":\"The new target yield in basis points\"}},\"setTaxBps(uint16)\":{\"details\":\"This function can only be called by the contract owner\",\"params\":{\"_newTaxBps\":\"The new tax rate in basis points\"}},\"setUnderwriter(address)\":{\"params\":{\"_newUnderwriter\":\"The address of the new underwriter\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalAssets()\":{\"returns\":{\"_0\":\"The amount of assets available for withdrawal or new investments, excluding funds allocated to active invoices\"}},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unfactorInvoice(uint256)\":{\"params\":{\"invoiceId\":\"The ID of the invoice to unfactor\"}},\"viewPoolStatus()\":{\"returns\":{\"impairedInvoices\":\"An array of impaired invoice IDs\",\"paidInvoices\":\"An array of paid invoice IDs\"}},\"withdraw(uint256,address,address)\":{\"params\":{\"_owner\":\"The address who owns the shares to redeem\",\"assets\":\"The amount of assets to withdraw\",\"receiver\":\"The address to receive the assets\"},\"returns\":{\"_0\":\"The number of shares redeemed\"}},\"withdrawTaxBalance()\":{\"details\":\"This function can only be called by the contract owner\"}},\"title\":\"Bulla Factoring Fund\",\"version\":1},\"userdoc\":{\"errors\":{\"CallerNotUnderwriter()\":[{\"notice\":\"Errors\"}]},\"kind\":\"user\",\"methods\":{\"activeInvoices(uint256)\":{\"notice\":\"Array to hold the IDs of all active invoices\"},\"adminFeeBalance()\":{\"notice\":\"Accumulated admin fee balance\"},\"adminFeeBps()\":{\"notice\":\"Admin fee in basis points\"},\"approvalDuration()\":{\"notice\":\"The duration of invoice approval before it expires\"},\"approveInvoice(uint256,uint16,uint16,uint16)\":{\"notice\":\"Approves an invoice for funding, can only be called by the underwriter\"},\"approvedInvoices(uint256)\":{\"notice\":\"Mapping from invoice ID to invoice approval details\"},\"assetAddress()\":{\"notice\":\"Address of the underlying asset token (e.g., USDC)\"},\"bullaDao()\":{\"notice\":\"Address of the Bulla DAO, a trusted multisig\"},\"calculateAccruedProfits()\":{\"notice\":\"Calculates the total accrued profits from all active invoices\"},\"calculateCapitalAccount()\":{\"notice\":\"Calculates the capital account balance, including deposits, withdrawals, and realized gains/losses\"},\"calculateKickbackAmount(uint256)\":{\"notice\":\"Calculates the kickback amount for a given funded amount allowing early payment\"},\"calculateRealizedGainLoss()\":{\"notice\":\"Calculates the total realized gain or loss from paid and impaired invoices\"},\"calculateTargetFees(uint256,uint16)\":{\"notice\":\"Calculates the true fees and net funded amount for a given invoice and factorer's upfront bps, annualised\"},\"creationTimestamp()\":{\"notice\":\"Timestamp of the fund's creation\"},\"decimals()\":{\"notice\":\"Returns the number of decimals the token uses, same as the underlying asset\"},\"deployedCapitalForActiveInvoicesExcludingImpaired()\":{\"notice\":\"Calculates the total funded amount for all active invoices.\"},\"deposit(uint256,address)\":{\"notice\":\"Helper function to handle the logic of depositing assets in exchange for fund shares\"},\"depositPermissions()\":{\"notice\":\"Permissions contracts for deposit and factoring\"},\"depositWithAttachment(uint256,address,(bytes32,uint8,uint8))\":{\"notice\":\"Allows for the deposit of assets in exchange for fund shares with an attachment\"},\"fundInvoice(uint256,uint16)\":{\"notice\":\"Funds a single invoice, transferring the funded amount from the fund to the caller and transferring the invoice NFT to the fund\"},\"getFundInfo()\":{\"notice\":\"Retrieves the fund information\"},\"gracePeriodDays()\":{\"notice\":\"Grace period for invoices\"},\"impairInvoice(uint256)\":{\"notice\":\"Impairs an invoice, using the impairment reserve to cover the loss\"},\"impairReserve()\":{\"notice\":\"Reserve amount for impairment\"},\"impairments(uint256)\":{\"notice\":\"Mapping from invoice ID to impairment details\"},\"invoiceProviderAdapter()\":{\"notice\":\"Address of the invoice provider contract adapter\"},\"maxRedeem()\":{\"notice\":\"Calculates the maximum amount of shares that can be redeemed based on the total assets in the fund\"},\"maxRedeem(address)\":{\"notice\":\"Calculates the maximum amount of shares that can be redeemed based on the total assets in the fund\"},\"maxWithdraw(address)\":{\"notice\":\"Calculates the maximum amount of assets that can be withdrawn\"},\"originalCreditors(uint256)\":{\"notice\":\"Mapping from invoice ID to original creditor's address\"},\"paidInvoiceTax(uint256)\":{\"notice\":\"Mapping from invoice ID to tax amount\"},\"paidInvoicesGain(uint256)\":{\"notice\":\"Mapping of paid invoices ID to track gains/losses\"},\"poolName()\":{\"notice\":\"Name of the factoring pool\"},\"pricePerShare()\":{\"notice\":\"Calculates the current price per share of the fund, \"},\"protocolFeeBalance()\":{\"notice\":\"Accumulated protocol fee balance\"},\"protocolFeeBps()\":{\"notice\":\"Protocol fee in basis points\"},\"reconcileActivePaidInvoices()\":{\"notice\":\"Reconciles the list of active invoices with those that have been paid, updating the fund's records\"},\"redeem(uint256,address,address)\":{\"notice\":\"Helper function to handle the logic of redeeming shares in exchange for assets\"},\"redeemWithAttachment(uint256,address,address,(bytes32,uint8,uint8))\":{\"notice\":\"Redeems shares for underlying assets with an attachment, transferring the assets to the specified receiver\"},\"setAdminFeeBps(uint16)\":{\"notice\":\"Sets the admin fee in basis points\"},\"setApprovalDuration(uint256)\":{\"notice\":\"Sets the duration for which invoice approvals are valid\"},\"setBullaDaoAddress(address)\":{\"notice\":\"Updates the Bulla DAO address\"},\"setDepositPermissions(address)\":{\"notice\":\"Updates the deposit permissions contract\"},\"setFactoringPermissions(address)\":{\"notice\":\"Updates the factoring permissions contract\"},\"setGracePeriodDays(uint256)\":{\"notice\":\"Sets the grace period in days for determining if an invoice is impaired\"},\"setImpairReserve(uint256)\":{\"notice\":\"Sets the impair reserve amount\"},\"setProtocolFeeBps(uint16)\":{\"notice\":\"Updates the protocol fee in basis points (bps)\"},\"setTargetYield(uint16)\":{\"notice\":\"Sets the target yield in basis points\"},\"setTaxBps(uint16)\":{\"notice\":\"Sets the tax basis points (bps)\"},\"setUnderwriter(address)\":{\"notice\":\"Sets a new underwriter for the contract\"},\"targetYieldBps()\":{\"notice\":\"Target yield in basis points\"},\"taxBalance()\":{\"notice\":\"Accumulated tax balance\"},\"taxBps()\":{\"notice\":\"Tax rate in basis points\"},\"totalAssets()\":{\"notice\":\"Calculates the available assets in the fund net of fees, impair reserve and tax\"},\"underwriter()\":{\"notice\":\"Address of the underwriter, trusted to approve invoices\"},\"unfactorInvoice(uint256)\":{\"notice\":\"Unfactors an invoice, returning the invoice NFT to the original creditor and refunding the funded amount\"},\"viewPoolStatus()\":{\"notice\":\"Provides a view of the pool's status, listing paid and impaired invoices, to be called by Gelato or alike\"},\"withdraw(uint256,address,address)\":{\"notice\":\"Helper function to handle the logic of withdrawing assets in exchange for fund shares\"},\"withdrawAdminFees()\":{\"notice\":\"Allows the Pool Owner to withdraw accumulated admin fees.\"},\"withdrawProtocolFees()\":{\"notice\":\"Allows the Bulla DAO to withdraw accumulated protocol fees.\"},\"withdrawTaxBalance()\":{\"notice\":\"Withdraws the accumulated tax balance to the pool owner\"}},\"notice\":\"Bulla Factoring Fund is a ERC4626 compatible fund that allows for the factoring of invoices\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BullaFactoring.sol\":\"BullaFactoring\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC4626.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20, IERC20Metadata, ERC20} from \\\"../ERC20.sol\\\";\\nimport {SafeERC20} from \\\"../utils/SafeERC20.sol\\\";\\nimport {IERC4626} from \\\"../../../interfaces/IERC4626.sol\\\";\\nimport {Math} from \\\"../../../utils/math/Math.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC4626 \\\"Tokenized Vault Standard\\\" as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[EIP-4626].\\n *\\n * This extension allows the minting and burning of \\\"shares\\\" (represented using the ERC20 inheritance) in exchange for\\n * underlying \\\"assets\\\" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends\\n * the ERC20 standard. Any additional extensions included along it would affect the \\\"shares\\\" token represented by this\\n * contract and not the \\\"assets\\\" token which is an independent contract.\\n *\\n * [CAUTION]\\n * ====\\n * In empty (or nearly empty) ERC-4626 vaults, deposits are at high risk of being stolen through frontrunning\\n * with a \\\"donation\\\" to the vault that inflates the price of a share. This is variously known as a donation or inflation\\n * attack and is essentially a problem of slippage. Vault deployers can protect against this attack by making an initial\\n * deposit of a non-trivial amount of the asset, such that price manipulation becomes infeasible. Withdrawals may\\n * similarly be affected by slippage. Users can protect against this attack as well as unexpected slippage in general by\\n * verifying the amount received is as expected, using a wrapper that performs these checks such as\\n * https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router].\\n *\\n * Since v4.9, this implementation uses virtual assets and shares to mitigate that risk. The `_decimalsOffset()`\\n * corresponds to an offset in the decimal representation between the underlying asset's decimals and the vault\\n * decimals. This offset also determines the rate of virtual shares to virtual assets in the vault, which itself\\n * determines the initial exchange rate. While not fully preventing the attack, analysis shows that the default offset\\n * (0) makes it non-profitable, as a result of the value being captured by the virtual shares (out of the attacker's\\n * donation) matching the attacker's expected gains. With a larger offset, the attack becomes orders of magnitude more\\n * expensive than it is profitable. More details about the underlying math can be found\\n * xref:erc4626.adoc#inflation-attack[here].\\n *\\n * The drawback of this approach is that the virtual shares do capture (a very small) part of the value being accrued\\n * to the vault. Also, if the vault experiences losses, the users try to exit the vault, the virtual shares and assets\\n * will cause the first user to exit to experience reduced losses in detriment to the last users that will experience\\n * bigger losses. Developers willing to revert back to the pre-v4.9 behavior just need to override the\\n * `_convertToShares` and `_convertToAssets` functions.\\n *\\n * To learn more, check out our xref:ROOT:erc4626.adoc[ERC-4626 guide].\\n * ====\\n */\\nabstract contract ERC4626 is ERC20, IERC4626 {\\n    using Math for uint256;\\n\\n    IERC20 private immutable _asset;\\n    uint8 private immutable _underlyingDecimals;\\n\\n    /**\\n     * @dev Attempted to deposit more assets than the max amount for `receiver`.\\n     */\\n    error ERC4626ExceededMaxDeposit(address receiver, uint256 assets, uint256 max);\\n\\n    /**\\n     * @dev Attempted to mint more shares than the max amount for `receiver`.\\n     */\\n    error ERC4626ExceededMaxMint(address receiver, uint256 shares, uint256 max);\\n\\n    /**\\n     * @dev Attempted to withdraw more assets than the max amount for `receiver`.\\n     */\\n    error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);\\n\\n    /**\\n     * @dev Attempted to redeem more shares than the max amount for `receiver`.\\n     */\\n    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\\n\\n    /**\\n     * @dev Set the underlying asset contract. This must be an ERC20-compatible contract (ERC20 or ERC777).\\n     */\\n    constructor(IERC20 asset_) {\\n        (bool success, uint8 assetDecimals) = _tryGetAssetDecimals(asset_);\\n        _underlyingDecimals = success ? assetDecimals : 18;\\n        _asset = asset_;\\n    }\\n\\n    /**\\n     * @dev Attempts to fetch the asset decimals. A return value of false indicates that the attempt failed in some way.\\n     */\\n    function _tryGetAssetDecimals(IERC20 asset_) private view returns (bool, uint8) {\\n        (bool success, bytes memory encodedDecimals) = address(asset_).staticcall(\\n            abi.encodeCall(IERC20Metadata.decimals, ())\\n        );\\n        if (success && encodedDecimals.length >= 32) {\\n            uint256 returnedDecimals = abi.decode(encodedDecimals, (uint256));\\n            if (returnedDecimals <= type(uint8).max) {\\n                return (true, uint8(returnedDecimals));\\n            }\\n        }\\n        return (false, 0);\\n    }\\n\\n    /**\\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This\\n     * \\\"original\\\" value is cached during construction of the vault contract. If this read operation fails (e.g., the\\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals.\\n     *\\n     * See {IERC20Metadata-decimals}.\\n     */\\n    function decimals() public view virtual override(IERC20Metadata, ERC20) returns (uint8) {\\n        return _underlyingDecimals + _decimalsOffset();\\n    }\\n\\n    /** @dev See {IERC4626-asset}. */\\n    function asset() public view virtual returns (address) {\\n        return address(_asset);\\n    }\\n\\n    /** @dev See {IERC4626-totalAssets}. */\\n    function totalAssets() public view virtual returns (uint256) {\\n        return _asset.balanceOf(address(this));\\n    }\\n\\n    /** @dev See {IERC4626-convertToShares}. */\\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\\n        return _convertToShares(assets, Math.Rounding.Floor);\\n    }\\n\\n    /** @dev See {IERC4626-convertToAssets}. */\\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\\n        return _convertToAssets(shares, Math.Rounding.Floor);\\n    }\\n\\n    /** @dev See {IERC4626-maxDeposit}. */\\n    function maxDeposit(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    /** @dev See {IERC4626-maxMint}. */\\n    function maxMint(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    /** @dev See {IERC4626-maxWithdraw}. */\\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Floor);\\n    }\\n\\n    /** @dev See {IERC4626-maxRedeem}. */\\n    function maxRedeem(address owner) public view virtual returns (uint256) {\\n        return balanceOf(owner);\\n    }\\n\\n    /** @dev See {IERC4626-previewDeposit}. */\\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\\n        return _convertToShares(assets, Math.Rounding.Floor);\\n    }\\n\\n    /** @dev See {IERC4626-previewMint}. */\\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\\n        return _convertToAssets(shares, Math.Rounding.Ceil);\\n    }\\n\\n    /** @dev See {IERC4626-previewWithdraw}. */\\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\\n        return _convertToShares(assets, Math.Rounding.Ceil);\\n    }\\n\\n    /** @dev See {IERC4626-previewRedeem}. */\\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\\n        return _convertToAssets(shares, Math.Rounding.Floor);\\n    }\\n\\n    /** @dev See {IERC4626-deposit}. */\\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256) {\\n        uint256 maxAssets = maxDeposit(receiver);\\n        if (assets > maxAssets) {\\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);\\n        }\\n\\n        uint256 shares = previewDeposit(assets);\\n        _deposit(_msgSender(), receiver, assets, shares);\\n\\n        return shares;\\n    }\\n\\n    /** @dev See {IERC4626-mint}.\\n     *\\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\\n     * In this case, the shares will be minted without requiring any assets to be deposited.\\n     */\\n    function mint(uint256 shares, address receiver) public virtual returns (uint256) {\\n        uint256 maxShares = maxMint(receiver);\\n        if (shares > maxShares) {\\n            revert ERC4626ExceededMaxMint(receiver, shares, maxShares);\\n        }\\n\\n        uint256 assets = previewMint(shares);\\n        _deposit(_msgSender(), receiver, assets, shares);\\n\\n        return assets;\\n    }\\n\\n    /** @dev See {IERC4626-withdraw}. */\\n    function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {\\n        uint256 maxAssets = maxWithdraw(owner);\\n        if (assets > maxAssets) {\\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\\n        }\\n\\n        uint256 shares = previewWithdraw(assets);\\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\\n\\n        return shares;\\n    }\\n\\n    /** @dev See {IERC4626-redeem}. */\\n    function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {\\n        uint256 maxShares = maxRedeem(owner);\\n        if (shares > maxShares) {\\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\\n        }\\n\\n        uint256 assets = previewRedeem(shares);\\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\\n\\n        return assets;\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\\n     */\\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\\n        return assets.mulDiv(totalSupply() + 10 ** _decimalsOffset(), totalAssets() + 1, rounding);\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\\n     */\\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 10 ** _decimalsOffset(), rounding);\\n    }\\n\\n    /**\\n     * @dev Deposit/mint common workflow.\\n     */\\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\\n        // If _asset is ERC777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\\n        // calls the vault, which is assumed not malicious.\\n        //\\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\\n        // assets are transferred and before the shares are minted, which is a valid state.\\n        // slither-disable-next-line reentrancy-no-eth\\n        SafeERC20.safeTransferFrom(_asset, caller, address(this), assets);\\n        _mint(receiver, shares);\\n\\n        emit Deposit(caller, receiver, assets, shares);\\n    }\\n\\n    /**\\n     * @dev Withdraw/redeem common workflow.\\n     */\\n    function _withdraw(\\n        address caller,\\n        address receiver,\\n        address owner,\\n        uint256 assets,\\n        uint256 shares\\n    ) internal virtual {\\n        if (caller != owner) {\\n            _spendAllowance(owner, caller, shares);\\n        }\\n\\n        // If _asset is ERC777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\\n        // calls the vault, which is assumed not malicious.\\n        //\\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\\n        // shares are burned and after the assets are transferred, which is a valid state.\\n        _burn(owner, shares);\\n        SafeERC20.safeTransfer(_asset, receiver, assets);\\n\\n        emit Withdraw(caller, receiver, owner, assets, shares);\\n    }\\n\\n    function _decimalsOffset() internal view virtual returns (uint8) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x1837547e04d5fe5334eeb77a345683c22995f1e7aa033020757ddf83a80fc72d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"contracts/BullaFactoring.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.20;\\nimport '@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol';\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport {console} from \\\"../lib/forge-std/src/console.sol\\\";\\nimport \\\"./interfaces/IInvoiceProviderAdapter.sol\\\";\\nimport \\\"./interfaces/IBullaFactoring.sol\\\";\\nimport \\\"./Permissions.sol\\\";\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\n/// @title Bulla Factoring Fund\\n/// @author @solidoracle\\n/// @notice Bulla Factoring Fund is a ERC4626 compatible fund that allows for the factoring of invoices\\ncontract BullaFactoring is IBullaFactoring, ERC20, ERC4626, Ownable {\\n    using Math for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Address of the Bulla DAO, a trusted multisig\\n    address public bullaDao;\\n    /// @notice Protocol fee in basis points\\n    uint16 public protocolFeeBps;\\n    /// @notice Admin fee in basis points\\n    uint16 public adminFeeBps;\\n    /// @notice Accumulated protocol fee balance\\n    uint256 public protocolFeeBalance;\\n    /// @notice Accumulated admin fee balance\\n    uint256 public adminFeeBalance;\\n    /// @notice Address of the underlying asset token (e.g., USDC)\\n    IERC20 public assetAddress;\\n    /// @notice Address of the invoice provider contract adapter\\n    IInvoiceProviderAdapter public invoiceProviderAdapter;\\n    uint256 private totalDeposits; \\n    uint256 private totalWithdrawals;\\n    /// @notice Address of the underwriter, trusted to approve invoices\\n    address public underwriter;\\n    /// @notice Timestamp of the fund's creation\\n    uint256 public creationTimestamp;\\n    /// @notice Reserve amount for impairment\\n    uint256 public impairReserve;\\n    /// @notice Name of the factoring pool\\n    string public poolName;\\n    /// @notice Tax rate in basis points\\n    uint16 public taxBps;\\n    /// @notice Accumulated tax balance\\n    uint256 public taxBalance;\\n    /// @notice Target yield in basis points\\n    uint16 public targetYieldBps;\\n\\n    /// @notice Grace period for invoices\\n    uint256 public gracePeriodDays = 60;\\n\\n    /// @notice Permissions contracts for deposit and factoring\\n    Permissions public depositPermissions;\\n    Permissions public factoringPermissions;\\n\\n    /// Mapping of paid invoices ID to track gains/losses\\n    mapping(uint256 => uint256) public paidInvoicesGain;\\n\\n    /// Mapping from invoice ID to original creditor's address\\n    mapping(uint256 => address) public originalCreditors;\\n\\n    /// Mapping from invoice ID to invoice approval details\\n    mapping(uint256 => InvoiceApproval) public approvedInvoices;\\n    /// @notice The duration of invoice approval before it expires\\n    uint256 public approvalDuration = 1 hours;\\n\\n    /// Array to hold the IDs of all active invoices\\n    uint256[] public activeInvoices;\\n\\n    /// Array to track IDs of paid invoices\\n    uint256[] private paidInvoicesIds;\\n\\n    /// Array to track IDs of impaired invoices by fund\\n    uint256[] private impairedByFundInvoicesIds;\\n\\n    /// Mapping from invoice ID to impairment details\\n    mapping(uint256 => ImpairmentDetails) public impairments;\\n\\n    /// Mapping from invoice ID to tax amount\\n    mapping(uint256 => uint256) public paidInvoiceTax;\\n\\n    /// Errors\\n    error CallerNotUnderwriter();\\n    error DeductionsExceedsRealisedGains();\\n    error InvoiceNotApproved();\\n    error ApprovalExpired();\\n    error InvoiceCanceled();\\n    error InvoicePaidAmountChanged();\\n    error FunctionNotSupported();\\n    error UnauthorizedDeposit(address caller);\\n    error UnauthorizedFactoring(address caller);\\n    error UnpaidInvoice();\\n    error InvoiceNotImpaired();\\n    error InvoiceAlreadyPaid();\\n    error InvoiceAlreadyImpairedByFund();\\n    error CallerNotOriginalCreditor();\\n    error InvalidPercentage();\\n    error CallerNotBullaDao();\\n    error NoFeesToWithdraw();\\n    error InvalidAddress();\\n    error NoTaxBalanceToWithdraw();\\n    error ImpairReserveMustBeGreater();\\n    error InvoiceCreditorChanged();\\n    error ImpairReserveNotSet();\\n    error InvoiceCannotBePaid();\\n    error InvoiceTokenMismatch();\\n    error InvoiceAlreadyFunded();\\n\\n    /// @param _asset underlying supported stablecoin asset for deposit \\n    /// @param _invoiceProviderAdapter adapter for invoice provider\\n    /// @param _underwriter address of the underwriter\\n    constructor(\\n        IERC20 _asset, \\n        IInvoiceProviderAdapter _invoiceProviderAdapter, \\n        address _underwriter,\\n        Permissions _depositPermissions,\\n        Permissions _factoringPermissions,\\n        address _bullaDao,\\n        uint16 _protocolFeeBps,\\n        uint16 _adminFeeBps,\\n        string memory _poolName,\\n        uint16 _taxBps,\\n        uint16 _targetYieldBps,\\n        string memory _tokenName, \\n        string memory _tokenSymbol\\n    ) ERC20(_tokenName, _tokenSymbol) ERC4626(_asset) Ownable(msg.sender) {\\n        if (_protocolFeeBps <= 0 || _protocolFeeBps > 10000) revert InvalidPercentage();\\n        if (_adminFeeBps <= 0 || _adminFeeBps > 10000) revert InvalidPercentage();\\n\\n        assetAddress = _asset;\\n        invoiceProviderAdapter = _invoiceProviderAdapter;\\n        underwriter = _underwriter;\\n        depositPermissions = _depositPermissions;\\n        factoringPermissions = _factoringPermissions;\\n        bullaDao = _bullaDao;\\n        protocolFeeBps = _protocolFeeBps;\\n        adminFeeBps = _adminFeeBps; \\n        creationTimestamp = block.timestamp;\\n        poolName = _poolName;\\n        taxBps = _taxBps;\\n        targetYieldBps = _targetYieldBps;\\n    }\\n\\n    /// @notice Returns the number of decimals the token uses, same as the underlying asset\\n    /// @return The number of decimals for this token\\n    function decimals() public view override(ERC20, ERC4626) returns (uint8) {\\n        return ERC20(address(assetAddress)).decimals();\\n    }\\n\\n    /// @notice Approves an invoice for funding, can only be called by the underwriter\\n    /// @param invoiceId The ID of the invoice to approve\\n    function approveInvoice(uint256 invoiceId, uint16 _interestApr, uint16 _upfrontBps, uint16 minDaysInterestApplied) public {\\n        if (_upfrontBps <= 0 || _upfrontBps > 10000) revert InvalidPercentage();\\n        if (msg.sender != underwriter) revert CallerNotUnderwriter();\\n        uint256 _validUntil = block.timestamp + approvalDuration;\\n        IInvoiceProviderAdapter.Invoice memory invoiceSnapshot = invoiceProviderAdapter.getInvoiceDetails(invoiceId);\\n        if (invoiceSnapshot.faceValue - invoiceSnapshot.paidAmount == 0) revert InvoiceCannotBePaid();\\n        // if invoice already got approved and funded (creditor/owner of invoice is this contract), do not override storage\\n        address invoiceContractAddress = invoiceProviderAdapter.getInvoiceContractAddress();\\n        if (IERC721(invoiceContractAddress).ownerOf(invoiceId) == address(this)) revert InvoiceAlreadyFunded();\\n        // check claim token is equal to pool token\\n        address claimToken = invoiceSnapshot.tokenAddress;\\n        if (claimToken != address(assetAddress)) revert InvoiceTokenMismatch();\\n\\n        approvedInvoices[invoiceId] = InvoiceApproval({\\n            approved: true,\\n            validUntil: _validUntil,\\n            invoiceSnapshot: invoiceSnapshot,\\n            fundedTimestamp: 0,\\n            interestApr: _interestApr,\\n            upfrontBps: _upfrontBps,\\n            fundedAmountGross: 0,\\n            fundedAmountNet: 0,\\n            minDaysInterestApplied: minDaysInterestApplied,\\n            trueFaceValue: invoiceSnapshot.faceValue - invoiceSnapshot.paidAmount,\\n            protocolFeeBps: protocolFeeBps,\\n            adminFeeBps: adminFeeBps\\n        });\\n        emit InvoiceApproved(invoiceId, _interestApr, _upfrontBps, _validUntil, minDaysInterestApplied);\\n    }\\n\\n    /// @notice Calculates the interest, protocol fee and admin fee for a given invoice approval over a specified number of days\\n    /// @param approval The invoice approval details\\n    /// @param daysOfInterest The number of days over which interest is calculated\\n    /// @return interest The calculated interest amount\\n    /// @return protocolFee The calculated protocol fee amount\\n    /// @return adminFee The calculated admin fee amount\\n    function calculateFees(InvoiceApproval memory approval, uint256 daysOfInterest) private pure returns (uint256 interest, uint256 protocolFee, uint256 adminFee) {\\n        uint256 interestAprBps = approval.interestApr;\\n        uint256 interestAprMbps = interestAprBps * 1000;\\n\\n        // Calculate the APR discount for the payment period\\n        // millibips used due to the small nature of the fees\\n        uint256 interestRateMbps = Math.mulDiv(interestAprMbps, daysOfInterest, 365);\\n\\n        // calculate the APR discount with protocols fee\\n        // millibips used due to the small nature of the fees\\n        uint256 interestAndProtocolFeeMbps = Math.mulDiv(interestRateMbps, (10000 + uint256(approval.protocolFeeBps)), 10000);\\n        \\n        // Calculate the admin fee rate\\n        uint256 adminFeeRateMbps = Math.mulDiv(uint256(approval.adminFeeBps) * 1000, daysOfInterest, 365);\\n        \\n        // Calculate the total fee rate Mbps (interest + protocol fee + admin fee)\\n        uint256 totalFeeRateMbps = interestAndProtocolFeeMbps + adminFeeRateMbps;\\n        \\n        // cap total fees to max available to distribute\\n        uint256 capTotalFees = approval.trueFaceValue - approval.fundedAmountNet;\\n\\n        // Calculate total fees\\n        uint256 totalFees = Math.min(capTotalFees, Math.mulDiv(approval.trueFaceValue, totalFeeRateMbps, 10_000_000));\\n        \\n        // Calculate the interest and protocol fee\\n        uint256 interestAndProtocolFee = totalFeeRateMbps == 0 ? 0 : Math.mulDiv(totalFees, interestAndProtocolFeeMbps, totalFeeRateMbps);\\n        \\n        // Calculate the true interest\\n        interest = interestAndProtocolFeeMbps == 0 ? 0 : Math.mulDiv(interestAndProtocolFee, interestRateMbps, interestAndProtocolFeeMbps);\\n\\n        // Calculate true protocol fee\\n        protocolFee = interestAndProtocolFee - interest;\\n\\n        // Calculate true admin fee\\n        adminFee = totalFees - interestAndProtocolFee;\\n\\n        return (interest, protocolFee, adminFee);\\n    }\\n\\n    /// @notice Calculates the kickback amount for a given funded amount allowing early payment\\n    /// @param invoiceId The ID of the invoice for which to calculate the kickback amount\\n    /// @return kickbackAmount The calculated kickback amount\\n    /// @return trueInterest The true interest amount\\n    /// @return trueProtocolFee The true protocol fee amount\\n    /// @return trueAdminFee The true admin fee amount\\n    function calculateKickbackAmount(uint256 invoiceId) public view returns (uint256 kickbackAmount, uint256 trueInterest, uint256 trueProtocolFee, uint256 trueAdminFee) {\\n        InvoiceApproval memory approval = approvedInvoices[invoiceId];\\n    \\n        uint256 daysSinceFunded = (block.timestamp > approval.fundedTimestamp) ? Math.mulDiv(block.timestamp - approval.fundedTimestamp, 1, 1 days, Math.Rounding.Ceil) : 0;\\n        \\n        uint256 daysOfInterest = daysSinceFunded = Math.max(daysSinceFunded, approval.minDaysInterestApplied);\\n\\n        (trueInterest, trueProtocolFee, trueAdminFee) = calculateFees(approval, daysOfInterest);\\n\\n        // Calculate the total amount that should have been paid to the original creditor\\n        uint256 totalDueToCreditor = approval.trueFaceValue - trueAdminFee - trueInterest - trueProtocolFee;\\n\\n        // Calculate the kickback amount\\n        kickbackAmount = totalDueToCreditor > approval.fundedAmountNet ? totalDueToCreditor - approval.fundedAmountNet : 0;\\n\\n        return (kickbackAmount, trueInterest, trueProtocolFee, trueAdminFee);\\n    }\\n\\n    /// @notice Calculates the total realized gain or loss from paid and impaired invoices\\n    /// @return The total realized gain adjusted for losses\\n    function calculateRealizedGainLoss() public view returns (int256) {\\n        int256 realizedGains = 0;\\n        // Consider gains from paid invoices\\n        for (uint256 i = 0; i < paidInvoicesIds.length; i++) {\\n            uint256 invoiceId = paidInvoicesIds[i];\\n            realizedGains += int256(paidInvoicesGain[invoiceId]);\\n        }\\n\\n        // Consider losses from impaired invoices by fund\\n        for (uint256 i = 0; i < impairedByFundInvoicesIds.length; i++) {\\n            uint256 invoiceId = impairedByFundInvoicesIds[i];\\n            realizedGains += int256(impairments[invoiceId].gainAmount);\\n            realizedGains -= int256(impairments[invoiceId].lossAmount);\\n        }\\n\\n        // Consider losses from impaired invoices in activeInvoices\\n        for (uint256 i = 0; i < activeInvoices.length; i++) {\\n            uint256 invoiceId = activeInvoices[i];\\n            if (isInvoiceImpaired(invoiceId)) {\\n                uint256 fundedAmount = approvedInvoices[invoiceId].fundedAmountNet;\\n                realizedGains -= int256(fundedAmount);\\n            }\\n        }\\n\\n        return realizedGains;\\n    }\\n\\n    /// @notice Calculates the capital account balance, including deposits, withdrawals, and realized gains/losses\\n    /// @return The calculated capital account balance\\n    function calculateCapitalAccount() public view returns (uint256) {\\n        int256 realizedGainLoss = calculateRealizedGainLoss();\\n\\n        int256 depositsMinusWithdrawals = int256(totalDeposits) - int256(totalWithdrawals);\\n        int256 capitalAccount = depositsMinusWithdrawals + realizedGainLoss;\\n\\n        return capitalAccount > 0 ? uint(capitalAccount) : 0;\\n    }\\n\\n    /// @notice Calculates the current price per share of the fund, \\n    /// @return The current price per share, scaled to the underlying asset's decimal places\\n    function pricePerShare() public view returns (uint256) {\\n        return previewRedeem(10**decimals());\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\\n     */\\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view override returns (uint256) {\\n        uint256 _totalSupply = totalSupply();\\n        \\n        if (_totalSupply == 0) {\\n            return assets;\\n        }\\n\\n        return assets.mulDiv(_totalSupply, calculateCapitalAccount(), rounding);\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\\n     */\\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view override returns (uint256) {\\n        uint256 _totalSupply = totalSupply();\\n\\n        if (_totalSupply == 0) {\\n            return shares;\\n        }\\n\\n        return shares.mulDiv(calculateCapitalAccount(), _totalSupply, rounding);\\n    }\\n\\n    /// @notice Calculates the total accrued profits from all active invoices\\n    /// @dev Iterates through all active invoices, calculates interest for each, deducts taxes, and sums the net accrued interest\\n    /// @return accruedProfits The total net accrued profits across all active invoices\\n    function calculateAccruedProfits() public view returns (uint256 accruedProfits) {\\n        for (uint256 i = 0; i < activeInvoices.length; i++) {\\n            uint256 invoiceId = activeInvoices[i];\\n            \\n            if(!isInvoiceImpaired(invoiceId)) {\\n                (,uint256 trueInterest,,) = calculateKickbackAmount(invoiceId);\\n                uint256 grossAccruedInterestOnRemainingInvoiceAmount = trueInterest;\\n\\n                // Deduct tax from the accrued interest\\n                uint256 taxAmount = calculateTax(grossAccruedInterestOnRemainingInvoiceAmount);\\n                uint256 netAccruedInterest = grossAccruedInterestOnRemainingInvoiceAmount - taxAmount;\\n\\n                accruedProfits += netAccruedInterest;\\n            }\\n        }\\n\\n        return accruedProfits;\\n    }\\n\\n    /** @dev See {IERC4626-previewDeposit}. */\\n    function previewDeposit(uint256 assets) public view override returns (uint256) {\\n        uint256 capitalAccount = calculateCapitalAccount();\\n        uint256 sharesOutstanding = totalSupply();\\n        uint256 shares;\\n\\n        if(sharesOutstanding == 0) {\\n            shares = assets;\\n        } else {\\n            uint256 accruedProfits = calculateAccruedProfits();\\n            shares = Math.mulDiv(assets, sharesOutstanding, (capitalAccount + accruedProfits), Math.Rounding.Floor);\\n        }\\n\\n        return shares;\\n    }\\n\\n    /// @notice Helper function to handle the logic of depositing assets in exchange for fund shares\\n    /// @param receiver The address to receive the fund shares\\n    /// @param assets The amount of assets to deposit\\n    /// @return The number of shares issued for the deposit\\n    function deposit(uint256 assets,address receiver) public override returns (uint256) {\\n        if (!depositPermissions.isAllowed(_msgSender())) revert UnauthorizedDeposit(_msgSender());\\n        \\n        uint256 shares = super.deposit(assets, receiver);\\n        totalDeposits += assets;\\n        return shares;\\n    }\\n\\n    /// @notice Allows for the deposit of assets in exchange for fund shares with an attachment\\n    /// @param assets The amount of assets to deposit\\n    /// @param receiver The address to receive the fund shares\\n    /// @param attachment The attachment data for the deposit\\n    /// @return The number of shares issued for the deposit\\n    function depositWithAttachment(uint256 assets, address receiver, Multihash calldata attachment) external returns (uint256) {\\n        uint256 shares = deposit(assets, receiver);\\n        emit DepositMadeWithAttachment(_msgSender(), assets, shares, attachment);\\n        return shares;\\n    }\\n\\n    /// @notice Calculates the true fees and net funded amount for a given invoice and factorer's upfront bps, annualised\\n    /// @param invoiceId The ID of the invoice for which to calculate the fees\\n    /// @param factorerUpfrontBps The upfront bps specified by the factorer\\n    /// @return fundedAmountGross The gross amount to be funded to the factorer\\n    /// @return adminFee The target calculated admin fee\\n    /// @return targetInterest The calculated interest fee\\n    /// @return targetProtocolFee The calculated protocol fee\\n    /// @return netFundedAmount The net amount that will be funded to the factorer after deducting fees\\n    function calculateTargetFees(uint256 invoiceId, uint16 factorerUpfrontBps) public view returns (uint256 fundedAmountGross, uint256 adminFee, uint256 targetInterest, uint256 targetProtocolFee, uint256 netFundedAmount) {\\n        IInvoiceProviderAdapter.Invoice memory invoice = invoiceProviderAdapter.getInvoiceDetails(invoiceId);\\n        InvoiceApproval memory approval = approvedInvoices[invoiceId];\\n\\n        if (!approval.approved) revert InvoiceNotApproved();\\n        if (factorerUpfrontBps > approval.upfrontBps || factorerUpfrontBps == 0) revert InvalidPercentage();\\n\\n        uint256 trueFaceValue = approval.trueFaceValue;\\n\\n        fundedAmountGross = Math.mulDiv(trueFaceValue, factorerUpfrontBps, 10000);\\n\\n        uint256 daysUntilDue =  Math.mulDiv(invoice.dueDate - block.timestamp, 1, 1 days, Math.Rounding.Ceil);\\n\\n        /// @dev minDaysInterestApplied is the minimum number of days the invoice can be funded for, set by the underwriter during approval\\n        daysUntilDue = Math.max(daysUntilDue, approval.minDaysInterestApplied);\\n\\n        (targetInterest, targetProtocolFee, adminFee) = calculateFees(approval, daysUntilDue);\\n\\n        uint256 totalFees = adminFee + targetInterest + targetProtocolFee;\\n        netFundedAmount = fundedAmountGross - totalFees;\\n\\n        return (fundedAmountGross, adminFee, targetInterest, targetProtocolFee, netFundedAmount);\\n    }\\n\\n    /// @notice Funds a single invoice, transferring the funded amount from the fund to the caller and transferring the invoice NFT to the fund\\n    /// @dev No checks needed for the creditor, as transferFrom will revert unless it gets executed by the nft owner (i.e. claim creditor)\\n    /// @param invoiceId The ID of the invoice to fund\\n    /// @param factorerUpfrontBps factorer specified upfront bps\\n    function fundInvoice(uint256 invoiceId, uint16 factorerUpfrontBps) external returns(uint256) {\\n        if (!factoringPermissions.isAllowed(msg.sender)) revert UnauthorizedFactoring(msg.sender);\\n        if (!approvedInvoices[invoiceId].approved) revert InvoiceNotApproved();\\n        if (factorerUpfrontBps > approvedInvoices[invoiceId].upfrontBps || factorerUpfrontBps == 0) revert InvalidPercentage();\\n        if (block.timestamp > approvedInvoices[invoiceId].validUntil) revert ApprovalExpired();\\n        IInvoiceProviderAdapter.Invoice memory invoicesDetails = invoiceProviderAdapter.getInvoiceDetails(invoiceId);\\n        if (invoicesDetails.isCanceled) revert InvoiceCanceled();\\n        if (approvedInvoices[invoiceId].invoiceSnapshot.paidAmount != invoicesDetails.paidAmount) revert InvoicePaidAmountChanged();\\n        if (approvedInvoices[invoiceId].invoiceSnapshot.creditor != invoicesDetails.creditor) revert InvoiceCreditorChanged();\\n\\n        (uint256 fundedAmountGross,,,, uint256 fundedAmountNet) = calculateTargetFees(invoiceId, factorerUpfrontBps);\\n\\n        // store values in approvedInvoices\\n        approvedInvoices[invoiceId].fundedAmountGross = fundedAmountGross;\\n        approvedInvoices[invoiceId].fundedAmountNet = fundedAmountNet;\\n        approvedInvoices[invoiceId].fundedTimestamp = block.timestamp;\\n        // update upfrontBps with what was passed in the arg by the factorer\\n        approvedInvoices[invoiceId].upfrontBps = factorerUpfrontBps; \\n\\n        // transfer net funded amount to caller\\n        assetAddress.safeTransfer(msg.sender, fundedAmountNet);\\n\\n        // transfer invoice nft ownership to vault\\n        address invoiceContractAddress = invoiceProviderAdapter.getInvoiceContractAddress();\\n        IERC721(invoiceContractAddress).transferFrom(msg.sender, address(this), invoiceId);\\n\\n        originalCreditors[invoiceId] = msg.sender;\\n        activeInvoices.push(invoiceId);\\n        emit InvoiceFunded(invoiceId, fundedAmountNet, msg.sender);\\n        return fundedAmountNet;\\n    }\\n\\n    /// @notice Provides a view of the pool's status, listing paid and impaired invoices, to be called by Gelato or alike\\n    /// @return paidInvoices An array of paid invoice IDs\\n    /// @return impairedInvoices An array of impaired invoice IDs\\n    function viewPoolStatus() public view returns (uint256[] memory paidInvoices, uint256[] memory impairedInvoices) {\\n        uint256 activeCount = activeInvoices.length;\\n        uint256 impairedByFundCount = impairedByFundInvoicesIds.length;\\n        \\n        paidInvoices = new uint256[](activeCount + impairedByFundCount);\\n        impairedInvoices = new uint256[](activeCount);\\n        \\n        uint256 paidCount = 0;\\n        uint256 impairedCount = 0;\\n\\n        // Check active invoices\\n        for (uint256 i = 0; i < activeCount; i++) {\\n            uint256 invoiceId = activeInvoices[i];\\n            \\n            if (isInvoicePaid(invoiceId)) {\\n                paidInvoices[paidCount++] = invoiceId;\\n            } else if (isInvoiceImpaired(invoiceId)) {\\n                impairedInvoices[impairedCount++] = invoiceId;\\n            }\\n        }\\n\\n        // Check impaired invoices by the fund\\n        for (uint256 i = 0; i < impairedByFundCount; i++) {\\n            uint256 invoiceId = impairedByFundInvoicesIds[i];\\n            \\n            if (isInvoicePaid(invoiceId)) {\\n                paidInvoices[paidCount++] = invoiceId;\\n            }\\n        }\\n\\n        // Overwrite the length of the arrays\\n        assembly {\\n            mstore(paidInvoices, paidCount)\\n            mstore(impairedInvoices, impairedCount)\\n        }\\n\\n        return (paidInvoices, impairedInvoices);\\n    }\\n\\n    /// @notice Checks if an invoice is fully paid\\n    /// @param invoiceId The ID of the invoice to check\\n    /// @return True if the invoice is fully paid, false otherwise\\n    function isInvoicePaid(uint256 invoiceId) private view returns (bool) {\\n        IInvoiceProviderAdapter.Invoice memory invoicesDetails = invoiceProviderAdapter.getInvoiceDetails(invoiceId);\\n        return invoicesDetails.faceValue == invoicesDetails.paidAmount;\\n    }\\n\\n    /// @notice Checks if an invoice is impaired, based on its due date and a grace period\\n    /// @param invoiceId The ID of the invoice to check\\n    /// @return True if the invoice is impaired, false otherwise\\n    function isInvoiceImpaired(uint256 invoiceId) private view returns (bool) {\\n        IInvoiceProviderAdapter.Invoice memory invoice = invoiceProviderAdapter.getInvoiceDetails(invoiceId);\\n        uint256 DaysAfterDueDate = invoice.dueDate + (gracePeriodDays * 1 days); \\n        return block.timestamp > DaysAfterDueDate;\\n    }\\n\\n    function getFundedAmount(uint invoiceId) public view returns (uint) {\\n        return approvedInvoices[invoiceId].fundedAmountNet;\\n    }\\n    \\n    /// @notice Increments the profit, tax, and fee balances for a given invoice\\n    /// @param invoiceId The ID of the invoice\\n    /// @param trueInterest The true interest amount for the invoice\\n    /// @param trueProtocolFee The true protocol fee amount for the invoice\\n    /// @param trueAdminFee The true admin fee amount for the invoice\\n    function incrementProfitTaxAndFeeBalances(uint256 invoiceId, uint256 trueInterest, uint256 trueProtocolFee, uint256 trueAdminFee) private {\\n        // Add the admin fee to the balance\\n        adminFeeBalance += trueAdminFee;\\n        \\n        uint256 taxAmount = calculateTax(trueInterest);\\n\\n        // store factoring gain\\n        paidInvoicesGain[invoiceId] = trueInterest - taxAmount;\\n\\n        // Update storage variables\\n        paidInvoiceTax[invoiceId] = taxAmount;\\n        taxBalance += taxAmount;\\n        protocolFeeBalance += trueProtocolFee;\\n\\n        // Add the invoice ID to the paidInvoicesIds array\\n        paidInvoicesIds.push(invoiceId);\\n    }\\n\\n    /// @notice Reconciles the list of active invoices with those that have been paid, updating the fund's records\\n    /// @dev This function should be called when viewPoolStatus returns some updates, to ensure accurate accounting\\n    function reconcileActivePaidInvoices() external {\\n        (uint256[] memory paidInvoiceIds, ) = viewPoolStatus();\\n\\n        for (uint256 i = 0; i < paidInvoiceIds.length; i++) {\\n            uint256 invoiceId = paidInvoiceIds[i];\\n            \\n            // calculate kickback amount adjusting for true interest, protocol and admin fees\\n            (uint256 kickbackAmount, uint256 trueInterest, uint256 trueProtocolFee, uint256 trueAdminFee) = calculateKickbackAmount(invoiceId);\\n\\n            incrementProfitTaxAndFeeBalances(invoiceId, trueInterest, trueProtocolFee, trueAdminFee);   \\n\\n            // Disperse kickback amount to the original creditor\\n            address originalCreditor = originalCreditors[invoiceId];            \\n            if (kickbackAmount != 0) {\\n                assetAddress.safeTransfer(originalCreditor, kickbackAmount);\\n                emit InvoiceKickbackAmountSent(invoiceId, kickbackAmount, originalCreditor);\\n            }\\n\\n            // Check if the invoice was previously marked as impaired by the fund\\n            if (impairments[invoiceId].isImpaired) {\\n                // Remove the invoice from impaired array\\n                removeImpairedByFundInvoice(invoiceId);\\n\\n                // Adjust impairment in fund records\\n                delete impairments[invoiceId];\\n            } else {\\n                // Remove the invoice from activeInvoices array\\n                removeActivePaidInvoice(invoiceId);   \\n            }\\n\\n            InvoiceApproval memory approval = approvedInvoices[invoiceId];\\n            emit InvoicePaid(invoiceId, trueInterest, trueProtocolFee, trueAdminFee, approval.fundedAmountNet, kickbackAmount, originalCreditor);\\n        }\\n        emit ActivePaidInvoicesReconciled(paidInvoiceIds);\\n    }\\n\\n    /// @notice Calculates the tax amount based on a specified payment amount and the current tax basis points (bps).\\n    /// @param amount The amount of the payment on which tax is to be calculated.\\n    /// @return The calculated tax amount.\\n    function calculateTax(uint256 amount) internal view returns (uint256) {\\n        uint256 taxMbps = uint256(taxBps)* 1000;\\n        return Math.mulDiv(amount, taxMbps, 10_000_000);\\n    }\\n\\n    function removeImpairedByFundInvoice(uint256 invoiceId) private {\\n        for (uint256 i = 0; i < impairedByFundInvoicesIds.length; i++) {\\n            if (impairedByFundInvoicesIds[i] == invoiceId) {\\n                impairedByFundInvoicesIds[i] = impairedByFundInvoicesIds[impairedByFundInvoicesIds.length - 1];\\n                impairedByFundInvoicesIds.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    /// @notice Unfactors an invoice, returning the invoice NFT to the original creditor and refunding the funded amount\\n    /// @param invoiceId The ID of the invoice to unfactor\\n    function unfactorInvoice(uint256 invoiceId) external {\\n        if (isInvoicePaid(invoiceId)) revert InvoiceAlreadyPaid();\\n        address originalCreditor = originalCreditors[invoiceId];\\n        if (originalCreditor != msg.sender) revert CallerNotOriginalCreditor();\\n\\n        InvoiceApproval memory approval = approvedInvoices[invoiceId];\\n        // Calculate the funded amount for the invoice\\n        uint256 fundedAmount = approval.fundedAmountNet;\\n\\n        // Calculate the number of days since funding\\n         uint256 daysSinceFunded = (block.timestamp > approval.fundedTimestamp) ? Math.mulDiv(block.timestamp - approval.fundedTimestamp, 1, 1 days, Math.Rounding.Ceil) : 0;\\n        (uint256 trueInterest, uint256 trueProtocolFee, uint256 trueAdminFee) = calculateFees(approval, daysSinceFunded);\\n        int256 totalRefundOrPaymentAmount = int256(fundedAmount + trueInterest + trueProtocolFee + trueAdminFee) - int256(getPaymentsOnInvoiceSinceFunding(invoiceId));\\n\\n        // positive number means the original creditor owes us the amount\\n        if(totalRefundOrPaymentAmount > 0) {\\n            // Refund the funded amount to the fund from the original creditor\\n            assetAddress.safeTransferFrom(originalCreditor, address(this), uint256(totalRefundOrPaymentAmount));\\n        } else if (totalRefundOrPaymentAmount < 0) {\\n            // negative number means we owe them\\n            assetAddress.safeTransfer(originalCreditor, uint256(-totalRefundOrPaymentAmount));\\n        }\\n\\n        // Transfer the invoice NFT back to the original creditor\\n        address invoiceContractAddress = invoiceProviderAdapter.getInvoiceContractAddress();\\n        IERC721(invoiceContractAddress).transferFrom(address(this), originalCreditor, invoiceId);\\n\\n        // Update the contract's state to reflect the unfactoring\\n        removeActivePaidInvoice(invoiceId);\\n        incrementProfitTaxAndFeeBalances(invoiceId, trueInterest, trueProtocolFee, trueAdminFee);\\n\\n        delete originalCreditors[invoiceId];\\n\\n        emit InvoiceUnfactored(invoiceId, originalCreditor, totalRefundOrPaymentAmount, trueInterest);\\n    }\\n\\n    /// @notice Removes an invoice from the list of active invoices once it has been paid\\n    /// @param invoiceId The ID of the invoice to remove\\n    function removeActivePaidInvoice(uint256 invoiceId) private {\\n        for (uint256 i = 0; i < activeInvoices.length; i++) {\\n            if (activeInvoices[i] == invoiceId) {\\n                activeInvoices[i] = activeInvoices[activeInvoices.length - 1];\\n                activeInvoices.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function getPaymentsOnInvoiceSinceFunding(uint256 invoiceId) private view returns (uint256) {\\n        IInvoiceProviderAdapter.Invoice memory invoice = invoiceProviderAdapter.getInvoiceDetails(invoiceId);\\n\\n        // Need to subtract payments since funding start\\n        uint256 paymentSinceFunding = invoice.paidAmount - approvedInvoices[invoiceId].invoiceSnapshot.paidAmount;\\n\\n        return paymentSinceFunding;\\n    }\\n\\n    /// @notice Calculates the total funded amount for all active invoices.\\n    /// @return The total funded amount for all active invoices\\n    function deployedCapitalForActiveInvoicesExcludingImpaired() public view returns (uint256) {\\n        uint256 deployedCapital = 0;\\n        for (uint256 i = 0; i < activeInvoices.length; i++) {\\n            uint256 invoiceId = activeInvoices[i];\\n            uint256 deployedCapitalOfInvoice = (isInvoiceImpaired(invoiceId)) ? 0 : getFundedAmount(invoiceId);\\n            deployedCapital += deployedCapitalOfInvoice;\\n        }\\n        return deployedCapital;\\n    }\\n\\n    /// @notice Calculates all payments of active invoices since funding\\n    /// @return The sum of all payments of active invoices since funding\\n    function getAllIncomingPaymentsForActiveInvoices() private view returns (uint256) {\\n        uint256 incomingFunds = 0;\\n        for (uint256 i = 0; i < activeInvoices.length; i++) {\\n            uint256 invoiceId = activeInvoices[i];\\n            incomingFunds += getPaymentsOnInvoiceSinceFunding(invoiceId);\\n        }\\n        return incomingFunds;\\n    }\\n\\n    /// @notice Sums the target fees for all active invoices\\n    /// @return targetFees The total fees for all active invoices\\n    function sumTargetFeesForActiveInvoices() private view returns (uint256 targetFees) {\\n        targetFees = 0;\\n        for (uint256 i = 0; i < activeInvoices.length; i++) {\\n            uint256 invoiceId = activeInvoices[i];\\n            targetFees += approvedInvoices[invoiceId].fundedAmountGross - approvedInvoices[invoiceId].fundedAmountNet;\\n        }\\n        return targetFees;\\n    }\\n\\n    /// @notice Calculates the available assets in the fund net of fees, impair reserve and tax\\n    /// @return The amount of assets available for withdrawal or new investments, excluding funds allocated to active invoices\\n    function totalAssets() public view override returns (uint256) {\\n        return calculateCapitalAccount()\\n                - deployedCapitalForActiveInvoicesExcludingImpaired()\\n                - sumTargetFeesForActiveInvoices(); // withheld projected fees, accounted for in total assets but not available for profit distribution;\\n    }\\n\\n    /// @notice Calculates the maximum amount of shares that can be redeemed based on the total assets in the fund\\n    /// @return The maximum number of shares that can be redeemed\\n    function maxRedeem() public view returns (uint256) {\\n        uint256 _totalAssets = totalAssets();\\n        uint256 capitalAccount = calculateCapitalAccount();\\n\\n        if (capitalAccount == 0) {\\n            return 0;\\n        }\\n\\n        uint256 maxWithdrawableShares = convertToShares(_totalAssets);\\n        return maxWithdrawableShares;\\n    }\\n\\n    /// @notice Calculates the maximum amount of shares that can be redeemed based on the total assets in the fund\\n    /// @param _owner The owner of the shares being redeemed\\n    /// @return The maximum number of shares that can be redeemed\\n    function maxRedeem(address _owner) public view override returns (uint256) {\\n        return Math.min(super.maxRedeem(_owner), maxRedeem());\\n    }\\n\\n    /// @notice Calculates the maximum amount of assets that can be withdrawn\\n    /// @param _owner The owner of the assets to be withdrawn\\n    /// @return The maximum number of assets that can be withdrawn\\n    function maxWithdraw(address _owner) public view override returns (uint256) {\\n        return Math.min(super.maxWithdraw(_owner), totalAssets());\\n    }\\n\\n    /// @notice Helper function to handle the logic of withdrawing assets in exchange for fund shares\\n    /// @param receiver The address to receive the assets\\n    /// @param _owner The address who owns the shares to redeem\\n    /// @param assets The amount of assets to withdraw\\n    /// @return The number of shares redeemed\\n    function withdraw(uint256 assets, address receiver, address _owner) public override returns (uint256) {\\n        if (!depositPermissions.isAllowed(_msgSender())) revert UnauthorizedDeposit(_msgSender());\\n        if (!depositPermissions.isAllowed(_owner)) revert UnauthorizedDeposit(_owner);\\n \\n        uint256 shares = super.withdraw(assets, receiver, _owner);\\n\\n        totalWithdrawals += assets;\\n        return shares;\\n    }\\n\\n    /// @notice Helper function to handle the logic of redeeming shares in exchange for assets\\n    /// @param shares The number of shares to redeem\\n    /// @param receiver The address to receive the assets\\n    /// @param _owner The owner of the shares being redeemed\\n    /// @return The number of shares redeemed\\n    function redeem(uint256 shares, address receiver, address _owner) public override returns (uint256) {\\n        if (!depositPermissions.isAllowed(_msgSender())) revert UnauthorizedDeposit(_msgSender());\\n        if (!depositPermissions.isAllowed(_owner)) revert UnauthorizedDeposit(_owner);\\n        \\n        uint256 assets = super.redeem(shares, receiver, _owner);\\n\\n        totalWithdrawals += assets;\\n\\n        return assets;\\n    }\\n\\n    /// @notice Redeems shares for underlying assets with an attachment, transferring the assets to the specified receiver\\n    /// @param shares The number of shares to redeem\\n    /// @param receiver The address to receive the redeemed assets\\n    /// @param _owner The owner of the shares being redeemed\\n    /// @param attachment The attachment data for the redemption\\n    /// @return The amount of assets redeemed\\n    function redeemWithAttachment(uint256 shares, address receiver, address _owner, Multihash calldata attachment) external returns (uint256) {\\n        uint256 assets = redeem(shares, receiver, _owner);\\n        emit SharesRedeemedWithAttachment(_msgSender(), shares, assets, attachment);\\n        return assets;\\n    }\\n\\n    /// @notice Sets the grace period in days for determining if an invoice is impaired\\n    /// @param _days The number of days for the grace period\\n    /// @dev This function can only be called by the contract owner\\n    function setGracePeriodDays(uint256 _days) public onlyOwner {\\n        gracePeriodDays = _days;\\n        emit GracePeriodDaysChanged(_days);\\n    }\\n\\n    /// @notice Sets the duration for which invoice approvals are valid\\n    /// @param _duration The new duration in seconds\\n    /// @dev This function can only be called by the contract owner\\n    function setApprovalDuration(uint256 _duration) public onlyOwner {\\n        approvalDuration = _duration;\\n        emit ApprovalDurationChanged(_duration);\\n    }\\n\\n    /// @notice Sets a new underwriter for the contract\\n    /// @param _newUnderwriter The address of the new underwriter\\n    function setUnderwriter(address _newUnderwriter) public onlyOwner {\\n        if (_newUnderwriter == address(0)) revert InvalidAddress();\\n        address oldUnderwriter = underwriter;\\n        underwriter = _newUnderwriter;\\n        emit UnderwriterChanged(oldUnderwriter, _newUnderwriter);\\n    }\\n\\n    /// @notice Allows the Bulla DAO to withdraw accumulated protocol fees.\\n    function withdrawProtocolFees() external {\\n        if (msg.sender != bullaDao) revert CallerNotBullaDao();\\n        uint256 feeAmount = protocolFeeBalance;\\n        if (feeAmount == 0) revert NoFeesToWithdraw();\\n        protocolFeeBalance = 0;\\n        assetAddress.safeTransfer(bullaDao, feeAmount);\\n        emit ProtocolFeesWithdrawn(bullaDao, feeAmount);\\n    }\\n\\n    /// @notice Allows the Pool Owner to withdraw accumulated admin fees.\\n    function withdrawAdminFees() onlyOwner public {\\n        uint256 feeAmount = adminFeeBalance;\\n        if (feeAmount == 0) revert NoFeesToWithdraw();\\n        adminFeeBalance = 0;\\n        assetAddress.safeTransfer(msg.sender, feeAmount);\\n        emit AdminFeesWithdrawn(msg.sender, feeAmount);\\n    }\\n\\n    /// @notice Withdraws the accumulated tax balance to the pool owner\\n    /// @dev This function can only be called by the contract owner\\n    function withdrawTaxBalance() public onlyOwner {\\n        if (taxBalance == 0) revert NoTaxBalanceToWithdraw();\\n        uint256 amountToWithdraw = taxBalance;\\n        taxBalance = 0;\\n        assetAddress.safeTransfer(msg.sender, amountToWithdraw);\\n        emit TaxBalanceWithdrawn(msg.sender, amountToWithdraw);\\n    }\\n\\n    /// @notice Updates the Bulla DAO address\\n    /// @param _newBullaDao The new address for the Bulla DAO\\n    function setBullaDaoAddress(address _newBullaDao) public onlyOwner {\\n        if (_newBullaDao == address(0)) revert InvalidAddress();\\n        bullaDao = _newBullaDao;\\n        emit BullaDaoAddressChanged(bullaDao, _newBullaDao);\\n    }\\n\\n    /// @notice Updates the protocol fee in basis points (bps)\\n    /// @param _newProtocolFeeBps The new protocol fee in basis points\\n    function setProtocolFeeBps(uint16 _newProtocolFeeBps) public onlyOwner {\\n        if (_newProtocolFeeBps > 10000) revert InvalidPercentage();\\n        protocolFeeBps = _newProtocolFeeBps;\\n        emit ProtocolFeeBpsChanged(protocolFeeBps, _newProtocolFeeBps);\\n    }\\n\\n    /// @notice Sets the admin fee in basis points\\n    /// @param _newAdminFeeBps The new admin fee in basis points\\n    function setAdminFeeBps(uint16 _newAdminFeeBps) public onlyOwner {\\n        if (_newAdminFeeBps > 10000) revert InvalidPercentage();\\n        adminFeeBps = _newAdminFeeBps;\\n        emit AdminFeeBpsChanged(adminFeeBps, _newAdminFeeBps);\\n    }\\n\\n    /// @notice Sets the tax basis points (bps)\\n    /// @param _newTaxBps The new tax rate in basis points\\n    /// @dev This function can only be called by the contract owner\\n    function setTaxBps(uint16 _newTaxBps) public onlyOwner {\\n        if (_newTaxBps > 10000) revert InvalidPercentage();\\n        taxBps = _newTaxBps;\\n        emit TaxBpsChanged(taxBps, _newTaxBps);\\n    }\\n\\n    function mint(uint256, address) public pure override returns (uint256){\\n        revert FunctionNotSupported();\\n    }\\n\\n    /// @notice Updates the deposit permissions contract\\n    /// @param _newDepositPermissionsAddress The new deposit permissions contract address\\n    function setDepositPermissions(address _newDepositPermissionsAddress) public onlyOwner {\\n        depositPermissions = Permissions(_newDepositPermissionsAddress);\\n        emit DepositPermissionsChanged(_newDepositPermissionsAddress);\\n    }\\n\\n    /// @notice Updates the factoring permissions contract\\n    /// @param _newFactoringPermissionsAddress The address of the new factoring permissions contract\\n    function setFactoringPermissions(address _newFactoringPermissionsAddress) public onlyOwner {\\n        factoringPermissions = Permissions(_newFactoringPermissionsAddress);\\n        emit FactoringPermissionsChanged(_newFactoringPermissionsAddress);\\n    }\\n\\n    /// @notice Sets the impair reserve amount\\n    /// @param _impairReserve The new impair reserve amount\\n    function setImpairReserve(uint256 _impairReserve) public onlyOwner {\\n        if (_impairReserve < impairReserve) revert ImpairReserveMustBeGreater();\\n        uint256 amountToAdd = _impairReserve - impairReserve;\\n        assetAddress.safeTransferFrom(msg.sender, address(this), amountToAdd);\\n        impairReserve = _impairReserve;\\n        emit ImpairReserveChanged(_impairReserve);\\n    }\\n\\n    /// @notice Sets the target yield in basis points\\n    /// @param _targetYieldBps The new target yield in basis points\\n    function setTargetYield(uint16 _targetYieldBps) public onlyOwner {\\n        if (_targetYieldBps > 10000) revert InvalidPercentage();\\n        targetYieldBps = _targetYieldBps;\\n        emit TargetYieldChanged(_targetYieldBps);\\n    }\\n\\n    /// @notice Retrieves the fund information\\n    /// @return FundInfo The fund information\\n    function getFundInfo() external view returns (FundInfo memory) {\\n        uint256 fundBalance = totalAssets();\\n        uint256 deployedCapital = deployedCapitalForActiveInvoicesExcludingImpaired();\\n        uint256 capitalAccount = calculateCapitalAccount();\\n        uint256 price = pricePerShare();\\n        uint256 tokensAvailableForRedemption = maxRedeem();\\n\\n        return FundInfo({\\n            name: poolName,\\n            creationTimestamp: creationTimestamp,\\n            fundBalance: fundBalance,\\n            deployedCapital: deployedCapital,\\n            capitalAccount: capitalAccount,\\n            price: price,\\n            tokensAvailableForRedemption: tokensAvailableForRedemption,\\n            adminFeeBps: adminFeeBps,\\n            impairReserve: impairReserve,\\n            targetYieldBps: targetYieldBps\\n        });\\n    }\\n\\n    /// @notice Impairs an invoice, using the impairment reserve to cover the loss\\n    /// @param invoiceId The ID of the invoice to impair\\n    function impairInvoice(uint256 invoiceId) public onlyOwner {\\n        if (impairReserve == 0) revert ImpairReserveNotSet();\\n        if (!isInvoiceImpaired(invoiceId)) revert InvoiceNotImpaired();\\n\\n        if (impairments[invoiceId].isImpaired) {\\n            revert InvoiceAlreadyImpairedByFund();\\n        }\\n\\n        uint256 fundedAmount = approvedInvoices[invoiceId].fundedAmountNet;\\n        uint256 impairAmount = impairReserve / 2;\\n        impairReserve -= impairAmount; // incidentially adds impairAmount to fund balance as seen in availableAssets\\n\\n        // deduct from capital at risk\\n        removeActivePaidInvoice(invoiceId);\\n\\n        // add to impairedByFundInvoicesIds\\n        impairedByFundInvoicesIds.push(invoiceId);\\n\\n        // Record impairment details\\n        impairments[invoiceId] = ImpairmentDetails({\\n            gainAmount: impairAmount,\\n            lossAmount: fundedAmount,\\n            isImpaired: true\\n        });\\n\\n        emit InvoiceImpaired(invoiceId, fundedAmount, impairAmount);\\n    }\\n}\",\"keccak256\":\"0x744ce6f88e34d69733e3aa42b30ea98ea4b89b7dc3c727140f946c0a7bd237ed\",\"license\":\"BUSL-1.1\"},\"contracts/Permissions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nabstract contract Permissions {\\n    event AccessGranted(address indexed _account);\\n    event AccessRevoked(address indexed _account);\\n\\n    function isAllowed(address _address) virtual external view returns (bool);\\n}\",\"keccak256\":\"0x8bdcc615d9e779530079fd83978ffa0b420dc5b1ed2d0c0f4e9e28b94fc72139\",\"license\":\"MIT\"},\"contracts/interfaces/IBullaFactoring.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC4626.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"./IInvoiceProviderAdapter.sol\\\";\\n\\n/// @notice Interface for the Bulla Factoring contract\\ninterface IBullaFactoring {\\n    // Structs\\n    struct InvoiceApproval {\\n        bool approved;\\n        IInvoiceProviderAdapter.Invoice invoiceSnapshot;\\n        uint256 validUntil;\\n        uint256 fundedTimestamp;\\n        uint16 interestApr;\\n        uint16 upfrontBps;\\n        uint256 fundedAmountGross;\\n        uint256 fundedAmountNet;\\n        uint16 minDaysInterestApplied;\\n        uint256 trueFaceValue;\\n        uint16 protocolFeeBps;\\n        uint16 adminFeeBps;\\n    }\\n\\n    struct Multihash {\\n        bytes32 hash;\\n        uint8 hashFunction;\\n        uint8 size;\\n    }\\n\\n    struct FundInfo {\\n        string name;\\n        uint256 creationTimestamp;\\n        uint256 fundBalance;\\n        uint256 deployedCapital;\\n        uint256 capitalAccount;\\n        uint256 price;\\n        uint256 tokensAvailableForRedemption;\\n        uint16 adminFeeBps;\\n        uint256 impairReserve;\\n        uint256 targetYieldBps;\\n    }\\n\\n    struct ImpairmentDetails {\\n        uint256 gainAmount;\\n        uint256 lossAmount;\\n        bool isImpaired;\\n    }\\n\\n    // Events\\n    event InvoiceApproved(uint256 indexed invoiceId, uint16 interestApr, uint16 upfrontBps, uint256 validUntil, uint16 minDays);\\n    event InvoiceFunded(uint256 indexed invoiceId, uint256 fundedAmount, address indexed originalCreditor);\\n    event ActivePaidInvoicesReconciled(uint256[] paidInvoiceIds);\\n    event GracePeriodDaysChanged(uint256 newGracePeriodDays);\\n    event ApprovalDurationChanged(uint256 newDuration);\\n    event UnderwriterChanged(address indexed oldUnderwriter, address indexed newUnderwriter);\\n    event InvoiceKickbackAmountSent(uint256 indexed invoiceId, uint256 kickbackAmount, address indexed originalCreditor);\\n    event InvoicePaid(uint256 indexed invoiceId, uint256 trueInterest, uint256 trueProtocolFee, uint256 adminFee, uint256 fundedAmountNet, uint256 kickbackAmount, address indexed originalCreditor);\\n    event InvoiceUnfactored(uint256 indexed invoiceId, address originalCreditor, int256 totalRefundOrPaymentAmount, uint interestToCharge);\\n    event DepositMadeWithAttachment(address indexed depositor, uint256 assets, uint256 shares, Multihash attachment);\\n    event SharesRedeemedWithAttachment(address indexed redeemer, uint256 shares, uint256 assets, Multihash attachment);\\n    event BullaDaoAddressChanged(address indexed oldAddress, address indexed newAddress);\\n    event ProtocolFeeBpsChanged(uint16 oldProtocolFeeBps, uint16 newProtocolFeeBps);\\n    event ProtocolFeesWithdrawn(address indexed bullaDao, uint256 amount);\\n    event AdminFeeBpsChanged(uint16 indexed oldFeeBps, uint16 indexed newFeeBps);\\n    event AdminFeesWithdrawn(address indexed bullaDao, uint256 amount);\\n    event DepositPermissionsChanged(address newAddress);\\n    event FactoringPermissionsChanged(address newAddress);\\n    event InvoiceImpaired(uint256 indexed invoiceId, uint256 lossAmount, uint256 gainAmount);\\n    event TaxBalanceWithdrawn(address indexed receiver, uint256 amount);\\n    event TaxBpsChanged(uint16 indexed oldTaxBps, uint256 indexed newTaxBps);\\n    event ImpairReserveChanged(uint256 newImpairReserve);\\n    event TargetYieldChanged(uint16 newTargetYield);\\n\\n    // Functions\\n    function approveInvoice(uint256 invoiceId, uint16 _apr, uint16 _bps, uint16 minDaysInterestApplied) external;\\n    function pricePerShare() external view returns (uint256);\\n    function fundInvoice(uint256 invoiceId, uint16 factorerUpfrontBps) external returns (uint256);\\n    function viewPoolStatus() external view returns (uint256[] memory paidInvoices, uint256[] memory impairedInvoices);\\n    function reconcileActivePaidInvoices() external;\\n    function setGracePeriodDays(uint256 _days) external;\\n    function setApprovalDuration(uint256 _duration) external;\\n}\",\"keccak256\":\"0x1a88c395537717b62de79e8fe2d63eb721c40f4d42ddc01ba49db6bc40de85d1\",\"license\":\"MIT\"},\"contracts/interfaces/IInvoiceProviderAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.20;\\n\\n/// @notice Interface for the invoice provider adapter contract\\ninterface IInvoiceProviderAdapter {\\n\\n    struct Invoice {\\n        uint256 faceValue;\\n        address creditor;\\n        address debtor;\\n        uint256 dueDate;\\n        address tokenAddress;\\n        uint256 paidAmount;\\n        bool isCanceled;\\n    }\\n\\n    function getInvoiceDetails(uint256 invoiceId) external view returns (Invoice memory);\\n    function getInvoiceContractAddress() external view returns (address);\\n}\",\"keccak256\":\"0x4608b6a361f38617c411be0737fd013fef71e014738e80b5f071cc70a0f57d05\",\"license\":\"BUSL-1.1\"},\"lib/forge-std/src/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n    function _sendLogPayload(bytes memory payload) private view {\\n        uint256 payloadLength = payload.length;\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let payloadStart := add(payload, 32)\\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n        }\\n    }\\n\\n    function log() internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n    }\\n\\n    function logUint(uint p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\",\"keccak256\":\"0x91d5413c2434ca58fd278b6e1e79fd98d10c83931cc2596a6038eee4daeb34ba\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361015610011575f80fd5b5f3560e01c806301e1d1141461054a5780630419b45a1461054557806306fdde031461054057806307a2d13a146104dc57806308bb5f7b1461053b578063095ea7b3146105365780630a22d68c146105315780630a28a4771461052c5780630ce6b419146105275780631348ed5e14610522578063173693241461051d57806318160ddd146105185780631ba46cfd146105135780631be4c4d41461050e5780631d6bdb5b1461050957806323b872dd146105045780632d896b2a146104ff5780632f3183e7146104fa578063313ce567146104f557806335659fb8146104f057806338d52e0f146104eb5780633eacd2f8146104e6578063402d267d1461041957806344fcb5cc146104e15780634cdad506146104dc5780635056d475146104d757806356984d9f146104d2578063591e1788146104cd5780635e20bfc8146104c85780636e553f65146104c35780636f31ab34146104be578063706a3f7d146104b957806370a08231146104b4578063715018a6146104af57806372c5c144146104aa57806375797cef146104a557806376138f55146104a05780637fbc96221461049b578063800120fa1461049657806383de3aed146104915780638795cccb1461048c5780638da5cb5b146104875780638e73836c1461048257806394bf804d1461047d578063951e4bee1461047857806395d89b4114610473578063987699261461046e5780639948ff451461046957806399530b0614610464578063a31cd6b91461045f578063a36e9fe71461045a578063a3d1612c14610455578063a85f571414610450578063a9059cbb1461044b578063aa98e16314610446578063ac27a24f14610441578063b33110861461043c578063b3d7f6b914610437578063b460af9414610432578063b73afe8c1461042d578063ba08765214610428578063be37b12c14610423578063c42f18f51461041e578063c63d75b614610419578063c6e6f59214610414578063ce96cb771461040f578063cec5a5581461040a578063cf0160f914610405578063d0f5a9bc14610400578063d905777e146103fb578063dc2dc8ff146103f6578063dd0a12bc146103f1578063dd62ed3e146103ec578063e300a0f4146103e7578063e6f0681c146103e2578063e72f0f05146103dd578063e9ff17ef146103d8578063ec233684146103d3578063ef8b30f7146103ce578063efe0707b146103c9578063f00db260146103c4578063f2fde38b146103bf578063f3466dfa146103ba5763fa1fc2e9146103b5575f80fd5b612d8d565b612d5e565b612be0565b612bb8565b612b4b565b612b2d565b612a5d565b6129a9565b61298c565b612968565b61292b565b612827565b612806565b61258f565b612562565b612500565b612490565b612444565b61240e565b6123f0565b610d6c565b61239f565b612319565b612300565b612298565b612162565b61211b565b6120fe565b612075565b612058565b61202e565b612006565b611fd4565b611f46565b611a39565b611a0f565b6119e7565b6119cd565b61190c565b6118e2565b6118b4565b61189a565b611872565b6117b3565b611799565b611729565b611701565b61151d565b6114f3565b6114d9565b61147c565b611440565b6113fa565b6113e0565b6113b6565b611399565b611363565b611320565b610e66565b61075c565b610d93565b610d4b565b610d07565b610ce3565b610cbe565b610c1c565b610bff565b610bb4565b610b33565b6109ef565b6109c7565b6109aa565b610982565b610965565b610919565b6108fb565b6108de565b610815565b61078b565b610655565b61057f565b61055d565b5f91031261055957565b5f80fd5b34610559575f366003190112610559576020610577614611565b604051908152f35b34610559575f8060031936011261060057610598612e3d565b60085480156105ee5760088290556009546105bf90829033906001600160a01b0316614023565b6040519081527fcdcaff67ac16639664e5f9343c9223a1dc9c972ec367b69ae9fc1325c7be547460203392a280f35b604051630d00db4d60e31b8152600490fd5b80fd5b91908251928382525f5b84811061062d575050825f602080949584010152601f8019910116010190565b60208183018101518483018201520161060d565b906020610652928181520190610603565b90565b34610559575f806003193601126106005760405190806003549060019180831c92808216928315610752575b602092838610851461073e57858852602088019490811561071d57506001146106c5575b6106c1876106b581890382611d93565b60405191829182610641565b0390f35b60035f5294509192917fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b83861061070c57505050910190506106b5826106c15f806106a5565b8054858701529482019481016106f0565b60ff191685525050505090151560051b0190506106b5826106c15f806106a5565b634e487b7160e01b82526022600452602482fd5b93607f1693610681565b34610559576020366003190112610559576020610577600435613abf565b6001600160a01b0381160361055957565b34610559576020366003190112610559576004356107a88161077a565b6107b0612e3d565b6001600160a01b0390811690811561080357600d54826bffffffffffffffffffffffff60a01b821617600d55167fae536502f25a82de70abed467008489d54fa0cbf58cdc51718efe6d49406724f5f80a3005b60405163e6c4247b60e01b8152600490fd5b34610559576040366003190112610559576004356108328161077a565b60243533156108c6576001600160a01b0382169182156108ae57335f9081526001602052604090208291610876915b9060018060a01b03165f5260205260405f2090565b556040519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560203392a3602060405160018152f35b604051634a1406b160e11b81525f6004820152602490fd5b60405163e602df0560e01b81525f6004820152602490fd5b34610559575f366003190112610559576020600754604051908152f35b34610559576020366003190112610559576020610577600435613a83565b34610559576020366003190112610559577fe595c99430465234d1ec90ffa3458590c544d5349139442d6911452a7b8e82fa6020600435610958612e3d565b80601455604051908152a1005b34610559575f366003190112610559576020601454604051908152f35b34610559575f366003190112610559576015546040516001600160a01b039091168152602090f35b34610559575f366003190112610559576020600254604051908152f35b34610559575f366003190112610559576009546040516001600160a01b039091168152602090f35b3461055957602036600319011261055957600435610a0b612e3d565b600f548015610b2157610a24610a2083614222565b1590565b610b0f57610a476002610a3f845f52601e60205260405f2090565b015460ff1690565b610afd577ff95dd13343beabbe284b7f97d54b2d4fda5841bab502d60164e8ede601fbe3ac90600c610a81845f52601960205260405f2090565b0154610a99610a948360011c8094613165565b600f55565b610aa28461447d565b610aab84613fa8565b610ae3610ab6611db5565b838152826020820152610acc6040820160019052565b610ade865f52601e60205260405f2090565b614a1a565b60408051918252602082019290925290819081015b0390a2005b604051633235e0c760e21b8152600490fd5b604051632d9bb54f60e11b8152600490fd5b6040516357154c3f60e01b8152600490fd5b34610559575f8060031936011261060057610b4c612e3d565b6012548015610ba2576012829055600954610b7390829033906001600160a01b0316614023565b6040519081527fc1d14d5488f3efbb6db97da278fa305488c34be0b9fb57e21dd6140359c323c160203392a280f35b6040516384bdc80f60e01b8152600490fd5b3461055957606036600319011261055957610bf4600435610bd48161077a565b602435610be08161077a565b60443591610bef833383612fb0565b612e69565b602060405160018152f35b34610559575f366003190112610559576020600854604051908152f35b346105595760a036600319011261055957602435600435610c3c8261077a565b606036604319011261055957610c5460209282613bb5565b906040519081528183820152604435604082015260ff606435610c768161305b565b16606082015260ff608435610c8a8161305b565b1660808201527f393f5b2cbcf0aa47eaec63eb01049e213dc0a29e5bf9b323471be5f5125fc50c60a03392a2604051908152f35b34610559575f366003190112610559576020610cd8613071565b60ff60405191168152f35b34610559575f36600319011261055957602061ffff60065460a01c16604051908152f35b34610559575f366003190112610559576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b34610559575f36600319011261055957602061ffff60115416604051908152f35b3461055957602036600319011261055957610d8860043561077a565b60206040515f198152f35b3461055957602036600319011261055957600435610daf612e3d565b600f54808210610e10578103818111610e0b577f96ef0ad874bac1a0f28dd6bb42d3cd79816d65910307ac7d95d97bb464cbb94a91610dfe60209260018060a01b036009541630903390613d0f565b80600f55604051908152a1005b612f7f565b604051631506ed4b60e01b8152600490fd5b6024359061ffff8216820361055957565b6044359061ffff8216820361055957565b6064359061ffff8216820361055957565b6004359061ffff8216820361055957565b346105595760408060031936011261055957600490813590610e86610e22565b601654909290610ea6906001600160a01b03165b6001600160a01b031690565b825163babcc53960e01b815233868201908152602092839183919082908190850103915afa9081156111d9575f916112c0575b50156112a457610efe610a20610ef7845f52601960205260405f2090565b5460ff1690565b61129457610f2f610f28600a610f1c855f52601960205260405f2090565b015460101c61ffff1690565b61ffff1690565b61ffff851690811190811561128b575b5061127b576008610f58835f52601960205260405f2090565b0154421161126b57600a54610f75906001600160a01b0316610e9a565b9060e08451809363484d384560e11b82528180610f99888c83019190602083019252565b03915afa9182156111d9575f9261123b575b5060c082015161122b576006610fc9845f52601960205260405f2090565b015460a08301510361121b57611010610e9a826110016002610ff3885f52601960205260405f2090565b01546001600160a01b031690565b9401516001600160a01b031690565b6001600160a01b039283160361120b576110a661102d8685613e74565b999392505050600b611047875f52601960205260405f2090565b015586600c61105e875f52601960205260405f2090565b0155426009611075875f52601960205260405f2090565b0155600a61108b865f52601960205260405f2090565b019063ffff000082549160101b169063ffff00001916179055565b6009546110bf90869033906001600160a01b0316614023565b600a54869082906110d8906001600160a01b0316610e9a565b8651631e328b4160e11b815292839182905afa9182156111d9575f926111de575b505016803b156105595782516323b872dd60e01b81523395810195865230602087015260408601839052945f91869182908490829060600103925af19384156111d9576106c1946111c0575b5061117b3361115c835f52601860205260405f2090565b80546001600160a01b0319166001600160a01b03909216919091179055565b61118481613fef565b81518381523391907f97d46c18045986c4f6dbf2482a3034fe9652263d6b07817879304ef25f5d86da90602090a3519081529081906020820190565b806111cd6111d392611d5e565b8061054f565b5f611145565b613066565b6111fd9250803d10611204575b6111f58183611d93565b810190613172565b5f806110f9565b503d6111eb565b835163f18c77f960e01b81528690fd5b835163971ccc7760e01b81528690fd5b8351637ccc2bd960e11b81528690fd5b61125d91925060e03d8111611264575b6112558183611d93565b8101906130e9565b905f610fab565b503d61124b565b8251634aad99a560e11b81528590fd5b8251631f3b85d360e01b81528590fd5b9050155f610f3f565b825163649ac74160e11b81528590fd5b8251637190a79560e11b81523381870190815281906020010390fd5b6112e09150823d84116112e6575b6112d88183611d93565b810190613ba1565b5f610ed9565b503d6112ce565b9081518082526020808093019301915f5b82811061130c575050505090565b8351855293810193928101926001016112fe565b34610559575f366003190112610559576113556106c161133e6140d1565b6040929192519384936040855260408501906112ed565b9083820360208501526112ed565b346105595760203660031901126105595760806113816004356133ec565b91604051938452602084015260408301526060820152f35b34610559575f366003190112610559576020601a54604051908152f35b346105595760403660031901126105595760206105776024356113d88161077a565b600435613bb5565b34610559575f36600319011261055957602061057761468f565b34610559576020366003190112610559576004355f52601e602052606060405f2080549060ff600260018301549201541690604051928352602083015215156040820152f35b346105595760203660031901126105595760206105776004356114628161077a565b6001600160a01b03165f9081526020819052604090205490565b34610559575f8060031936011261060057611495612e3d565b600580546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b34610559575f36600319011261055957602061057761393c565b34610559576020366003190112610559576004355f52601f602052602060405f2054604051908152f35b34610559575f80600319360112610600576115366140d1565b50815b81518110156116c9578061165761155361165f93856140bd565b517f2bc6d87cf553310ee13e0d3270f4a621bb33785b64765662507746e56734142c61157e826133ec565b9195909261158e838589896142b7565b6115b06115a3875f52601860205260405f2090565b546001600160a01b031690565b9281611672575b6115ce6002610a3f895f52601e60205260405f2090565b15611664576115dc8761437f565b6116026115f1885f52601e60205260405f2090565b60025f918281558260018201550155565b60e061161e611619895f52601960205260405f2090565b613327565b015160408051998a5260208a019690965294880152606087019390935260808601929092526001600160a01b03169390819060a0820190565b0390a36138fb565b611539565b61166d8761447d565b611602565b60095461168b90839086906001600160a01b0316614023565b6040518281526001600160a01b0385169088907ff0552a3665368b7e77abbd2bbfe72b2615793841acfd3da5b7df5f330cc00eae90602090a36115b7565b506116fb7f71c060a755cff9c84db9f4be3b4fac0b83f3ffe4e7ff3ebc0be0420d28fb1de091604051918291826142a6565b0390a180f35b34610559575f36600319011261055957600a546040516001600160a01b039091168152602090f35b34610559576020366003190112610559577fbc05deec4ecd4d9295d36f7434b1feee89ac308d4040e0133f06bff4635cf70a60206004356117698161077a565b611771612e3d565b601680546001600160a01b0319166001600160a01b03929092169182179055604051908152a1005b34610559575f3660031901126105595760206105776145a2565b34610559575f366003190112610559576006546117d8906001600160a01b0316610e9a565b33036118605760075480156105ee576117f05f600755565b6009546118149082906001600160a01b03166006546001600160a01b031690614023565b6006547fa087657e3d85162090ffd700fbfdf5070d816f63aa5da00063f6ffd369c8a6db90610af89061184f906001600160a01b0316610e9a565b604051938452929081906020820190565b6040516307c68f0f60e11b8152600490fd5b34610559575f366003190112610559576005546040516001600160a01b039091168152602090f35b34610559575f366003190112610559576020610577613a46565b34610559576040366003190112610559576118d060243561077a565b6040516369bd111d60e11b8152600490fd5b34610559576020366003190112610559576004355f526017602052602060405f2054604051908152f35b34610559575f806003193601126106005760405190806004549060019180831c928082169283156119c3575b602092838610851461073e57858852602088019490811561071d575060011461196b576106c1876106b581890382611d93565b60045f5294509192917f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8386106119b257505050910190506106b5826106c15f806106a5565b805485870152948201948101611996565b93607f1693611938565b34610559575f366003190112610559576020610577613af5565b34610559575f366003190112610559576006546040516001600160a01b039091168152602090f35b34610559575f366003190112610559576020610577611a34611a2f613071565b613a72565b613abf565b346105595760803660031901126105595760048035611a56610e22565b611a5e610e33565b90611a67610e44565b9361ffff908184168015908115611d3e575b50611d2f57600d54611a93906001600160a01b0316610e9a565b3303611d2057611aa5601a5442612fa3565b600a54909290611abd906001600160a01b0316610e9a565b9060409283519063484d384560e11b825260e08280611ae38c8583019190602083019252565b0381875afa9182156111d9575f92611d00575b50815190611b0a60a0840192835190613165565b15611cf25785518095631e328b4160e11b8252818360209889935afa9081156111d9575f91611cd5575b5086516331a9108f60e11b81528281018c81526001600160a01b0392889183919082900360200190829086165afa9081156111d9575f91611cb8575b5081163014611ca95760808401516001600160a01b0316600954909190611ba190610e9a906001600160a01b031681565b911603611c9b575092611c5d7f582952bb580f603774d9c537b553a9262ca26cd579550a2812bc91a3fec3198d999a959383611be8610af89997611c749651905190613165565b60065491611bf4611dd5565b60018152958601528685018890525f606086015261ffff8b16608086015261ffff8c1660a08601525f60c0860181905260e086015261ffff891661010086015261012085015261ffff60a082901c83161661014085015260b01c1661016083019061ffff169052565b611c6f8a5f52601960205260405f2090565b613211565b5161ffff948516815294841660208601526040850152909116606083015281906080820190565b85516322b96ac960e01b8152fd5b508551639c20501360e01b8152fd5b611ccf9150873d8911611204576111f58183611d93565b5f611b70565b611cec9150863d8811611204576111f58183611d93565b5f611b34565b855163c627ace960e01b8152fd5b611d1991925060e03d8111611264576112558183611d93565b905f611af6565b604051632e83528960e01b8152fd5b604051631f3b85d360e01b8152fd5b6127109150115f611a79565b634e487b7160e01b5f52604160045260245ffd5b67ffffffffffffffff8111611d7257604052565b611d4a565b60e0810190811067ffffffffffffffff821117611d7257604052565b90601f8019910116810190811067ffffffffffffffff821117611d7257604052565b604051906060820182811067ffffffffffffffff821117611d7257604052565b60405190610180820182811067ffffffffffffffff821117611d7257604052565b60405190610140820182811067ffffffffffffffff821117611d7257604052565b90611e7d604051611e2781611d77565b8354815260018401546001600160a01b039081166020830152600285015481166040830152600385015460608301526004850154166080820152600584015460a082015260069093015460ff16151560c0840152565b565b99979593919c9b9a98969492909c6102408b019d15158b52805160208c0152600160a01b600190038060208301511660408d01528060408301511660608d0152606082015160808d015260808201511660a08c015260a081015160c08c015260c00151151560e08b01526101008a01526101208901526101408801611f069161ffff169052565b61ffff166101608701526101808601526101a085015261ffff166101c08401526101e083015261ffff1661020082015261022001611e7d9161ffff169052565b34610559576020366003190112610559576004355f52601960205260405f2060ff8154166106c1611f7960018401611e17565b91600884015492600985015494600a810154600b820154600c83015490611fa5600d85015461ffff1690565b92600f600e860154950154966040519a8b9a61ffff9889808c60101c169b1699808660101c169516938d611e7f565b34610559576020366003190112610559576004355f526018602052602060018060a01b0360405f205416604051908152f35b34610559575f366003190112610559576016546040516001600160a01b039091168152602090f35b3461055957604036600319011261055957610bf460043561204e8161077a565b6024359033612e69565b34610559575f366003190112610559576020601254604051908152f35b346105595760203660031901126105595761208e610e55565b612096612e3d565b61ffff8082169161271083116120ec576006805461ffff60b01b191660b092831b61ffff60b01b161790819055901c167fcc9b1d1e60d76e8755bd2ceaeb3d3ccfe5e5bb556097b7ce618b0a60480ef3e15f80a3005b604051631f3b85d360e01b8152600490fd5b34610559575f366003190112610559576020600e54604051908152f35b34610559576020366003190112610559576020610577600435613ada565b606090600319011261055957600435906024356121558161077a565b906044356106528161077a565b346105595761217036612139565b60155490929190612189906001600160a01b0316610e9a565b60405163babcc53960e01b808252336004830152602092918381602481865afa9081156111d9575f9161227b575b5015612263576040519081526001600160a01b0386166004820152908290829060249082905afa9182156111d9575f92612246575b505015612225576122106122076106c19461221593856146b2565b92600c54612fa3565b600c55565b6040519081529081906020820190565b604051635ebb5e2160e11b81526001600160a01b0384166004820152602490fd5b61225c9250803d106112e6576112d88183611d93565b5f806121ec565b604051635ebb5e2160e11b8152336004820152602490fd5b6122929150843d86116112e6576112d88183611d93565b5f6121b7565b346105595760203660031901126105595761ffff6122b4610e55565b6122bc612e3d565b1661271081116120ec576020817f70804697a7389a86ccbf4594ad23c117ecf0a1ffb94ae9516dc15f85ac7c29c89261ffff196013541617601355604051908152a1005b3461055957602061057761231336612139565b9161487c565b3461055957602036600319011261055957612332610e55565b61233a612e3d565b61ffff908181169161271083116120ec577f2ea630a8e6f6f7590aa81eb8993a1c4a49a0913effd00467ddd761d45867a3ee926040926006549061ffff60a01b9060a01b169061ffff60a01b191617918260065583519260a01c1682526020820152a1005b34610559576040366003190112610559576106c16123c66123be610e22565b600435613e74565b604080519586526020860194909452928401919091526060830152608082015290819060a0820190565b34610559576020366003190112610559576020610577600435613aa3565b34610559576020366003190112610559576020610577612436611a346004356114628161077a565b61243e614611565b906138ee565b34610559576020366003190112610559577f6afefcb7619ccdb73c8fdd4304d507509f1d2327b6f29ff2b9c77a1fa760687d6020600435612483612e3d565b80601a55604051908152a1005b34610559576020366003190112610559577ff6a412f75fe107fb805f9acb0408b3ac23ff1d0381fc83f6ef4352a8c9727f8960206004356124d08161077a565b6124d8612e3d565b601580546001600160a01b0319166001600160a01b03929092169182179055604051908152a1005b346105595760203660031901126105595761ffff61251c610e55565b612524612e3d565b1661271081116120ec578061ffff196011541617601155807fe1a4ea7f5e6e02cfb3b314fa7050128838a1dd7cca9e85e07ffef5aa4568150a5f80a3005b346105595760203660031901126105595760206105776125876004356114628161077a565b61243e61468f565b34610559576020366003190112610559576004356125ac816141bd565b6127f4576125c56115a3825f52601860205260405f2090565b6001600160a01b0333828216036127e257612636916126366125f2611619865f52601960205260405f2090565b61264a61263b61262960e08401519360608101515f8142115f146127da575061261e6126239142613165565b61357e565b9061380b565b9590809983889497612fa3565b612fa3565b61264488614521565b90613924565b935f8513156127ad5760095461266d9086906001600160a01b0316863091613d0f565b600a54600490602090612688906001600160a01b0316610e9a565b604051631e328b4160e11b815292839182905afa9081156111d9575f9161278f575b501691823b15610559576040516323b872dd60e01b81523060048201526001600160a01b038516602482015260448101889052925f908490606490829084905af19081156111d9577fa6c1811e425aa63111b318f9419b688e3da2139edec0f501a2ac2e403f982a1f96610af8946127329361277c575b5061272b8961447d565b83896142b7565b612757612747875f52601860205260405f2090565b80546001600160a01b0319169055565b60405193849384604091949392606082019560018060a01b0316825260208201520152565b806111cd61278992611d5e565b5f612721565b6127a7915060203d8111611204576111f58183611d93565b5f6126aa565b5f85121561266d576009546127d5906001600160a01b0316856127cf8861446d565b91614023565b61266d565b90509061380b565b6040516398c1b40760e01b8152600490fd5b604051631915f32960e11b8152600490fd5b34610559575f36600319011261055957602061ffff60135416604051908152f35b3461055957604036600319011261055957602061287d6004356128498161077a565b602435906128568261077a565b60018060a01b03165f526001835260405f209060018060a01b03165f5260205260405f2090565b54604051908152f35b634e487b7160e01b5f52603260045260245ffd5b601c548110156128cf57601c5f527f0e4562a10381dec21b205ed72637e6b1b523bdd0e4d4d50af5cd23dd4500a21101905f90565b612886565b601d548110156128cf57601d5f527f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc146134f01905f90565b601b548110156128cf57601b5f525f80516020614a4883398151915201905f90565b3461055957602036600319011261055957600435601b5481101561055957602090601b5f525f80516020614a488339815191520154604051908152f35b34610559575f36600319011261055957602061ffff60065460b01c16604051908152f35b34610559575f366003190112610559576020600f54604051908152f35b34610559576020366003190112610559576004355f5260196020526020600c60405f200154604051908152f35b6020815281516129f461014091826020850152610160840190610603565b92602081015160408401526040810151606084015260608101516080840152608081015160a084015260a081015160c084015260c081015160e084015260e0810151612a49610100918286019061ffff169052565b810151906101209182850152015191015290565b34610559575f36600319011261055957612a756149bc565b506106c1612a81614611565b61ffff612a8c6145a2565b91612a95613a46565b92612b14612aa7611a34611a2f613071565b94612ab061468f565b600e5496612ac560065461ffff9060b01c1690565b92600f5495612ad760135461ffff1690565b97612ae0611df6565b9a612ae9612c70565b8c5260208c015260408b015260608a0152608089015260a088015260c087015261ffff1660e0860152565b61010084015216610120820152604051918291826129d6565b34610559576020366003190112610559576020610577600435613b72565b3461055957602036600319011261055957600435612b688161077a565b612b70612e3d565b6001600160a01b0316801561080357600680546001600160a01b03191682179055807f2e7dcd5549bd379d2c481c56fc3dbe7db94761cb60cbbc301f807e31cc4a99445f80a3005b34610559575f36600319011261055957600d546040516001600160a01b039091168152602090f35b3461055957602036600319011261055957600435612bfd8161077a565b612c05612e3d565b6001600160a01b03908116908115612c5857600554826bffffffffffffffffffffffff60a01b821617600555167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3005b604051631e4fbdf760e01b81525f6004820152602490fd5b604051905f60105490600182811c92818116918215612d54575b6020918286108414612d4057858852879493602086019392918115612d215750600114612cc1575b505050611e7d92500383611d93565b925093612cef60105f527f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae67290565b945f935b828510612d0b57505050611e7d9350015f8080612cb2565b8654858501529586019588955093810193612cf3565b92505050611e7d9491925060ff19168252151560051b015f8080612cb2565b634e487b7160e01b85526022600452602485fd5b93607f1693612c8a565b34610559575f366003190112610559576106c1612d79612c70565b604051918291602083526020830190610603565b346105595760c036600319011261055957602435600435612dad8261077a565b60443591612dba8361077a565b606036606319011261055957602092612dd3918361487c565b906040519081528183820152606435604082015260ff608435612df58161305b565b16606082015260ff60a435612e098161305b565b1660808201527f8b96c40bd23d041868dce7135e6994e68df1b292276db8f707c6c35873c1e20160a03392a2604051908152f35b6005546001600160a01b03163303612e5157565b60405163118cdaa760e01b8152336004820152602490fd5b916001600160a01b0380841692908315612f67578116938415612f4f576001600160a01b0381165f90815260208190526040902054838110612f2057612f1b928492612eeb7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef96612f0594039160018060a01b03165f525f60205260405f2090565b556001600160a01b03165f90815260208190526040902090565b8054820190556040519081529081906020820190565b0390a3565b60405163391434e360e21b81526001600160a01b03929092166004830152602482015260448101839052606490fd5b60405163ec442f0560e01b81525f6004820152602490fd5b604051634b637e8f60e11b81525f6004820152602490fd5b634e487b7160e01b5f52601160045260245ffd5b90612710918201809211610e0b57565b91908201809211610e0b57565b6001600160a01b038181165f818152600160208181526040808420888716855290915290912054939594939291908301612fed575b505050505050565b84831061302c57156108c6578216156108ae576130209261086191039360018060a01b03165f52600160205260405f2090565b555f8080808080612fe5565b604051637dc7a0d960e11b81526001600160a01b03851660048201526024810184905260448101869052606490fd5b60ff81160361055957565b6040513d5f823e3d90fd5b60095460405163313ce56760e01b815290602090829060049082906001600160a01b03165afa9081156111d9575f916130a8575090565b906020823d82116130d4575b816130c160209383611d93565b810103126106005750516106528161305b565b3d91506130b4565b5190811515820361055957565b908160e09103126105595761315d60c06040519261310684611d77565b8051845260208101516131188161077a565b6020850152604081015161312b8161077a565b60408501526060810151606085015260808101516131488161077a565b608085015260a081015160a0850152016130dc565b60c082015290565b91908203918211610e0b57565b9081602091031261055957516106528161077a565b8151815560208201516001820180546001600160a01b03199081166001600160a01b03938416179091556040840151600284018054918416918316919091179055606084015160038401556080840151600484018054919093169116179055611e7d9160069060c09060a081015160058501550151151591019060ff801983541691151516179055565b90613297610160600f611e7d9461323d61322b8651151590565b829060ff801983541691151516179055565b61324e602086015160018301613187565b60408501516008820155606085015160098201556132b0600a820161328d61327b608089015161ffff1690565b825461ffff191661ffff909116178255565b60a087015161ffff165b63ffff000082549160101b169063ffff00001916179055565b60c0850151600b82015560e0850151600c8201556132ec6132d761010087015161ffff1690565b600d83019061ffff1661ffff19825416179055565b610120850151600e820155019261331e61330c61014083015161ffff1690565b855461ffff191661ffff909116178555565b015161ffff1690565b90611e7d613333611dd5565b92613348613342825460ff1690565b15158552565b61335460018201611e17565b60208501526008810154604085015260098101546060850152600a81015461ffff808216608087015260109190911c811660a086015290600f90600b81015460c0870152600c81015460e08701526133c06133b4600d83015461ffff1690565b61ffff16610100880152565b600e810154610120870152015461ffff8282161661014086015260101c1661016084019061ffff169052565b613523613523925f92835260196020526040832092613409611dd5565b61341d613417865460ff1690565b15158252565b61342960018601611e17565b6020820152600885015460408201526135286135146009870154926060810193845261262388600a8101549561348161ffff8861347082809b16608089019061ffff169052565b60101c1660a086019061ffff169052565b600b82015460c08501526134e7600c8301549760e08601988952600f600e6134ae600d87015461ffff1690565b61ffff16610100890190815295015461012088019081529d015461ffff8282161661014088015260101c1661016086019061ffff169052565b518042115f1461354a57610f2861350461261e61350e9342613165565b925b5161ffff1690565b90613558565b969097918099888a9451613165565b613165565b905190818111156135435761353d9250613165565b93929190565b505061353d565b5061350e610f288892613506565b9080821115613565575090565b905090565b634e487b7160e01b5f52601260045260245ffd5b62015180600161358d8361370d565b92096135965790565b60018101809111610e0b5790565b91906135b1828285613774565b9282156135c057096135965790565b61356a565b81156135c0570490565b90808202905f19818409908280831092039180831461362f5761016d920382111561361d577f4ff4c73064ff4c73064ff4c73064ff4c73064ff4c73064ff4c73064ff4c73065930990030290565b60405163227bc15360e01b8152600490fd5b50505061016d91500490565b90808202905f198184099082808310920391808303921461369857612710908282111561361d577fbc01a36e2eb1c432ca57a786c226809d495182a9930be0ded288ce703afb7e91940990828211900360fc1b910360041c170290565b505061271091500490565b90808202905f19818409908280831092039180830392146137015762989680908282111561361d577f5fb648fcc913daa857a27e44a97d3c6bc1193a63a91cc45be5032477ae8d46a5940990828211900360f91b910360071c170290565b50506298968091500490565b5f19600182099080808310920391808303921461376a5762015180918083111561361d577f166054f43e32d21c10aff9ee8dd7cc6bb5aa499388277166054f43e32d21c10b926001830990828211900360f91b910360071c170290565b6201518091500490565b9091828202915f19848209938380861095039480860395146137e7578483111561361d57829109815f038216809204600280826003021880830282030280830282030280830282030280830282030280830282030280920290030293600183805f03040190848311900302920304170290565b50509061065292506135c5565b906103e891828102928184041490151715610e0b57565b9161382f8261382a613825610f28608088015161ffff1690565b6137f4565b6135cf565b9161389c61387a61387461385d613857613852610f286101408b015161ffff1690565b612f93565b8761363b565b9361382a613825610f286101608b015161ffff1690565b83612fa3565b9461243e8661389561012084019360e0855191015190613165565b92516136a3565b93806138dd57505f925b816138c95750506138c35f925b6138bd8482613165565b94613165565b91929190565b6138c3916138d79185613774565b926138b3565b6138e8908286613774565b926138a6565b9080821015613565575090565b5f198114610e0b5760010190565b9190915f8382019384129112908015821691151617610e0b57565b81810392915f138015828513169184121617610e0b57565b5f80601c545b808210613a1a5750505f601d545b8082106139c8575050601b545f5b81811061396a57505090565b61398061397682612909565b90549060031b1c90565b61398981614222565b61399d575b50613998906138fb565b61395e565b6139989193600c6139b96139c1935f52601960205260405f2090565b015490613924565b929061398e565b9091613a0e613a149160016139b96139ff6139e5613976896128d4565b936139f8855f52601e60205260405f2090565b5490613909565b925f52601e60205260405f2090565b926138fb565b90613950565b9091613a0e613a40916139f8613a326139768761289a565b5f52601760205260405f2090565b90613942565b613a65613a5161393c565b613a60600b54600c5490613924565b613909565b5f80821315613565575090565b60ff16604d8111610e0b57600a0a90565b6002548015613a9f579061065291613a99613a46565b916135a4565b5090565b6002548015613a9f579061065291613ab9613a46565b91613774565b6002548015613a9f5761065291613ad4613a46565b90613774565b6002548015613a9f5761065291613aef613a46565b906135a4565b601b80545f9182805b838110613b0c575050505090565b828252805f80516020614a488339815191520154613b2981614222565b15613b3e575b50613b39906138fb565b613afe565b613b4a909591956133ec565b50509050613b578161435b565b8103908111610e0b578101809111610e0b5793613b39613b2f565b613b7a613a46565b60025480613b8757505090565b613b8f613af5565b8201809211610e0b5761065292613774565b9081602091031261055957610652906130dc565b60155460405163babcc53960e01b815233600482015291929190602090829060249082906001600160a01b03165afa9081156111d9575f91613c16575b501561226357613c11613c086106529284613c34565b92600b54612fa3565b600b55565b613c2e915060203d81116112e6576112d88183611d93565b5f613bf2565b90613c3e82613b72565b91613c6b8130337f0000000000000000000000000000000000000000000000000000000000000000613d0f565b6001600160a01b038216918215612f4f5760025490848201809211610e0b57613ca69160025560018060a01b03165f525f60205260405f2090565b838154019055815f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020604051878152a3604080519182526020820184905233917fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d79190a390565b6040516323b872dd60e01b60208201526001600160a01b039283166024820152929091166044830152606480830193909352918152611e7d91613d53608483611d93565b81516001600160a01b03909116915f91829160200182855af13d15613e05573d67ffffffffffffffff8111611d7257613dae9160405191613d9e6020601f19601f8401160184611d93565b82523d5f602084013e5b83613e11565b8051908115159182613de7575b5050613dc45750565b604051635274afe760e01b81526001600160a01b03919091166004820152602490fd5b613dfe925090602080610a20938301019101613ba1565b5f80613dbb565b613dae90606090613da8565b90613e385750805115613e2657805190602001fd5b604051630a12f52160e11b8152600490fd5b81511580613e6b575b613e49575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b15613e41565b600a5490929190613e8d906001600160a01b0316610e9a565b60405163484d384560e11b815260048101859052939060e090859060249082905afa9384156111d9575f94613f80575b50611619613ed3915f52601960205260405f2090565b613ee0610a208251151590565b613f6e5761ffff613ef9610f2860a084015161ffff1690565b92169182118015613f66575b6120ec57612623613f3061261e6060613f26613f439661012087015161363b565b9701514290613165565b61350e610f2861010085015161ffff1690565b93909192613f5e613f58846126368789612fa3565b83613165565b919493929190565b508115613f05565b60405163649ac74160e11b8152600490fd5b613ed3919450613fa06116199160e03d8111611264576112558183611d93565b949150613ebd565b601d54600160401b811015611d72576001810180601d558110156128cf57601d5f527f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc146134f0155565b601b54600160401b811015611d72576001810180601b558110156128cf57601b5f525f80516020614a488339815191520155565b60405163a9059cbb60e01b60208201526001600160a01b039092166024830152604480830193909352918152608081019167ffffffffffffffff831182841017611d7257611e7d92604052613d53565b67ffffffffffffffff8111611d725760051b60200190565b9061409582614073565b6140a26040519182611d93565b82815280926140b3601f1991614073565b0190602036910137565b80518210156128cf5760209160051b010190565b601b5490601d54916140eb6140e68483612fa3565b61408b565b906140f58161408b565b935f908192825b81811061415b5750505f5b818110614118575050825283529190565b8061412861397661413c936128d4565b614131816141bd565b614141575b506138fb565b614107565b61415461414d866138fb565b95886140bd565b525f614136565b8061416b61397661419293612909565b614174816141bd565b156141975761418c614185876138fb565b96896140bd565b526138fb565b6140fc565b6141a081614222565b6141aa57506138fb565b6141546141b6886138fb565b978b6140bd565b600a5460405163484d384560e11b8152600481019290925260e090829060249082906001600160a01b03165afa9081156111d9575f91614204575b5060a081519101511490565b61421c915060e03d8111611264576112558183611d93565b5f6141f8565b600a5460405163484d384560e11b8152600481019290925260e090829060249082906001600160a01b03165afa80156111d9576060915f91614288575b5001516014546201518090818102918183041490151715610e0b5761428391612fa3565b421190565b6142a0915060e03d8111611264576112558183611d93565b5f61425f565b9060206106529281815201906112ed565b92600854908101809111610e0b576008556142d18161435b565b90818103908111610e0b57835f52601760205260405f2055601f6020528060405f2055601254908101809111610e0b57601255600754908101809111610e0b57600755601c54600160401b811015611d72576001810180601c558110156128cf57601c5f527f0e4562a10381dec21b205ed72637e6b1b523bdd0e4d4d50af5cd23dd4500a2110155565b61ffff601154166103e890818102918183041490151715610e0b57610652916136a3565b5f905b601d918254928382101561446757805f5282827f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc146134f0154146143cf57506143c99192506138fb565b90614382565b91505f1992838101908111610e0b57614414916143ee6143f7926128d4565b929054916128d4565b91909260031b1c9082549060031b91821b915f19901b1916179055565b805491821561445357820191808310156128cf577f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc146134e5f91838352015555565b634e487b7160e01b5f52603160045260245ffd5b50505050565b600160ff1b8114610e0b575f0390565b5f905b601b918254928382101561446757805f5282825f80516020614a488339815191520154146144ba57506144b49192506138fb565b90614480565b91505f1992838101908111610e0b576144e2916144d96143f792612909565b92905491612909565b805491821561445357820191808310156128cf577f3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc05f91838352015555565b600a5460405163484d384560e11b8152600481018390529060e090829060249082906001600160a01b03165afa80156111d95760a0614576916006935f91614584575b500151925f52601960205260405f2090565b01548103908111610e0b5790565b61459c915060e03d8111611264576112558183611d93565b5f614564565b5f80601b8054905b8183106145b75750505090565b909192815f52835f80516020614a4883398151915201546145d781614222565b5f9190156145fd5750505f5b8101809111610e0b576145f690936138fb565b91906145aa565b8152601960205260409020600c01546145e3565b614619613a46565b6146216145a2565b8103908111610e0b575f8091601b545b80841061464357506106529250613165565b9091835f80516020614a4883398151915201545f52601960205260405f20600c600b8201549101548103908111610e0b578101809111610e0b5761468790936138fb565b929190614631565b614697614611565b61469f613a46565b156146ad5761065290613aa3565b505f90565b6146d2612436611a348560018060a01b03165f525f60205260405f205490565b8082116146f1575090816146e861065293613a83565b9384923361471f565b604051633fa733bb60e21b81526001600160a01b038516600482015260248101929092526044820152606490fd5b6001600160a01b0380841695818316949193929091908288870361486b575b50508615612f67576001600160a01b0381165f9081526020819052604090205482811061483b5791614836916147a9827ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db979695039160018060a01b03165f525f60205260405f2090565b556147b78160025403600255565b5f887fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef604051806147ed86829190602083019252565b0390a361481b87847f0000000000000000000000000000000000000000000000000000000000000000614023565b60405193849316968360209093929193604081019481520152565b0390a4565b60405163391434e360e21b81526001600160a01b0392909216600483015260248201526044810191909152606490fd5b6148759183612fb0565b5f8261473e565b601554614891906001600160a01b0316610e9a565b60405163babcc53960e01b808252336004830152602092918381602481865afa9081156111d9575f91614932575b5015612263576040519081526001600160a01b0386166004820152908290829060249082905afa9182156111d9575f92614915575b5050156122255790614906929161494f565b61065261221082600c54612fa3565b61492b9250803d106112e6576112d88183611d93565b5f806148f4565b6149499150843d86116112e6576112d88183611d93565b5f6148bf565b9061496d6125878460018060a01b03165f525f60205260405f205490565b80831161498c5750906106529161498382613abf565b9384913361471f565b604051632e52afbb60e21b81526001600160a01b0385166004820152602481018490526044810191909152606490fd5b60405190610140820182811067ffffffffffffffff821117611d725760405281606081526101205f918260208201528260408201528260608201528260808201528260a08201528260c08201528260e0820152826101008201520152565b60026040611e7d9380518455602081015160018501550151151591019060ff80198354169115151617905556fe3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc1a2646970667358221220a8abb7a74f31fba9e62f40c34822debe3ee080a65134a9c32af695c2c7042b6e64736f6c63430008140033",
  "devdoc": {
    "author": "@solidoracle",
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "ERC20InsufficientAllowance(address,uint256,uint256)": [
        {
          "details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
          "params": {
            "allowance": "Amount of tokens a `spender` is allowed to operate with.",
            "needed": "Minimum amount required to perform a transfer.",
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC20InsufficientBalance(address,uint256,uint256)": [
        {
          "details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
          "params": {
            "balance": "Current balance for the interacting account.",
            "needed": "Minimum amount required to perform a transfer.",
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC20InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSpender(address)": [
        {
          "details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
          "params": {
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC4626ExceededMaxDeposit(address,uint256,uint256)": [
        {
          "details": "Attempted to deposit more assets than the max amount for `receiver`."
        }
      ],
      "ERC4626ExceededMaxMint(address,uint256,uint256)": [
        {
          "details": "Attempted to mint more shares than the max amount for `receiver`."
        }
      ],
      "ERC4626ExceededMaxRedeem(address,uint256,uint256)": [
        {
          "details": "Attempted to redeem more shares than the max amount for `receiver`."
        }
      ],
      "ERC4626ExceededMaxWithdraw(address,uint256,uint256)": [
        {
          "details": "Attempted to withdraw more assets than the max amount for `receiver`."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "MathOverflowedMulDiv()": [
        {
          "details": "Muldiv operation overflow."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      }
    },
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "approveInvoice(uint256,uint16,uint16,uint16)": {
        "params": {
          "invoiceId": "The ID of the invoice to approve"
        }
      },
      "asset()": {
        "details": "See {IERC4626-asset}. "
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "calculateAccruedProfits()": {
        "details": "Iterates through all active invoices, calculates interest for each, deducts taxes, and sums the net accrued interest",
        "returns": {
          "accruedProfits": "The total net accrued profits across all active invoices"
        }
      },
      "calculateCapitalAccount()": {
        "returns": {
          "_0": "The calculated capital account balance"
        }
      },
      "calculateKickbackAmount(uint256)": {
        "params": {
          "invoiceId": "The ID of the invoice for which to calculate the kickback amount"
        },
        "returns": {
          "kickbackAmount": "The calculated kickback amount",
          "trueAdminFee": "The true admin fee amount",
          "trueInterest": "The true interest amount",
          "trueProtocolFee": "The true protocol fee amount"
        }
      },
      "calculateRealizedGainLoss()": {
        "returns": {
          "_0": "The total realized gain adjusted for losses"
        }
      },
      "calculateTargetFees(uint256,uint16)": {
        "params": {
          "factorerUpfrontBps": "The upfront bps specified by the factorer",
          "invoiceId": "The ID of the invoice for which to calculate the fees"
        },
        "returns": {
          "adminFee": "The target calculated admin fee",
          "fundedAmountGross": "The gross amount to be funded to the factorer",
          "netFundedAmount": "The net amount that will be funded to the factorer after deducting fees",
          "targetInterest": "The calculated interest fee",
          "targetProtocolFee": "The calculated protocol fee"
        }
      },
      "constructor": {
        "params": {
          "_asset": "underlying supported stablecoin asset for deposit ",
          "_invoiceProviderAdapter": "adapter for invoice provider",
          "_underwriter": "address of the underwriter"
        }
      },
      "convertToAssets(uint256)": {
        "details": "See {IERC4626-convertToAssets}. "
      },
      "convertToShares(uint256)": {
        "details": "See {IERC4626-convertToShares}. "
      },
      "decimals()": {
        "returns": {
          "_0": "The number of decimals for this token"
        }
      },
      "deployedCapitalForActiveInvoicesExcludingImpaired()": {
        "returns": {
          "_0": "The total funded amount for all active invoices"
        }
      },
      "deposit(uint256,address)": {
        "params": {
          "assets": "The amount of assets to deposit",
          "receiver": "The address to receive the fund shares"
        },
        "returns": {
          "_0": "The number of shares issued for the deposit"
        }
      },
      "depositWithAttachment(uint256,address,(bytes32,uint8,uint8))": {
        "params": {
          "assets": "The amount of assets to deposit",
          "attachment": "The attachment data for the deposit",
          "receiver": "The address to receive the fund shares"
        },
        "returns": {
          "_0": "The number of shares issued for the deposit"
        }
      },
      "fundInvoice(uint256,uint16)": {
        "details": "No checks needed for the creditor, as transferFrom will revert unless it gets executed by the nft owner (i.e. claim creditor)",
        "params": {
          "factorerUpfrontBps": "factorer specified upfront bps",
          "invoiceId": "The ID of the invoice to fund"
        }
      },
      "getFundInfo()": {
        "returns": {
          "_0": "FundInfo The fund information"
        }
      },
      "impairInvoice(uint256)": {
        "params": {
          "invoiceId": "The ID of the invoice to impair"
        }
      },
      "maxDeposit(address)": {
        "details": "See {IERC4626-maxDeposit}. "
      },
      "maxMint(address)": {
        "details": "See {IERC4626-maxMint}. "
      },
      "maxRedeem()": {
        "returns": {
          "_0": "The maximum number of shares that can be redeemed"
        }
      },
      "maxRedeem(address)": {
        "params": {
          "_owner": "The owner of the shares being redeemed"
        },
        "returns": {
          "_0": "The maximum number of shares that can be redeemed"
        }
      },
      "maxWithdraw(address)": {
        "params": {
          "_owner": "The owner of the assets to be withdrawn"
        },
        "returns": {
          "_0": "The maximum number of assets that can be withdrawn"
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "previewDeposit(uint256)": {
        "details": "See {IERC4626-previewDeposit}. "
      },
      "previewMint(uint256)": {
        "details": "See {IERC4626-previewMint}. "
      },
      "previewRedeem(uint256)": {
        "details": "See {IERC4626-previewRedeem}. "
      },
      "previewWithdraw(uint256)": {
        "details": "See {IERC4626-previewWithdraw}. "
      },
      "pricePerShare()": {
        "returns": {
          "_0": "The current price per share, scaled to the underlying asset's decimal places"
        }
      },
      "reconcileActivePaidInvoices()": {
        "details": "This function should be called when viewPoolStatus returns some updates, to ensure accurate accounting"
      },
      "redeem(uint256,address,address)": {
        "params": {
          "_owner": "The owner of the shares being redeemed",
          "receiver": "The address to receive the assets",
          "shares": "The number of shares to redeem"
        },
        "returns": {
          "_0": "The number of shares redeemed"
        }
      },
      "redeemWithAttachment(uint256,address,address,(bytes32,uint8,uint8))": {
        "params": {
          "_owner": "The owner of the shares being redeemed",
          "attachment": "The attachment data for the redemption",
          "receiver": "The address to receive the redeemed assets",
          "shares": "The number of shares to redeem"
        },
        "returns": {
          "_0": "The amount of assets redeemed"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setAdminFeeBps(uint16)": {
        "params": {
          "_newAdminFeeBps": "The new admin fee in basis points"
        }
      },
      "setApprovalDuration(uint256)": {
        "details": "This function can only be called by the contract owner",
        "params": {
          "_duration": "The new duration in seconds"
        }
      },
      "setBullaDaoAddress(address)": {
        "params": {
          "_newBullaDao": "The new address for the Bulla DAO"
        }
      },
      "setDepositPermissions(address)": {
        "params": {
          "_newDepositPermissionsAddress": "The new deposit permissions contract address"
        }
      },
      "setFactoringPermissions(address)": {
        "params": {
          "_newFactoringPermissionsAddress": "The address of the new factoring permissions contract"
        }
      },
      "setGracePeriodDays(uint256)": {
        "details": "This function can only be called by the contract owner",
        "params": {
          "_days": "The number of days for the grace period"
        }
      },
      "setImpairReserve(uint256)": {
        "params": {
          "_impairReserve": "The new impair reserve amount"
        }
      },
      "setProtocolFeeBps(uint16)": {
        "params": {
          "_newProtocolFeeBps": "The new protocol fee in basis points"
        }
      },
      "setTargetYield(uint16)": {
        "params": {
          "_targetYieldBps": "The new target yield in basis points"
        }
      },
      "setTaxBps(uint16)": {
        "details": "This function can only be called by the contract owner",
        "params": {
          "_newTaxBps": "The new tax rate in basis points"
        }
      },
      "setUnderwriter(address)": {
        "params": {
          "_newUnderwriter": "The address of the new underwriter"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalAssets()": {
        "returns": {
          "_0": "The amount of assets available for withdrawal or new investments, excluding funds allocated to active invoices"
        }
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unfactorInvoice(uint256)": {
        "params": {
          "invoiceId": "The ID of the invoice to unfactor"
        }
      },
      "viewPoolStatus()": {
        "returns": {
          "impairedInvoices": "An array of impaired invoice IDs",
          "paidInvoices": "An array of paid invoice IDs"
        }
      },
      "withdraw(uint256,address,address)": {
        "params": {
          "_owner": "The address who owns the shares to redeem",
          "assets": "The amount of assets to withdraw",
          "receiver": "The address to receive the assets"
        },
        "returns": {
          "_0": "The number of shares redeemed"
        }
      },
      "withdrawTaxBalance()": {
        "details": "This function can only be called by the contract owner"
      }
    },
    "title": "Bulla Factoring Fund",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "CallerNotUnderwriter()": [
        {
          "notice": "Errors"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "activeInvoices(uint256)": {
        "notice": "Array to hold the IDs of all active invoices"
      },
      "adminFeeBalance()": {
        "notice": "Accumulated admin fee balance"
      },
      "adminFeeBps()": {
        "notice": "Admin fee in basis points"
      },
      "approvalDuration()": {
        "notice": "The duration of invoice approval before it expires"
      },
      "approveInvoice(uint256,uint16,uint16,uint16)": {
        "notice": "Approves an invoice for funding, can only be called by the underwriter"
      },
      "approvedInvoices(uint256)": {
        "notice": "Mapping from invoice ID to invoice approval details"
      },
      "assetAddress()": {
        "notice": "Address of the underlying asset token (e.g., USDC)"
      },
      "bullaDao()": {
        "notice": "Address of the Bulla DAO, a trusted multisig"
      },
      "calculateAccruedProfits()": {
        "notice": "Calculates the total accrued profits from all active invoices"
      },
      "calculateCapitalAccount()": {
        "notice": "Calculates the capital account balance, including deposits, withdrawals, and realized gains/losses"
      },
      "calculateKickbackAmount(uint256)": {
        "notice": "Calculates the kickback amount for a given funded amount allowing early payment"
      },
      "calculateRealizedGainLoss()": {
        "notice": "Calculates the total realized gain or loss from paid and impaired invoices"
      },
      "calculateTargetFees(uint256,uint16)": {
        "notice": "Calculates the true fees and net funded amount for a given invoice and factorer's upfront bps, annualised"
      },
      "creationTimestamp()": {
        "notice": "Timestamp of the fund's creation"
      },
      "decimals()": {
        "notice": "Returns the number of decimals the token uses, same as the underlying asset"
      },
      "deployedCapitalForActiveInvoicesExcludingImpaired()": {
        "notice": "Calculates the total funded amount for all active invoices."
      },
      "deposit(uint256,address)": {
        "notice": "Helper function to handle the logic of depositing assets in exchange for fund shares"
      },
      "depositPermissions()": {
        "notice": "Permissions contracts for deposit and factoring"
      },
      "depositWithAttachment(uint256,address,(bytes32,uint8,uint8))": {
        "notice": "Allows for the deposit of assets in exchange for fund shares with an attachment"
      },
      "fundInvoice(uint256,uint16)": {
        "notice": "Funds a single invoice, transferring the funded amount from the fund to the caller and transferring the invoice NFT to the fund"
      },
      "getFundInfo()": {
        "notice": "Retrieves the fund information"
      },
      "gracePeriodDays()": {
        "notice": "Grace period for invoices"
      },
      "impairInvoice(uint256)": {
        "notice": "Impairs an invoice, using the impairment reserve to cover the loss"
      },
      "impairReserve()": {
        "notice": "Reserve amount for impairment"
      },
      "impairments(uint256)": {
        "notice": "Mapping from invoice ID to impairment details"
      },
      "invoiceProviderAdapter()": {
        "notice": "Address of the invoice provider contract adapter"
      },
      "maxRedeem()": {
        "notice": "Calculates the maximum amount of shares that can be redeemed based on the total assets in the fund"
      },
      "maxRedeem(address)": {
        "notice": "Calculates the maximum amount of shares that can be redeemed based on the total assets in the fund"
      },
      "maxWithdraw(address)": {
        "notice": "Calculates the maximum amount of assets that can be withdrawn"
      },
      "originalCreditors(uint256)": {
        "notice": "Mapping from invoice ID to original creditor's address"
      },
      "paidInvoiceTax(uint256)": {
        "notice": "Mapping from invoice ID to tax amount"
      },
      "paidInvoicesGain(uint256)": {
        "notice": "Mapping of paid invoices ID to track gains/losses"
      },
      "poolName()": {
        "notice": "Name of the factoring pool"
      },
      "pricePerShare()": {
        "notice": "Calculates the current price per share of the fund, "
      },
      "protocolFeeBalance()": {
        "notice": "Accumulated protocol fee balance"
      },
      "protocolFeeBps()": {
        "notice": "Protocol fee in basis points"
      },
      "reconcileActivePaidInvoices()": {
        "notice": "Reconciles the list of active invoices with those that have been paid, updating the fund's records"
      },
      "redeem(uint256,address,address)": {
        "notice": "Helper function to handle the logic of redeeming shares in exchange for assets"
      },
      "redeemWithAttachment(uint256,address,address,(bytes32,uint8,uint8))": {
        "notice": "Redeems shares for underlying assets with an attachment, transferring the assets to the specified receiver"
      },
      "setAdminFeeBps(uint16)": {
        "notice": "Sets the admin fee in basis points"
      },
      "setApprovalDuration(uint256)": {
        "notice": "Sets the duration for which invoice approvals are valid"
      },
      "setBullaDaoAddress(address)": {
        "notice": "Updates the Bulla DAO address"
      },
      "setDepositPermissions(address)": {
        "notice": "Updates the deposit permissions contract"
      },
      "setFactoringPermissions(address)": {
        "notice": "Updates the factoring permissions contract"
      },
      "setGracePeriodDays(uint256)": {
        "notice": "Sets the grace period in days for determining if an invoice is impaired"
      },
      "setImpairReserve(uint256)": {
        "notice": "Sets the impair reserve amount"
      },
      "setProtocolFeeBps(uint16)": {
        "notice": "Updates the protocol fee in basis points (bps)"
      },
      "setTargetYield(uint16)": {
        "notice": "Sets the target yield in basis points"
      },
      "setTaxBps(uint16)": {
        "notice": "Sets the tax basis points (bps)"
      },
      "setUnderwriter(address)": {
        "notice": "Sets a new underwriter for the contract"
      },
      "targetYieldBps()": {
        "notice": "Target yield in basis points"
      },
      "taxBalance()": {
        "notice": "Accumulated tax balance"
      },
      "taxBps()": {
        "notice": "Tax rate in basis points"
      },
      "totalAssets()": {
        "notice": "Calculates the available assets in the fund net of fees, impair reserve and tax"
      },
      "underwriter()": {
        "notice": "Address of the underwriter, trusted to approve invoices"
      },
      "unfactorInvoice(uint256)": {
        "notice": "Unfactors an invoice, returning the invoice NFT to the original creditor and refunding the funded amount"
      },
      "viewPoolStatus()": {
        "notice": "Provides a view of the pool's status, listing paid and impaired invoices, to be called by Gelato or alike"
      },
      "withdraw(uint256,address,address)": {
        "notice": "Helper function to handle the logic of withdrawing assets in exchange for fund shares"
      },
      "withdrawAdminFees()": {
        "notice": "Allows the Pool Owner to withdraw accumulated admin fees."
      },
      "withdrawProtocolFees()": {
        "notice": "Allows the Bulla DAO to withdraw accumulated protocol fees."
      },
      "withdrawTaxBalance()": {
        "notice": "Withdraws the accumulated tax balance to the pool owner"
      }
    },
    "notice": "Bulla Factoring Fund is a ERC4626 compatible fund that allows for the factoring of invoices",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3215,
        "contract": "contracts/BullaFactoring.sol:BullaFactoring",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3221,
        "contract": "contracts/BullaFactoring.sol:BullaFactoring",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 3223,
        "contract": "contracts/BullaFactoring.sol:BullaFactoring",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3225,
        "contract": "contracts/BullaFactoring.sol:BullaFactoring",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 3227,
        "contract": "contracts/BullaFactoring.sol:BullaFactoring",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 2746,
        "contract": "contracts/BullaFactoring.sol:BullaFactoring",
        "label": "_owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 6449,
        "contract": "contracts/BullaFactoring.sol:BullaFactoring",
        "label": "bullaDao",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 6452,
        "contract": "contracts/BullaFactoring.sol:BullaFactoring",
        "label": "protocolFeeBps",
        "offset": 20,
        "slot": "6",
        "type": "t_uint16"
      },
      {
        "astId": 6455,
        "contract": "contracts/BullaFactoring.sol:BullaFactoring",
        "label": "adminFeeBps",
        "offset": 22,
        "slot": "6",
        "type": "t_uint16"
      },
      {
        "astId": 6458,
        "contract": "contracts/BullaFactoring.sol:BullaFactoring",
        "label": "protocolFeeBalance",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 6461,
        "contract": "contracts/BullaFactoring.sol:BullaFactoring",
        "label": "adminFeeBalance",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 6465,
        "contract": "contracts/BullaFactoring.sol:BullaFactoring",
        "label": "assetAddress",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IERC20)3785"
      },
      {
        "astId": 6469,
        "contract": "contracts/BullaFactoring.sol:BullaFactoring",
        "label": "invoiceProviderAdapter",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IInvoiceProviderAdapter)9997"
      },
      {
        "astId": 6471,
        "contract": "contracts/BullaFactoring.sol:BullaFactoring",
        "label": "totalDeposits",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 6473,
        "contract": "contracts/BullaFactoring.sol:BullaFactoring",
        "label": "totalWithdrawals",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 6476,
        "contract": "contracts/BullaFactoring.sol:BullaFactoring",
        "label": "underwriter",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 6479,
        "contract": "contracts/BullaFactoring.sol:BullaFactoring",
        "label": "creationTimestamp",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 6482,
        "contract": "contracts/BullaFactoring.sol:BullaFactoring",
        "label": "impairReserve",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 6485,
        "contract": "contracts/BullaFactoring.sol:BullaFactoring",
        "label": "poolName",
        "offset": 0,
        "slot": "16",
        "type": "t_string_storage"
      },
      {
        "astId": 6488,
        "contract": "contracts/BullaFactoring.sol:BullaFactoring",
        "label": "taxBps",
        "offset": 0,
        "slot": "17",
        "type": "t_uint16"
      },
      {
        "astId": 6491,
        "contract": "contracts/BullaFactoring.sol:BullaFactoring",
        "label": "taxBalance",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 6494,
        "contract": "contracts/BullaFactoring.sol:BullaFactoring",
        "label": "targetYieldBps",
        "offset": 0,
        "slot": "19",
        "type": "t_uint16"
      },
      {
        "astId": 6498,
        "contract": "contracts/BullaFactoring.sol:BullaFactoring",
        "label": "gracePeriodDays",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 6502,
        "contract": "contracts/BullaFactoring.sol:BullaFactoring",
        "label": "depositPermissions",
        "offset": 0,
        "slot": "21",
        "type": "t_contract(Permissions)9578"
      },
      {
        "astId": 6505,
        "contract": "contracts/BullaFactoring.sol:BullaFactoring",
        "label": "factoringPermissions",
        "offset": 0,
        "slot": "22",
        "type": "t_contract(Permissions)9578"
      },
      {
        "astId": 6510,
        "contract": "contracts/BullaFactoring.sol:BullaFactoring",
        "label": "paidInvoicesGain",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 6515,
        "contract": "contracts/BullaFactoring.sol:BullaFactoring",
        "label": "originalCreditors",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 6521,
        "contract": "contracts/BullaFactoring.sol:BullaFactoring",
        "label": "approvedInvoices",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_uint256,t_struct(InvoiceApproval)9721_storage)"
      },
      {
        "astId": 6525,
        "contract": "contracts/BullaFactoring.sol:BullaFactoring",
        "label": "approvalDuration",
        "offset": 0,
        "slot": "26",
        "type": "t_uint256"
      },
      {
        "astId": 6529,
        "contract": "contracts/BullaFactoring.sol:BullaFactoring",
        "label": "activeInvoices",
        "offset": 0,
        "slot": "27",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 6533,
        "contract": "contracts/BullaFactoring.sol:BullaFactoring",
        "label": "paidInvoicesIds",
        "offset": 0,
        "slot": "28",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 6537,
        "contract": "contracts/BullaFactoring.sol:BullaFactoring",
        "label": "impairedByFundInvoicesIds",
        "offset": 0,
        "slot": "29",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 6543,
        "contract": "contracts/BullaFactoring.sol:BullaFactoring",
        "label": "impairments",
        "offset": 0,
        "slot": "30",
        "type": "t_mapping(t_uint256,t_struct(ImpairmentDetails)9756_storage)"
      },
      {
        "astId": 6548,
        "contract": "contracts/BullaFactoring.sol:BullaFactoring",
        "label": "paidInvoiceTax",
        "offset": 0,
        "slot": "31",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)3785": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IInvoiceProviderAdapter)9997": {
        "encoding": "inplace",
        "label": "contract IInvoiceProviderAdapter",
        "numberOfBytes": "20"
      },
      "t_contract(Permissions)9578": {
        "encoding": "inplace",
        "label": "contract Permissions",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(ImpairmentDetails)9756_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IBullaFactoring.ImpairmentDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(ImpairmentDetails)9756_storage"
      },
      "t_mapping(t_uint256,t_struct(InvoiceApproval)9721_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IBullaFactoring.InvoiceApproval)",
        "numberOfBytes": "32",
        "value": "t_struct(InvoiceApproval)9721_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ImpairmentDetails)9756_storage": {
        "encoding": "inplace",
        "label": "struct IBullaFactoring.ImpairmentDetails",
        "members": [
          {
            "astId": 9751,
            "contract": "contracts/BullaFactoring.sol:BullaFactoring",
            "label": "gainAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9753,
            "contract": "contracts/BullaFactoring.sol:BullaFactoring",
            "label": "lossAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9755,
            "contract": "contracts/BullaFactoring.sol:BullaFactoring",
            "label": "isImpaired",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Invoice)9983_storage": {
        "encoding": "inplace",
        "label": "struct IInvoiceProviderAdapter.Invoice",
        "members": [
          {
            "astId": 9970,
            "contract": "contracts/BullaFactoring.sol:BullaFactoring",
            "label": "faceValue",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9972,
            "contract": "contracts/BullaFactoring.sol:BullaFactoring",
            "label": "creditor",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 9974,
            "contract": "contracts/BullaFactoring.sol:BullaFactoring",
            "label": "debtor",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 9976,
            "contract": "contracts/BullaFactoring.sol:BullaFactoring",
            "label": "dueDate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9978,
            "contract": "contracts/BullaFactoring.sol:BullaFactoring",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 9980,
            "contract": "contracts/BullaFactoring.sol:BullaFactoring",
            "label": "paidAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 9982,
            "contract": "contracts/BullaFactoring.sol:BullaFactoring",
            "label": "isCanceled",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(InvoiceApproval)9721_storage": {
        "encoding": "inplace",
        "label": "struct IBullaFactoring.InvoiceApproval",
        "members": [
          {
            "astId": 9697,
            "contract": "contracts/BullaFactoring.sol:BullaFactoring",
            "label": "approved",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 9700,
            "contract": "contracts/BullaFactoring.sol:BullaFactoring",
            "label": "invoiceSnapshot",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Invoice)9983_storage"
          },
          {
            "astId": 9702,
            "contract": "contracts/BullaFactoring.sol:BullaFactoring",
            "label": "validUntil",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 9704,
            "contract": "contracts/BullaFactoring.sol:BullaFactoring",
            "label": "fundedTimestamp",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 9706,
            "contract": "contracts/BullaFactoring.sol:BullaFactoring",
            "label": "interestApr",
            "offset": 0,
            "slot": "10",
            "type": "t_uint16"
          },
          {
            "astId": 9708,
            "contract": "contracts/BullaFactoring.sol:BullaFactoring",
            "label": "upfrontBps",
            "offset": 2,
            "slot": "10",
            "type": "t_uint16"
          },
          {
            "astId": 9710,
            "contract": "contracts/BullaFactoring.sol:BullaFactoring",
            "label": "fundedAmountGross",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 9712,
            "contract": "contracts/BullaFactoring.sol:BullaFactoring",
            "label": "fundedAmountNet",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          },
          {
            "astId": 9714,
            "contract": "contracts/BullaFactoring.sol:BullaFactoring",
            "label": "minDaysInterestApplied",
            "offset": 0,
            "slot": "13",
            "type": "t_uint16"
          },
          {
            "astId": 9716,
            "contract": "contracts/BullaFactoring.sol:BullaFactoring",
            "label": "trueFaceValue",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256"
          },
          {
            "astId": 9718,
            "contract": "contracts/BullaFactoring.sol:BullaFactoring",
            "label": "protocolFeeBps",
            "offset": 0,
            "slot": "15",
            "type": "t_uint16"
          },
          {
            "astId": 9720,
            "contract": "contracts/BullaFactoring.sol:BullaFactoring",
            "label": "adminFeeBps",
            "offset": 2,
            "slot": "15",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "512"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}