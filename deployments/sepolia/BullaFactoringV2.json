{
  "address": "0xC1a9F48Db6E873E52848DeA2904d4Eff3c55A8A0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "contract IInvoiceProviderAdapterV2",
          "name": "_invoiceProviderAdapter",
          "type": "address"
        },
        {
          "internalType": "contract IBullaFrendLend",
          "name": "_bullaFrendLend",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_underwriter",
          "type": "address"
        },
        {
          "internalType": "contract Permissions",
          "name": "_depositPermissions",
          "type": "address"
        },
        {
          "internalType": "contract Permissions",
          "name": "_redeemPermissions",
          "type": "address"
        },
        {
          "internalType": "contract Permissions",
          "name": "_factoringPermissions",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bullaDao",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_protocolFeeBps",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_adminFeeBps",
          "type": "uint16"
        },
        {
          "internalType": "string",
          "name": "_poolName",
          "type": "string"
        },
        {
          "internalType": "uint16",
          "name": "_targetYieldBps",
          "type": "uint16"
        },
        {
          "internalType": "string",
          "name": "_tokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_tokenSymbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ApprovalExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CallerNotBullaDao",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CallerNotBullaFrendLend",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CallerNotOriginalCreditor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CallerNotUnderwriter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DeductionsExceedsRealisedGains",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientAllowance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSpender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "ERC4626ExceededMaxDeposit",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "ERC4626ExceededMaxMint",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "ERC4626ExceededMaxRedeem",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "ERC4626ExceededMaxWithdraw",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FunctionNotSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ImpairReserveMustBeGreater",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ImpairReserveNotSet",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "available",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "InsufficientFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPercentage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvoiceAlreadyFunded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvoiceAlreadyImpairedByFund",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvoiceAlreadyPaid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvoiceCanceled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvoiceCannotBePaid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvoiceCreditorChanged",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvoiceNotApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvoiceNotImpaired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvoicePaidAmountChanged",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvoiceTokenMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LoanOfferAlreadyAccepted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LoanOfferNotExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoFeesToWithdraw",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "UnauthorizedDeposit",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "UnauthorizedFactoring",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnpaidInvoice",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "paidInvoiceIds",
          "type": "uint256[]"
        }
      ],
      "name": "ActivePaidInvoicesReconciled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "oldFeeBps",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "newFeeBps",
          "type": "uint16"
        }
      ],
      "name": "AdminFeeBpsChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bullaDao",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AdminFeesWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDuration",
          "type": "uint256"
        }
      ],
      "name": "ApprovalDurationChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "BullaDaoAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            },
            {
              "internalType": "uint8",
              "name": "hashFunction",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "size",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct IBullaFactoringV2.Multihash",
          "name": "attachment",
          "type": "tuple"
        }
      ],
      "name": "DepositMadeWithAttachment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "DepositPermissionsChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "FactoringPermissionsChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newGracePeriodDays",
          "type": "uint256"
        }
      ],
      "name": "GracePeriodDaysChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newImpairReserve",
          "type": "uint256"
        }
      ],
      "name": "ImpairReserveChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "invoiceId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "validUntil",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "targetYieldBps",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "spreadBps",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "upfrontBps",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "protocolFeeBps",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "adminFeeBps",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "minDaysInterestApplied",
              "type": "uint16"
            }
          ],
          "indexed": false,
          "internalType": "struct IBullaFactoringV2.FeeParams",
          "name": "feeParams",
          "type": "tuple"
        }
      ],
      "name": "InvoiceApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "invoiceId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fundedAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "originalCreditor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dueDate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "upfrontBps",
          "type": "uint16"
        }
      ],
      "name": "InvoiceFunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "invoiceId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lossAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gainAmount",
          "type": "uint256"
        }
      ],
      "name": "InvoiceImpaired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "invoiceId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "kickbackAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "originalCreditor",
          "type": "address"
        }
      ],
      "name": "InvoiceKickbackAmountSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "invoiceId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "trueInterest",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "trueSpreadAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "trueProtocolFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "trueAdminFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fundedAmountNet",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "kickbackAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "originalCreditor",
          "type": "address"
        }
      ],
      "name": "InvoicePaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "invoiceId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "originalCreditor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "totalRefundOrPaymentAmount",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "interestToCharge",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "spreadAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "adminFee",
          "type": "uint256"
        }
      ],
      "name": "InvoiceUnfactored",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "oldProtocolFeeBps",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "newProtocolFeeBps",
          "type": "uint16"
        }
      ],
      "name": "ProtocolFeeBpsChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bullaDao",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ProtocolFeesWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "RedeemPermissionsChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            },
            {
              "internalType": "uint8",
              "name": "hashFunction",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "size",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct IBullaFactoringV2.Multihash",
          "name": "attachment",
          "type": "tuple"
        }
      ],
      "name": "SharesRedeemedWithAttachment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "SpreadGainsWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "newTargetYield",
          "type": "uint16"
        }
      ],
      "name": "TargetYieldChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldUnderwriter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newUnderwriter",
          "type": "address"
        }
      ],
      "name": "UnderwriterChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "activeInvoices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminFeeBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminFeeBps",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approvalDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "invoiceId",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_targetYieldBps",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_spreadBps",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_upfrontBps",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "minDaysInterestApplied",
          "type": "uint16"
        }
      ],
      "name": "approveInvoice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "approvedInvoices",
      "outputs": [
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "creditor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "validUntil",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "invoiceDueDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fundedTimestamp",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "targetYieldBps",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "spreadBps",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "upfrontBps",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "protocolFeeBps",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "adminFeeBps",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "minDaysInterestApplied",
              "type": "uint16"
            }
          ],
          "internalType": "struct IBullaFactoringV2.FeeParams",
          "name": "feeParams",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "fundedAmountGross",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fundedAmountNet",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initialFullInvoiceAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initialPaidAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiverAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetAddress",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bullaDao",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bullaFrendLend",
      "outputs": [
        {
          "internalType": "contract IBullaFrendLend",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "calculateAccruedProfits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "accruedProfits",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "calculateCapitalAccount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "invoiceId",
          "type": "uint256"
        }
      ],
      "name": "calculateKickbackAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "kickbackAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "trueInterest",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "trueSpreadAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "trueProtocolFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "trueAdminFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "calculateRealizedGainLoss",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "invoiceId",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "factorerUpfrontBps",
          "type": "uint16"
        }
      ],
      "name": "calculateTargetFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fundedAmountGross",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "adminFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetInterest",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetSpreadAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetProtocolFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "netFundedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "convertToAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "convertToShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creationTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deployedCapitalForActiveInvoicesExcludingImpaired",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositPermissions",
      "outputs": [
        {
          "internalType": "contract Permissions",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            },
            {
              "internalType": "uint8",
              "name": "hashFunction",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "size",
              "type": "uint8"
            }
          ],
          "internalType": "struct IBullaFactoringV2.Multihash",
          "name": "attachment",
          "type": "tuple"
        }
      ],
      "name": "depositWithAttachment",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factoringPermissions",
      "outputs": [
        {
          "internalType": "contract Permissions",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "invoiceId",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "factorerUpfrontBps",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "receiverAddress",
          "type": "address"
        }
      ],
      "name": "fundInvoice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFundInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "creationTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fundBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deployedCapital",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "capitalAccount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokensAvailableForRedemption",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "adminFeeBps",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "impairReserve",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "targetYieldBps",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBullaFactoringV2.FundInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "invoiceId",
          "type": "uint256"
        }
      ],
      "name": "getFundedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gracePeriodDays",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "invoiceId",
          "type": "uint256"
        }
      ],
      "name": "impairInvoice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "impairReserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "impairments",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "gainAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lossAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isImpaired",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "invoiceProviderAdapter",
      "outputs": [
        {
          "internalType": "contract IInvoiceProviderAdapterV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "maxRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "maxWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "debtor",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_targetYieldBps",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "spreadBps",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "principalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "termLength",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "numberOfPeriodsPerYear",
          "type": "uint16"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "offerLoan",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "loanOfferId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanOfferId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "onLoanOfferAccepted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "originalCreditors",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "paidInvoicesGain",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "paidInvoicesSpreadGain",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pendingLoanOffersByLoanOfferId",
      "outputs": [
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "offeredAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "principalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "termLength",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "targetYieldBps",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "spreadBps",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "upfrontBps",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "protocolFeeBps",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "adminFeeBps",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "minDaysInterestApplied",
              "type": "uint16"
            }
          ],
          "internalType": "struct IBullaFactoringV2.FeeParams",
          "name": "feeParams",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pendingLoanOffersIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pricePerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeeBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeeBps",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reconcileActivePaidInvoices",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemPermissions",
      "outputs": [
        {
          "internalType": "contract Permissions",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            },
            {
              "internalType": "uint8",
              "name": "hashFunction",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "size",
              "type": "uint8"
            }
          ],
          "internalType": "struct IBullaFactoringV2.Multihash",
          "name": "attachment",
          "type": "tuple"
        }
      ],
      "name": "redeemWithAttachment",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_newAdminFeeBps",
          "type": "uint16"
        }
      ],
      "name": "setAdminFeeBps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        }
      ],
      "name": "setApprovalDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newBullaDao",
          "type": "address"
        }
      ],
      "name": "setBullaDaoAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newDepositPermissionsAddress",
          "type": "address"
        }
      ],
      "name": "setDepositPermissions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newFactoringPermissionsAddress",
          "type": "address"
        }
      ],
      "name": "setFactoringPermissions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_days",
          "type": "uint256"
        }
      ],
      "name": "setGracePeriodDays",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_impairReserve",
          "type": "uint256"
        }
      ],
      "name": "setImpairReserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_newProtocolFeeBps",
          "type": "uint16"
        }
      ],
      "name": "setProtocolFeeBps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newRedeemPermissionsAddress",
          "type": "address"
        }
      ],
      "name": "setRedeemPermissions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_targetYieldBps",
          "type": "uint16"
        }
      ],
      "name": "setTargetYield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newUnderwriter",
          "type": "address"
        }
      ],
      "name": "setUnderwriter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "spreadGainsBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetYieldBps",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underwriter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "invoiceId",
          "type": "uint256"
        }
      ],
      "name": "unfactorInvoice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "viewPoolStatus",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "paidInvoices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "impairedInvoices",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAdminFeesAndSpreadGains",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawProtocolFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6b64c0711037a885feff822e5935c2a673aa9760552e720ee02d57144eb9fc18",
  "receipt": {
    "to": null,
    "from": "0xa933edDd60C16e11bC8858F2Ca75E82991038b4F",
    "contractAddress": "0xC1a9F48Db6E873E52848DeA2904d4Eff3c55A8A0",
    "transactionIndex": 184,
    "gasUsed": "5120361",
    "logsBloom": "0x
    "blockHash": "0x395f13b2004e2e724247e36b8cc7bbfa5593f82e92ee41993a4f7afec25a0bcb",
    "transactionHash": "0x6b64c0711037a885feff822e5935c2a673aa9760552e720ee02d57144eb9fc18",
    "logs": [
      {
        "transactionIndex": 184,
        "blockNumber": 8770121,
        "transactionHash": "0x6b64c0711037a885feff822e5935c2a673aa9760552e720ee02d57144eb9fc18",
        "address": "0xC1a9F48Db6E873E52848DeA2904d4Eff3c55A8A0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a933eddd60c16e11bc8858f2ca75e82991038b4f"
        ],
        "data": "0x",
        "logIndex": 363,
        "blockHash": "0x395f13b2004e2e724247e36b8cc7bbfa5593f82e92ee41993a4f7afec25a0bcb"
      }
    ],
    "blockNumber": 8770121,
    "cumulativeGasUsed": "22853133",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3894374b3ffd1DB45b760dD094963Dd1167e5568",
    "0x15ef2BD80BE2247C9007A35c761Ea9aDBe1063C5",
    "0x0000000000000000000000000000000000000000",
    "0x5d72984B2e1170EAA0DA4BC22B25C87729C5EBB3",
    "0xB39bF6Fcd9bd97F7616FAD7b6118Fc2E911eA1d8",
    "0x0000000000000000000000000000000000000000",
    "0x996e2beFD170CeB741b0072AE97E524Bdf410E9e",
    "0x89e03e7980c92fd81ed3a9b72f5c73fdf57e5e6d",
    25,
    50,
    "Bulla Fudorra Factoring Pool Sepolia Test",
    730,
    "Fundorra Sepolia Test Token",
    "BFT-FNDRA"
  ],
  "numDeployments": 2,
  "solcInputHash": "778af986bd67d2936abbd8f331791e64",
  "metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"contract IInvoiceProviderAdapterV2\",\"name\":\"_invoiceProviderAdapter\",\"type\":\"address\"},{\"internalType\":\"contract IBullaFrendLend\",\"name\":\"_bullaFrendLend\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underwriter\",\"type\":\"address\"},{\"internalType\":\"contract Permissions\",\"name\":\"_depositPermissions\",\"type\":\"address\"},{\"internalType\":\"contract Permissions\",\"name\":\"_redeemPermissions\",\"type\":\"address\"},{\"internalType\":\"contract Permissions\",\"name\":\"_factoringPermissions\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bullaDao\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_protocolFeeBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_adminFeeBps\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"_poolName\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"_targetYieldBps\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotBullaDao\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotBullaFrendLend\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotOriginalCreditor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotUnderwriter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeductionsExceedsRealisedGains\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxDeposit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxMint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxRedeem\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FunctionNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ImpairReserveMustBeGreater\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ImpairReserveNotSet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"InsufficientFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPercentage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvoiceAlreadyFunded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvoiceAlreadyImpairedByFund\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvoiceAlreadyPaid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvoiceCanceled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvoiceCannotBePaid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvoiceCreditorChanged\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvoiceNotApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvoiceNotImpaired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvoicePaidAmountChanged\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvoiceTokenMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LoanOfferAlreadyAccepted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LoanOfferNotExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoFeesToWithdraw\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"UnauthorizedDeposit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"UnauthorizedFactoring\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnpaidInvoice\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"paidInvoiceIds\",\"type\":\"uint256[]\"}],\"name\":\"ActivePaidInvoicesReconciled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"oldFeeBps\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"newFeeBps\",\"type\":\"uint16\"}],\"name\":\"AdminFeeBpsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bullaDao\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AdminFeesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"ApprovalDurationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"BullaDaoAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"hashFunction\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"size\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct IBullaFactoringV2.Multihash\",\"name\":\"attachment\",\"type\":\"tuple\"}],\"name\":\"DepositMadeWithAttachment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"DepositPermissionsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"FactoringPermissionsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newGracePeriodDays\",\"type\":\"uint256\"}],\"name\":\"GracePeriodDaysChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newImpairReserve\",\"type\":\"uint256\"}],\"name\":\"ImpairReserveChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"invoiceId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"targetYieldBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"spreadBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"upfrontBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"protocolFeeBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"adminFeeBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"minDaysInterestApplied\",\"type\":\"uint16\"}],\"indexed\":false,\"internalType\":\"struct IBullaFactoringV2.FeeParams\",\"name\":\"feeParams\",\"type\":\"tuple\"}],\"name\":\"InvoiceApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"invoiceId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundedAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"originalCreditor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dueDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"upfrontBps\",\"type\":\"uint16\"}],\"name\":\"InvoiceFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"invoiceId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lossAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gainAmount\",\"type\":\"uint256\"}],\"name\":\"InvoiceImpaired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"invoiceId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"kickbackAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"originalCreditor\",\"type\":\"address\"}],\"name\":\"InvoiceKickbackAmountSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"invoiceId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"trueInterest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"trueSpreadAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"trueProtocolFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"trueAdminFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundedAmountNet\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"kickbackAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"originalCreditor\",\"type\":\"address\"}],\"name\":\"InvoicePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"invoiceId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"originalCreditor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"totalRefundOrPaymentAmount\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestToCharge\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"spreadAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adminFee\",\"type\":\"uint256\"}],\"name\":\"InvoiceUnfactored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"oldProtocolFeeBps\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newProtocolFeeBps\",\"type\":\"uint16\"}],\"name\":\"ProtocolFeeBpsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bullaDao\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProtocolFeesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"RedeemPermissionsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"hashFunction\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"size\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct IBullaFactoringV2.Multihash\",\"name\":\"attachment\",\"type\":\"tuple\"}],\"name\":\"SharesRedeemedWithAttachment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SpreadGainsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newTargetYield\",\"type\":\"uint16\"}],\"name\":\"TargetYieldChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldUnderwriter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newUnderwriter\",\"type\":\"address\"}],\"name\":\"UnderwriterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeInvoices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminFeeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminFeeBps\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approvalDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"invoiceId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_targetYieldBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_spreadBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_upfrontBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"minDaysInterestApplied\",\"type\":\"uint16\"}],\"name\":\"approveInvoice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approvedInvoices\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"creditor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"invoiceDueDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundedTimestamp\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"targetYieldBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"spreadBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"upfrontBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"protocolFeeBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"adminFeeBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"minDaysInterestApplied\",\"type\":\"uint16\"}],\"internalType\":\"struct IBullaFactoringV2.FeeParams\",\"name\":\"feeParams\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"fundedAmountGross\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundedAmountNet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialFullInvoiceAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPaidAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetAddress\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bullaDao\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bullaFrendLend\",\"outputs\":[{\"internalType\":\"contract IBullaFrendLend\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateAccruedProfits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accruedProfits\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateCapitalAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"invoiceId\",\"type\":\"uint256\"}],\"name\":\"calculateKickbackAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"kickbackAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"trueInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"trueSpreadAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"trueProtocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"trueAdminFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateRealizedGainLoss\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"invoiceId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"factorerUpfrontBps\",\"type\":\"uint16\"}],\"name\":\"calculateTargetFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fundedAmountGross\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"adminFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetSpreadAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetProtocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"netFundedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployedCapitalForActiveInvoicesExcludingImpaired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositPermissions\",\"outputs\":[{\"internalType\":\"contract Permissions\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"hashFunction\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"size\",\"type\":\"uint8\"}],\"internalType\":\"struct IBullaFactoringV2.Multihash\",\"name\":\"attachment\",\"type\":\"tuple\"}],\"name\":\"depositWithAttachment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoringPermissions\",\"outputs\":[{\"internalType\":\"contract Permissions\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"invoiceId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"factorerUpfrontBps\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"}],\"name\":\"fundInvoice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"creationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deployedCapital\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"capitalAccount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensAvailableForRedemption\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"adminFeeBps\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"impairReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetYieldBps\",\"type\":\"uint256\"}],\"internalType\":\"struct IBullaFactoringV2.FundInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"invoiceId\",\"type\":\"uint256\"}],\"name\":\"getFundedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gracePeriodDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"invoiceId\",\"type\":\"uint256\"}],\"name\":\"impairInvoice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"impairReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"impairments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gainAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lossAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isImpaired\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invoiceProviderAdapter\",\"outputs\":[{\"internalType\":\"contract IInvoiceProviderAdapterV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_targetYieldBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"spreadBps\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"termLength\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"numberOfPeriodsPerYear\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"offerLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"loanOfferId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanOfferId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"onLoanOfferAccepted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"originalCreditors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"paidInvoicesGain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"paidInvoicesSpreadGain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingLoanOffersByLoanOfferId\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"offeredAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"termLength\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"targetYieldBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"spreadBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"upfrontBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"protocolFeeBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"adminFeeBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"minDaysInterestApplied\",\"type\":\"uint16\"}],\"internalType\":\"struct IBullaFactoringV2.FeeParams\",\"name\":\"feeParams\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingLoanOffersIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeBps\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reconcileActivePaidInvoices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemPermissions\",\"outputs\":[{\"internalType\":\"contract Permissions\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"hashFunction\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"size\",\"type\":\"uint8\"}],\"internalType\":\"struct IBullaFactoringV2.Multihash\",\"name\":\"attachment\",\"type\":\"tuple\"}],\"name\":\"redeemWithAttachment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newAdminFeeBps\",\"type\":\"uint16\"}],\"name\":\"setAdminFeeBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setApprovalDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newBullaDao\",\"type\":\"address\"}],\"name\":\"setBullaDaoAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newDepositPermissionsAddress\",\"type\":\"address\"}],\"name\":\"setDepositPermissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newFactoringPermissionsAddress\",\"type\":\"address\"}],\"name\":\"setFactoringPermissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"setGracePeriodDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_impairReserve\",\"type\":\"uint256\"}],\"name\":\"setImpairReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newProtocolFeeBps\",\"type\":\"uint16\"}],\"name\":\"setProtocolFeeBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRedeemPermissionsAddress\",\"type\":\"address\"}],\"name\":\"setRedeemPermissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_targetYieldBps\",\"type\":\"uint16\"}],\"name\":\"setTargetYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newUnderwriter\",\"type\":\"address\"}],\"name\":\"setUnderwriter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spreadGainsBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetYieldBps\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underwriter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"invoiceId\",\"type\":\"uint256\"}],\"name\":\"unfactorInvoice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewPoolStatus\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"paidInvoices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"impairedInvoices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAdminFeesAndSpreadGains\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"@solidoracle\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC4626ExceededMaxDeposit(address,uint256,uint256)\":[{\"details\":\"Attempted to deposit more assets than the max amount for `receiver`.\"}],\"ERC4626ExceededMaxMint(address,uint256,uint256)\":[{\"details\":\"Attempted to mint more shares than the max amount for `receiver`.\"}],\"ERC4626ExceededMaxRedeem(address,uint256,uint256)\":[{\"details\":\"Attempted to redeem more shares than the max amount for `receiver`.\"}],\"ERC4626ExceededMaxWithdraw(address,uint256,uint256)\":[{\"details\":\"Attempted to withdraw more assets than the max amount for `receiver`.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"approveInvoice(uint256,uint16,uint16,uint16,uint16)\":{\"params\":{\"_spreadBps\":\"The spread in basis points to add on top of target yield\",\"_targetYieldBps\":\"The target yield in basis points\",\"_upfrontBps\":\"The maximum upfront percentage the factorer can request\",\"invoiceId\":\"The ID of the invoice to approve\",\"minDaysInterestApplied\":\"The minimum number of days interest must be applied\"}},\"asset()\":{\"details\":\"See {IERC4626-asset}. \"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"calculateAccruedProfits()\":{\"details\":\"Iterates through all active invoices, calculates interest for each and sums the net accrued interest\",\"returns\":{\"accruedProfits\":\"The total net accrued profits across all active invoices\"}},\"calculateCapitalAccount()\":{\"returns\":{\"_0\":\"The calculated capital account balance\"}},\"calculateKickbackAmount(uint256)\":{\"params\":{\"invoiceId\":\"The ID of the invoice for which to calculate the kickback amount\"},\"returns\":{\"kickbackAmount\":\"The calculated kickback amount\",\"trueAdminFee\":\"The true admin fee amount\",\"trueInterest\":\"The true interest amount\",\"trueProtocolFee\":\"The true protocol fee amount\",\"trueSpreadAmount\":\"The true spread amount\"}},\"calculateRealizedGainLoss()\":{\"returns\":{\"_0\":\"The total realized gain adjusted for losses\"}},\"calculateTargetFees(uint256,uint16)\":{\"params\":{\"factorerUpfrontBps\":\"The upfront bps specified by the factorer\",\"invoiceId\":\"The ID of the invoice for which to calculate the fees\"},\"returns\":{\"adminFee\":\"The target calculated admin fee\",\"fundedAmountGross\":\"The gross amount to be funded to the factorer\",\"netFundedAmount\":\"The net amount that will be funded to the factorer after deducting fees\",\"targetInterest\":\"The calculated interest fee\",\"targetProtocolFee\":\"The calculated protocol fee\",\"targetSpreadAmount\":\"The calculated spread amount\"}},\"constructor\":{\"params\":{\"_asset\":\"underlying supported stablecoin asset for deposit \",\"_invoiceProviderAdapter\":\"adapter for invoice provider\",\"_underwriter\":\"address of the underwriter\"}},\"convertToAssets(uint256)\":{\"details\":\"See {IERC4626-convertToAssets}. \"},\"convertToShares(uint256)\":{\"details\":\"See {IERC4626-convertToShares}. \"},\"decimals()\":{\"returns\":{\"_0\":\"The number of decimals for this token\"}},\"deployedCapitalForActiveInvoicesExcludingImpaired()\":{\"returns\":{\"_0\":\"The total funded amount for all active invoices\"}},\"deposit(uint256,address)\":{\"params\":{\"assets\":\"The amount of assets to deposit\",\"receiver\":\"The address to receive the fund shares\"},\"returns\":{\"_0\":\"The number of shares issued for the deposit\"}},\"depositWithAttachment(uint256,address,(bytes32,uint8,uint8))\":{\"params\":{\"assets\":\"The amount of assets to deposit\",\"attachment\":\"The attachment data for the deposit\",\"receiver\":\"The address to receive the fund shares\"},\"returns\":{\"_0\":\"The number of shares issued for the deposit\"}},\"fundInvoice(uint256,uint16,address)\":{\"details\":\"No checks needed for the creditor, as transferFrom will revert unless it gets executed by the nft owner (i.e. claim creditor)\",\"params\":{\"factorerUpfrontBps\":\"factorer specified upfront bps\",\"invoiceId\":\"The ID of the invoice to fund\",\"receiverAddress\":\"Address to receive the funds, if address(0) then funds go to msg.sender\"}},\"getFundInfo()\":{\"returns\":{\"_0\":\"FundInfo The fund information\"}},\"impairInvoice(uint256)\":{\"params\":{\"invoiceId\":\"The ID of the invoice to impair\"}},\"maxDeposit(address)\":{\"details\":\"See {IERC4626-maxDeposit}. \"},\"maxMint(address)\":{\"details\":\"See {IERC4626-maxMint}. \"},\"maxRedeem()\":{\"returns\":{\"_0\":\"The maximum number of shares that can be redeemed\"}},\"maxRedeem(address)\":{\"params\":{\"_owner\":\"The owner of the shares being redeemed\"},\"returns\":{\"_0\":\"The maximum number of shares that can be redeemed\"}},\"maxWithdraw(address)\":{\"params\":{\"_owner\":\"The owner of the assets to be withdrawn\"},\"returns\":{\"_0\":\"The maximum number of assets that can be withdrawn\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"previewDeposit(uint256)\":{\"details\":\"See {IERC4626-previewDeposit}. \"},\"previewMint(uint256)\":{\"details\":\"See {IERC4626-previewMint}. \"},\"previewRedeem(uint256)\":{\"details\":\"See {IERC4626-previewRedeem}. \"},\"previewWithdraw(uint256)\":{\"details\":\"See {IERC4626-previewWithdraw}. \"},\"pricePerShare()\":{\"returns\":{\"_0\":\"The current price per share, scaled to the underlying asset's decimal places\"}},\"reconcileActivePaidInvoices()\":{\"details\":\"This function should be called when viewPoolStatus returns some updates, to ensure accurate accounting\"},\"redeem(uint256,address,address)\":{\"params\":{\"_owner\":\"The owner of the shares being redeemed\",\"receiver\":\"The address to receive the assets\",\"shares\":\"The number of shares to redeem\"},\"returns\":{\"_0\":\"The number of shares redeemed\"}},\"redeemWithAttachment(uint256,address,address,(bytes32,uint8,uint8))\":{\"params\":{\"_owner\":\"The owner of the shares being redeemed\",\"attachment\":\"The attachment data for the redemption\",\"receiver\":\"The address to receive the redeemed assets\",\"shares\":\"The number of shares to redeem\"},\"returns\":{\"_0\":\"The amount of assets redeemed\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setAdminFeeBps(uint16)\":{\"params\":{\"_newAdminFeeBps\":\"The new admin fee in basis points\"}},\"setApprovalDuration(uint256)\":{\"details\":\"This function can only be called by the contract owner\",\"params\":{\"_duration\":\"The new duration in seconds\"}},\"setBullaDaoAddress(address)\":{\"params\":{\"_newBullaDao\":\"The new address for the Bulla DAO\"}},\"setDepositPermissions(address)\":{\"params\":{\"_newDepositPermissionsAddress\":\"The new deposit permissions contract address\"}},\"setFactoringPermissions(address)\":{\"params\":{\"_newFactoringPermissionsAddress\":\"The address of the new factoring permissions contract\"}},\"setGracePeriodDays(uint256)\":{\"details\":\"This function can only be called by the contract owner\",\"params\":{\"_days\":\"The number of days for the grace period\"}},\"setImpairReserve(uint256)\":{\"params\":{\"_impairReserve\":\"The new impair reserve amount\"}},\"setProtocolFeeBps(uint16)\":{\"params\":{\"_newProtocolFeeBps\":\"The new protocol fee in basis points\"}},\"setRedeemPermissions(address)\":{\"params\":{\"_newRedeemPermissionsAddress\":\"The new redeem permissions contract address\"}},\"setTargetYield(uint16)\":{\"params\":{\"_targetYieldBps\":\"The new target yield in basis points\"}},\"setUnderwriter(address)\":{\"params\":{\"_newUnderwriter\":\"The address of the new underwriter\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalAssets()\":{\"returns\":{\"_0\":\"The amount of assets available for withdrawal or new investments, excluding funds allocated to active invoices\"}},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unfactorInvoice(uint256)\":{\"params\":{\"invoiceId\":\"The ID of the invoice to unfactor\"}},\"viewPoolStatus()\":{\"returns\":{\"impairedInvoices\":\"An array of impaired invoice IDs\",\"paidInvoices\":\"An array of paid invoice IDs\"}},\"withdraw(uint256,address,address)\":{\"params\":{\"_owner\":\"The address who owns the shares to redeem\",\"assets\":\"The amount of assets to withdraw\",\"receiver\":\"The address to receive the assets\"},\"returns\":{\"_0\":\"The number of shares redeemed\"}}},\"title\":\"Bulla Factoring Fund\",\"version\":1},\"userdoc\":{\"errors\":{\"CallerNotUnderwriter()\":[{\"notice\":\"Errors\"}]},\"kind\":\"user\",\"methods\":{\"activeInvoices(uint256)\":{\"notice\":\"Array to hold the IDs of all active invoices\"},\"adminFeeBalance()\":{\"notice\":\"Accumulated admin fee balance\"},\"adminFeeBps()\":{\"notice\":\"Admin fee in basis points\"},\"approvalDuration()\":{\"notice\":\"The duration of invoice approval before it expires\"},\"approveInvoice(uint256,uint16,uint16,uint16,uint16)\":{\"notice\":\"Approves an invoice for funding, can only be called by the underwriter\"},\"approvedInvoices(uint256)\":{\"notice\":\"Mapping from invoice ID to invoice approval details\"},\"assetAddress()\":{\"notice\":\"Address of the underlying asset token (e.g., USDC)\"},\"bullaDao()\":{\"notice\":\"Address of the Bulla DAO, a trusted multisig\"},\"bullaFrendLend()\":{\"notice\":\"Address of the bulla frendlend contract\"},\"calculateAccruedProfits()\":{\"notice\":\"Calculates the total accrued profits from all active invoices\"},\"calculateCapitalAccount()\":{\"notice\":\"Calculates the capital account balance, including deposits, withdrawals, and realized gains/losses\"},\"calculateKickbackAmount(uint256)\":{\"notice\":\"Calculates the kickback amount for a given funded amount allowing early payment\"},\"calculateRealizedGainLoss()\":{\"notice\":\"Calculates the total realized gain or loss from paid and impaired invoices\"},\"calculateTargetFees(uint256,uint16)\":{\"notice\":\"Calculates the true fees and net funded amount for a given invoice and factorer's upfront bps, annualised\"},\"creationTimestamp()\":{\"notice\":\"Timestamp of the fund's creation\"},\"decimals()\":{\"notice\":\"Returns the number of decimals the token uses, same as the underlying asset\"},\"deployedCapitalForActiveInvoicesExcludingImpaired()\":{\"notice\":\"Calculates the total funded amount for all active invoices.\"},\"deposit(uint256,address)\":{\"notice\":\"Helper function to handle the logic of depositing assets in exchange for fund shares\"},\"depositPermissions()\":{\"notice\":\"Permissions contracts for deposit and factoring\"},\"depositWithAttachment(uint256,address,(bytes32,uint8,uint8))\":{\"notice\":\"Allows for the deposit of assets in exchange for fund shares with an attachment\"},\"fundInvoice(uint256,uint16,address)\":{\"notice\":\"Funds a single invoice, transferring the funded amount from the fund to the caller and transferring the invoice NFT to the fund\"},\"getFundInfo()\":{\"notice\":\"Retrieves the fund information\"},\"gracePeriodDays()\":{\"notice\":\"Grace period for invoices\"},\"impairInvoice(uint256)\":{\"notice\":\"Impairs an invoice, using the impairment reserve to cover the loss\"},\"impairReserve()\":{\"notice\":\"Reserve amount for impairment\"},\"impairments(uint256)\":{\"notice\":\"Mapping from invoice ID to impairment details\"},\"invoiceProviderAdapter()\":{\"notice\":\"Address of the invoice provider contract adapter\"},\"maxRedeem()\":{\"notice\":\"Calculates the maximum amount of shares that can be redeemed based on the total assets in the fund\"},\"maxRedeem(address)\":{\"notice\":\"Calculates the maximum amount of shares that can be redeemed based on the total assets in the fund\"},\"maxWithdraw(address)\":{\"notice\":\"Calculates the maximum amount of assets that can be withdrawn\"},\"originalCreditors(uint256)\":{\"notice\":\"Mapping from invoice ID to original creditor's address\"},\"paidInvoicesGain(uint256)\":{\"notice\":\"Mapping of paid invoices ID to track gains/losses\"},\"paidInvoicesSpreadGain(uint256)\":{\"notice\":\"Mapping of paid invoices ID to track spread gains, that belong to pool owner and are not part of the pool's yield\"},\"pendingLoanOffersByLoanOfferId(uint256)\":{\"notice\":\"Mapping from loan offer ID to pending loan offer details\"},\"pendingLoanOffersIds(uint256)\":{\"notice\":\"Array to track IDs of pending loan offers\"},\"poolName()\":{\"notice\":\"Name of the factoring pool\"},\"pricePerShare()\":{\"notice\":\"Calculates the current price per share of the fund, \"},\"protocolFeeBalance()\":{\"notice\":\"Accumulated protocol fee balance\"},\"protocolFeeBps()\":{\"notice\":\"Protocol fee in basis points\"},\"reconcileActivePaidInvoices()\":{\"notice\":\"Reconciles the list of active invoices with those that have been paid, updating the fund's records\"},\"redeem(uint256,address,address)\":{\"notice\":\"Helper function to handle the logic of redeeming shares in exchange for assets\"},\"redeemWithAttachment(uint256,address,address,(bytes32,uint8,uint8))\":{\"notice\":\"Redeems shares for underlying assets with an attachment, transferring the assets to the specified receiver\"},\"setAdminFeeBps(uint16)\":{\"notice\":\"Sets the admin fee in basis points\"},\"setApprovalDuration(uint256)\":{\"notice\":\"Sets the duration for which invoice approvals are valid\"},\"setBullaDaoAddress(address)\":{\"notice\":\"Updates the Bulla DAO address\"},\"setDepositPermissions(address)\":{\"notice\":\"Updates the deposit permissions contract\"},\"setFactoringPermissions(address)\":{\"notice\":\"Updates the factoring permissions contract\"},\"setGracePeriodDays(uint256)\":{\"notice\":\"Sets the grace period in days for determining if an invoice is impaired\"},\"setImpairReserve(uint256)\":{\"notice\":\"Sets the impair reserve amount\"},\"setProtocolFeeBps(uint16)\":{\"notice\":\"Updates the protocol fee in basis points (bps)\"},\"setRedeemPermissions(address)\":{\"notice\":\"Updates the redeem permissions contract\"},\"setTargetYield(uint16)\":{\"notice\":\"Sets the target yield in basis points\"},\"setUnderwriter(address)\":{\"notice\":\"Sets a new underwriter for the contract\"},\"spreadGainsBalance()\":{\"notice\":\"Accumulated spread gains balance\"},\"targetYieldBps()\":{\"notice\":\"Target yield in basis points\"},\"totalAssets()\":{\"notice\":\"Calculates the available assets in the fund net of fees and impair reserve\"},\"underwriter()\":{\"notice\":\"Address of the underwriter, trusted to approve invoices\"},\"unfactorInvoice(uint256)\":{\"notice\":\"Unfactors an invoice, returning the invoice NFT to the original creditor and refunding the funded amount\"},\"viewPoolStatus()\":{\"notice\":\"Provides a view of the pool's status, listing paid and impaired invoices, to be called by Gelato or alike\"},\"withdraw(uint256,address,address)\":{\"notice\":\"Helper function to handle the logic of withdrawing assets in exchange for fund shares\"},\"withdrawAdminFeesAndSpreadGains()\":{\"notice\":\"Allows the Pool Owner to withdraw accumulated admin fees and spread gains.\"},\"withdrawProtocolFees()\":{\"notice\":\"Allows the Bulla DAO to withdraw accumulated protocol fees.\"}},\"notice\":\"Bulla Factoring Fund is a ERC4626 compatible fund that allows for the factoring of invoices\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BullaFactoring.sol\":\"BullaFactoringV2\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@bulla/contracts-v2/src/interfaces/IBullaFrendLend.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.30;\\n\\nimport \\\"../types/Types.sol\\\";\\nimport \\\"../libraries/CompoundInterestLib.sol\\\";\\n\\n// Forward declarations to avoid import cycles\\nstruct LoanDetails {\\n    uint256 acceptedAt;\\n    InterestConfig interestConfig;\\n    InterestComputationState interestComputationState;\\n    bool isProtocolFeeExempt;\\n}\\n\\nstruct LoanRequestParams {\\n    uint256 termLength;\\n    InterestConfig interestConfig;\\n    uint256 loanAmount;\\n    address creditor;\\n    address debtor;\\n    string description;\\n    address token;\\n    uint256 impairmentGracePeriod;\\n    uint256 expiresAt; // timestamp when the offer expires (0 = no expiry)\\n    address callbackContract; // contract to call when loan is accepted (0 = no callback)\\n    bytes4 callbackSelector; // function selector to call on callback contract\\n}\\n\\nstruct LoanOffer {\\n    LoanRequestParams params;\\n    bool requestedByCreditor;\\n}\\n\\nstruct Loan {\\n    uint256 claimAmount;\\n    uint256 paidAmount;\\n    Status status;\\n    ClaimBinding binding;\\n    bool payerReceivesClaimOnPayment;\\n    address debtor;\\n    address creditor;\\n    address token;\\n    address controller;\\n    uint256 dueBy;\\n    uint256 acceptedAt;\\n    InterestConfig interestConfig;\\n    InterestComputationState interestComputationState;\\n}\\n\\n/**\\n * @title IBullaFrendLend\\n * @notice Interface for BullaFrendLend contract functionality\\n */\\ninterface IBullaFrendLend {\\n    // View functions\\n    function getTotalAmountDue(uint256 claimId) external view returns (uint256 remainingPrincipal, uint256 interest);\\n    function getLoan(uint256 claimId) external view returns (Loan memory);\\n\\n    // Offer functions\\n    function offerLoanWithMetadata(LoanRequestParams calldata offer, ClaimMetadata calldata metadata)\\n        external\\n        returns (uint256);\\n    function offerLoan(LoanRequestParams calldata offer) external returns (uint256);\\n\\n    // Core functions\\n    function rejectLoanOffer(uint256 offerId) external;\\n    function acceptLoan(uint256 offerId) external payable returns (uint256);\\n    function acceptLoanWithReceiver(uint256 offerId, address receiver) external payable returns (uint256);\\n    function batchAcceptLoans(uint256[] calldata offerIds) external payable;\\n    function payLoan(uint256 claimId, uint256 paymentAmount) external;\\n    function impairLoan(uint256 claimId) external;\\n    function markLoanAsPaid(uint256 claimId) external;\\n\\n    // Admin functions\\n    function withdrawAllFees() external;\\n    function setProtocolFee(uint16 _protocolFeeBPS) external;\\n\\n    // State variables\\n    function admin() external view returns (address);\\n\\n    function loanOfferCount() external view returns (uint256);\\n    function protocolFeeBPS() external view returns (uint16);\\n    function getLoanOffer(uint256) external view returns (LoanOffer memory);\\n    function getLoanOfferMetadata(uint256) external view returns (ClaimMetadata memory);\\n    function protocolFeesByToken(address token) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xdc963f348b34ffcd0c9781cb0ef3cd8e6585a4ddbf458c8551862ba24cfbf448\",\"license\":\"GPL-2.0-or-later\"},\"@bulla/contracts-v2/src/libraries/CompoundInterestLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.30;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nstruct InterestConfig {\\n    uint16 interestRateBps; // this is the NET interest rate, not including protocol fees\\n    uint16 numberOfPeriodsPerYear;\\n}\\n\\nstruct InterestComputationState {\\n    uint256 accruedInterest;\\n    uint256 latestPeriodNumber;\\n    uint16 protocolFeeBps;\\n    uint256 totalGrossInterestPaid;\\n}\\n\\nuint16 constant MAX_DAYS_PER_YEAR = 365;\\nuint256 constant SECONDS_PER_YEAR = 31536000;\\nuint16 constant MAX_BPS = 10_000;\\nuint256 constant ONE = 10 ** 18;\\n\\nlibrary CompoundInterestLib {\\n    error InvalidPeriodsPerYear();\\n\\n    /**\\n     * @notice Validates interest configuration\\n     * @param config The interest configuration to validate\\n     */\\n    function validateInterestConfig(InterestConfig memory config) public pure {\\n        // Skip validation if interest is disabled\\n        if (config.interestRateBps == 0) {\\n            return;\\n        }\\n\\n        if (config.numberOfPeriodsPerYear == 0 || config.numberOfPeriodsPerYear > MAX_DAYS_PER_YEAR) {\\n            revert InvalidPeriodsPerYear();\\n        }\\n    }\\n\\n    /**\\n     * @notice Computes the interest for a given principal, dueBy date, and interest configuration\\n     * @dev An implication is made that if remainingPrincipal is 0, there cannot be any interest accrued\\n     * @dev The protocolFeeBps is added to the interestRateBps to get the gross interest rate\\n     * @param state The current interest computation state\\n     * @param remainingPrincipal The remaining principal to compute interest for\\n     * @param dueBy The dueBy date\\n     * @param config The interest configuration\\n     */\\n    function computeInterest(\\n        uint256 remainingPrincipal,\\n        uint256 dueBy,\\n        InterestConfig memory config,\\n        InterestComputationState memory state\\n    ) public view returns (InterestComputationState memory) {\\n        uint256 currentTimestamp = block.timestamp;\\n\\n        if (\\n            config.interestRateBps == 0 || config.numberOfPeriodsPerYear == 0\\n                || config.numberOfPeriodsPerYear > MAX_DAYS_PER_YEAR || dueBy == 0 || dueBy >= currentTimestamp\\n                || remainingPrincipal == 0\\n        ) {\\n            return state;\\n        }\\n\\n        uint256 numberOfPeriodsPerYear = uint256(config.numberOfPeriodsPerYear);\\n\\n        // Calculate the number of periods since the dueBy date\\n        uint256 secondsPerPeriod = SECONDS_PER_YEAR / numberOfPeriodsPerYear;\\n        uint256 currentPeriodNumber = currentTimestamp > dueBy ? (currentTimestamp - dueBy) / secondsPerPeriod : 0;\\n\\n        uint256 periodsElapsed =\\n            currentPeriodNumber > state.latestPeriodNumber ? currentPeriodNumber - state.latestPeriodNumber : 0;\\n        // If no complete period has elapsed, return the previously accrued interest\\n        if (periodsElapsed == 0) {\\n            return state;\\n        }\\n\\n        // Calculate interest rate per period scaled to 18 decimal places\\n        uint256 ratePerPeriodScaled =\\n            Math.mulDiv(uint256(config.interestRateBps + state.protocolFeeBps), ONE, numberOfPeriodsPerYear * MAX_BPS);\\n\\n        // Calculate compound factor: (1 + r)^n\\n        // Using the formula: x^n = exp(n * ln(x))\\n        uint256 compoundFactor = _calculateCompoundFactor(ONE + ratePerPeriodScaled, periodsElapsed);\\n\\n        // Apply compound factor to current total amount\\n        uint256 totalWithInterest = Math.mulDiv(remainingPrincipal + state.accruedInterest, compoundFactor, ONE);\\n\\n        // remove the principal from the total amount to get the current total accrued interest\\n        uint256 totalAccruedInterest = totalWithInterest - remainingPrincipal;\\n\\n        // Add to previously accrued interest\\n        return InterestComputationState({\\n            accruedInterest: totalAccruedInterest,\\n            latestPeriodNumber: currentPeriodNumber,\\n            protocolFeeBps: state.protocolFeeBps,\\n            totalGrossInterestPaid: state.totalGrossInterestPaid\\n        });\\n    }\\n\\n    /**\\n     * @dev Calculate (1 + r)^n using binomial approximation\\n     * For practical interest rates, this approximation is sufficient\\n     * For better precision with larger rates, use a more sophisticated algorithm\\n     */\\n    function _calculateCompoundFactor(uint256 base, uint256 exponent) private pure returns (uint256 result) {\\n        result = ONE;\\n\\n        while (exponent > 0) {\\n            if (exponent % 2 == 1) {\\n                result = (result * base) / ONE;\\n            }\\n            base = (base * base) / ONE;\\n            exponent /= 2;\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x17404ebe066e3bd0100aea821392555bf928484d8fe7a1c21e16907e791b8846\",\"license\":\"BUSL-1.1\"},\"@bulla/contracts-v2/src/types/Types.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.30;\\n\\n////// ENUMS //////\\n\\nenum Status {\\n    Pending, // default status is pending\\n    Repaying, // status for a claim where 0 < paid amount < claim amount\\n    Paid, // status for a claim that is fully paid\\n    Rejected, // status reserved for the debtor to cancel a claim\\n    Rescinded, // status reserved for the creditor to cancel a claim\\n    Impaired // status reserved for the creditor to mark a claim as impaired\\n\\n}\\n\\nenum ClaimBinding {\\n    Unbound, // default binding is unbound\\n    BindingPending, // a way for the creditor to signal that they want a debtor to accept a claim\\n    Bound // bound status is when the debtor has accepted the claim\\n\\n}\\n\\nenum CreateClaimApprovalType {\\n    Unapproved,\\n    CreditorOnly, // an addresss is allowed only to create claims where the user is the creditor\\n    DebtorOnly, // an addresss is allowed only to create claims where the user is the debtor\\n    Approved // an addresss is allowed to create any kind of claim\\n\\n}\\n\\nenum PayClaimApprovalType {\\n    Unapproved,\\n    IsApprovedForSpecific,\\n    IsApprovedForAll\\n}\\n\\nenum LockState {\\n    Unlocked,\\n    NoNewClaims, // an intermediary state where we allow users to pay, reject, rescind, and accept claims, but disallow new claims to be made\\n    Locked\\n}\\n\\n////// STRUCTS //////\\n\\nstruct CreateClaimParams {\\n    address creditor;\\n    address debtor;\\n    uint256 claimAmount;\\n    string description;\\n    address token;\\n    ClaimBinding binding;\\n    bool payerReceivesClaimOnPayment;\\n    uint256 dueBy;\\n    uint256 impairmentGracePeriod; // seconds after dueBy that claim cannot be impaired\\n}\\n\\nstruct ClaimMetadata {\\n    string tokenURI;\\n    string attachmentURI;\\n}\\n\\nstruct ClaimStorage {\\n    uint128 claimAmount;\\n    uint128 paidAmount;\\n    address originalCreditor;\\n    address debtor;\\n    address token; // the token address that the claim is denominated in. NOTE: if this token is address(0), we treat this as a native token\\n    address controller;\\n    Status status;\\n    ClaimBinding binding; // the debtor can allow themselves to be bound to a claim, which makes a claim unrejectable\\n    bool payerReceivesClaimOnPayment; // an optional flag which allows the token to be transferred to the payer, acting as a \\\"receipt NFT\\\"\\n    uint40 dueBy; // when the claim is due (0 means no due date)\\n    uint40 impairmentGracePeriod; // seconds after dueBy that claim cannot be impaired\\n} // takes 5 storage slots\\n\\n// a cheaper struct for working / manipulating memory (unpacked is cheapter)\\nstruct Claim {\\n    uint256 claimAmount;\\n    uint256 paidAmount;\\n    uint256 dueBy;\\n    uint256 impairmentGracePeriod;\\n    address originalCreditor;\\n    address debtor;\\n    address creditor;\\n    address token;\\n    address controller;\\n    Status status;\\n    ClaimBinding binding;\\n    bool payerReceivesClaimOnPayment;\\n}\\n\\n////// APPROVALS //////\\n\\nstruct CreateClaimApproval {\\n    bool isBindingAllowed;\\n    CreateClaimApprovalType approvalType;\\n    uint64 approvalCount; // the amount the contract can call this function for the user, type(uint64).max implies unlimited\\n    uint64 nonce; // the nonce for the approval - only incremented per approval update.\\n}\\n\\nstruct ClaimPaymentApprovalParam {\\n    uint256 claimId;\\n    uint256 approvalDeadline;\\n    uint256 approvedAmount;\\n}\\n\\n// a compact 1 slot representation of a claim payment approval\\nstruct ClaimPaymentApproval {\\n    uint88 claimId;\\n    uint40 approvalDeadline;\\n    uint128 approvedAmount;\\n}\\n\\nstruct PayClaimApproval {\\n    PayClaimApprovalType approvalType;\\n    uint40 approvalDeadline;\\n    uint64 nonce;\\n    ClaimPaymentApproval[] claimApprovals;\\n}\\n\\nstruct UpdateBindingApproval {\\n    uint64 approvalCount;\\n    uint64 nonce;\\n}\\n\\nstruct CancelClaimApproval {\\n    uint64 approvalCount;\\n    uint64 nonce;\\n}\\n\\nstruct ImpairClaimApproval {\\n    uint64 approvalCount;\\n    uint64 nonce;\\n}\\n\\nstruct MarkAsPaidApproval {\\n    uint64 approvalCount;\\n    uint64 nonce;\\n}\\n\\nstruct Approvals {\\n    CreateClaimApproval createClaim;\\n    PayClaimApproval payClaim;\\n    UpdateBindingApproval updateBinding;\\n    CancelClaimApproval cancelClaim;\\n    ImpairClaimApproval impairClaim;\\n    MarkAsPaidApproval markAsPaid;\\n}\\n\",\"keccak256\":\"0xa5e39d5e089dd83ccd15c8e967e4d266a69a15cf9ee3d5b7555a2bbe435151a4\",\"license\":\"BUSL-1.1\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC-4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x7b6690c21e94a45b825631a12581b40a753ea827de5ac9127a6b5833411317f0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC-20\\n * applications.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * Both values are immutable: they can only be set once during construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     *\\n     * ```solidity\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance < type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x41f6b3b9e030561e7896dbef372b499cc8d418a80c3884a4d65a68f2fdc7493a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/extensions/ERC4626.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20, IERC20Metadata, ERC20} from \\\"../ERC20.sol\\\";\\nimport {SafeERC20} from \\\"../utils/SafeERC20.sol\\\";\\nimport {IERC4626} from \\\"../../../interfaces/IERC4626.sol\\\";\\nimport {Math} from \\\"../../../utils/math/Math.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC-4626 \\\"Tokenized Vault Standard\\\" as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * This extension allows the minting and burning of \\\"shares\\\" (represented using the ERC-20 inheritance) in exchange for\\n * underlying \\\"assets\\\" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends\\n * the ERC-20 standard. Any additional extensions included along it would affect the \\\"shares\\\" token represented by this\\n * contract and not the \\\"assets\\\" token which is an independent contract.\\n *\\n * [CAUTION]\\n * ====\\n * In empty (or nearly empty) ERC-4626 vaults, deposits are at high risk of being stolen through frontrunning\\n * with a \\\"donation\\\" to the vault that inflates the price of a share. This is variously known as a donation or inflation\\n * attack and is essentially a problem of slippage. Vault deployers can protect against this attack by making an initial\\n * deposit of a non-trivial amount of the asset, such that price manipulation becomes infeasible. Withdrawals may\\n * similarly be affected by slippage. Users can protect against this attack as well as unexpected slippage in general by\\n * verifying the amount received is as expected, using a wrapper that performs these checks such as\\n * https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router].\\n *\\n * Since v4.9, this implementation introduces configurable virtual assets and shares to help developers mitigate that risk.\\n * The `_decimalsOffset()` corresponds to an offset in the decimal representation between the underlying asset's decimals\\n * and the vault decimals. This offset also determines the rate of virtual shares to virtual assets in the vault, which\\n * itself determines the initial exchange rate. While not fully preventing the attack, analysis shows that the default\\n * offset (0) makes it non-profitable even if an attacker is able to capture value from multiple user deposits, as a result\\n * of the value being captured by the virtual shares (out of the attacker's donation) matching the attacker's expected gains.\\n * With a larger offset, the attack becomes orders of magnitude more expensive than it is profitable. More details about the\\n * underlying math can be found xref:ROOT:erc4626.adoc#inflation-attack[here].\\n *\\n * The drawback of this approach is that the virtual shares do capture (a very small) part of the value being accrued\\n * to the vault. Also, if the vault experiences losses, the users try to exit the vault, the virtual shares and assets\\n * will cause the first user to exit to experience reduced losses in detriment to the last users that will experience\\n * bigger losses. Developers willing to revert back to the pre-v4.9 behavior just need to override the\\n * `_convertToShares` and `_convertToAssets` functions.\\n *\\n * To learn more, check out our xref:ROOT:erc4626.adoc[ERC-4626 guide].\\n * ====\\n */\\nabstract contract ERC4626 is ERC20, IERC4626 {\\n    using Math for uint256;\\n\\n    IERC20 private immutable _asset;\\n    uint8 private immutable _underlyingDecimals;\\n\\n    /**\\n     * @dev Attempted to deposit more assets than the max amount for `receiver`.\\n     */\\n    error ERC4626ExceededMaxDeposit(address receiver, uint256 assets, uint256 max);\\n\\n    /**\\n     * @dev Attempted to mint more shares than the max amount for `receiver`.\\n     */\\n    error ERC4626ExceededMaxMint(address receiver, uint256 shares, uint256 max);\\n\\n    /**\\n     * @dev Attempted to withdraw more assets than the max amount for `receiver`.\\n     */\\n    error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);\\n\\n    /**\\n     * @dev Attempted to redeem more shares than the max amount for `receiver`.\\n     */\\n    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\\n\\n    /**\\n     * @dev Set the underlying asset contract. This must be an ERC20-compatible contract (ERC-20 or ERC-777).\\n     */\\n    constructor(IERC20 asset_) {\\n        (bool success, uint8 assetDecimals) = _tryGetAssetDecimals(asset_);\\n        _underlyingDecimals = success ? assetDecimals : 18;\\n        _asset = asset_;\\n    }\\n\\n    /**\\n     * @dev Attempts to fetch the asset decimals. A return value of false indicates that the attempt failed in some way.\\n     */\\n    function _tryGetAssetDecimals(IERC20 asset_) private view returns (bool ok, uint8 assetDecimals) {\\n        (bool success, bytes memory encodedDecimals) = address(asset_).staticcall(\\n            abi.encodeCall(IERC20Metadata.decimals, ())\\n        );\\n        if (success && encodedDecimals.length >= 32) {\\n            uint256 returnedDecimals = abi.decode(encodedDecimals, (uint256));\\n            if (returnedDecimals <= type(uint8).max) {\\n                return (true, uint8(returnedDecimals));\\n            }\\n        }\\n        return (false, 0);\\n    }\\n\\n    /**\\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This\\n     * \\\"original\\\" value is cached during construction of the vault contract. If this read operation fails (e.g., the\\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals.\\n     *\\n     * See {IERC20Metadata-decimals}.\\n     */\\n    function decimals() public view virtual override(IERC20Metadata, ERC20) returns (uint8) {\\n        return _underlyingDecimals + _decimalsOffset();\\n    }\\n\\n    /** @dev See {IERC4626-asset}. */\\n    function asset() public view virtual returns (address) {\\n        return address(_asset);\\n    }\\n\\n    /** @dev See {IERC4626-totalAssets}. */\\n    function totalAssets() public view virtual returns (uint256) {\\n        return IERC20(asset()).balanceOf(address(this));\\n    }\\n\\n    /** @dev See {IERC4626-convertToShares}. */\\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\\n        return _convertToShares(assets, Math.Rounding.Floor);\\n    }\\n\\n    /** @dev See {IERC4626-convertToAssets}. */\\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\\n        return _convertToAssets(shares, Math.Rounding.Floor);\\n    }\\n\\n    /** @dev See {IERC4626-maxDeposit}. */\\n    function maxDeposit(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    /** @dev See {IERC4626-maxMint}. */\\n    function maxMint(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    /** @dev See {IERC4626-maxWithdraw}. */\\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Floor);\\n    }\\n\\n    /** @dev See {IERC4626-maxRedeem}. */\\n    function maxRedeem(address owner) public view virtual returns (uint256) {\\n        return balanceOf(owner);\\n    }\\n\\n    /** @dev See {IERC4626-previewDeposit}. */\\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\\n        return _convertToShares(assets, Math.Rounding.Floor);\\n    }\\n\\n    /** @dev See {IERC4626-previewMint}. */\\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\\n        return _convertToAssets(shares, Math.Rounding.Ceil);\\n    }\\n\\n    /** @dev See {IERC4626-previewWithdraw}. */\\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\\n        return _convertToShares(assets, Math.Rounding.Ceil);\\n    }\\n\\n    /** @dev See {IERC4626-previewRedeem}. */\\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\\n        return _convertToAssets(shares, Math.Rounding.Floor);\\n    }\\n\\n    /** @dev See {IERC4626-deposit}. */\\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256) {\\n        uint256 maxAssets = maxDeposit(receiver);\\n        if (assets > maxAssets) {\\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);\\n        }\\n\\n        uint256 shares = previewDeposit(assets);\\n        _deposit(_msgSender(), receiver, assets, shares);\\n\\n        return shares;\\n    }\\n\\n    /** @dev See {IERC4626-mint}. */\\n    function mint(uint256 shares, address receiver) public virtual returns (uint256) {\\n        uint256 maxShares = maxMint(receiver);\\n        if (shares > maxShares) {\\n            revert ERC4626ExceededMaxMint(receiver, shares, maxShares);\\n        }\\n\\n        uint256 assets = previewMint(shares);\\n        _deposit(_msgSender(), receiver, assets, shares);\\n\\n        return assets;\\n    }\\n\\n    /** @dev See {IERC4626-withdraw}. */\\n    function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {\\n        uint256 maxAssets = maxWithdraw(owner);\\n        if (assets > maxAssets) {\\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\\n        }\\n\\n        uint256 shares = previewWithdraw(assets);\\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\\n\\n        return shares;\\n    }\\n\\n    /** @dev See {IERC4626-redeem}. */\\n    function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {\\n        uint256 maxShares = maxRedeem(owner);\\n        if (shares > maxShares) {\\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\\n        }\\n\\n        uint256 assets = previewRedeem(shares);\\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\\n\\n        return assets;\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\\n     */\\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\\n        return assets.mulDiv(totalSupply() + 10 ** _decimalsOffset(), totalAssets() + 1, rounding);\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\\n     */\\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 10 ** _decimalsOffset(), rounding);\\n    }\\n\\n    /**\\n     * @dev Deposit/mint common workflow.\\n     */\\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\\n        // If asset() is ERC-777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\\n        // calls the vault, which is assumed not malicious.\\n        //\\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\\n        // assets are transferred and before the shares are minted, which is a valid state.\\n        // slither-disable-next-line reentrancy-no-eth\\n        SafeERC20.safeTransferFrom(IERC20(asset()), caller, address(this), assets);\\n        _mint(receiver, shares);\\n\\n        emit Deposit(caller, receiver, assets, shares);\\n    }\\n\\n    /**\\n     * @dev Withdraw/redeem common workflow.\\n     */\\n    function _withdraw(\\n        address caller,\\n        address receiver,\\n        address owner,\\n        uint256 assets,\\n        uint256 shares\\n    ) internal virtual {\\n        if (caller != owner) {\\n            _spendAllowance(owner, caller, shares);\\n        }\\n\\n        // If asset() is ERC-777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\\n        // calls the vault, which is assumed not malicious.\\n        //\\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\\n        // shares are burned and after the assets are transferred, which is a valid state.\\n        _burn(owner, shares);\\n        SafeERC20.safeTransfer(IERC20(asset()), receiver, assets);\\n\\n        emit Withdraw(caller, receiver, owner, assets, shares);\\n    }\\n\\n    function _decimalsOffset() internal view virtual returns (uint8) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x194f019f863066305012a575da8aff2fe660eb7f292e0e2d3fba578f11b75513\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5dc63d1c6a12fe1b17793e1745877b2fcbe1964c3edfd0a482fac21ca8f18261\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit addition of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that sum = high * 2\\u00b2\\u2075\\u2076 + low.\\n     */\\n    function add512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        assembly (\\\"memory-safe\\\") {\\n            low := add(a, b)\\n            high := lt(low, a)\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit multiplication of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that product = high * 2\\u00b2\\u2075\\u2076 + low.\\n     */\\n    function mul512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        // 512-bit multiply [high low] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n        // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = high * 2\\u00b2\\u2075\\u2076 + low.\\n        assembly (\\\"memory-safe\\\") {\\n            let mm := mulmod(a, b, not(0))\\n            low := mul(a, b)\\n            high := sub(sub(mm, low), lt(mm, low))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            success = c >= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a - b;\\n            success = c <= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a * b;\\n            assembly (\\\"memory-safe\\\") {\\n                // Only true when the multiplication doesn't overflow\\n                // (c / a == b) || (a == 0)\\n                success := or(eq(div(c, a), b), iszero(a))\\n            }\\n            // equivalent to: success ? c : 0\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `DIV` opcode returns zero when the denominator is 0.\\n                result := div(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `MOD` opcode returns zero when the denominator is 0.\\n                result := mod(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating addition, bounds to `2\\u00b2\\u2075\\u2076 - 1` instead of overflowing.\\n     */\\n    function saturatingAdd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryAdd(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating subtraction, bounds to zero instead of overflowing.\\n     */\\n    function saturatingSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (, uint256 result) = trySub(a, b);\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating multiplication, bounds to `2\\u00b2\\u2075\\u2076 - 1` instead of overflowing.\\n     */\\n    function saturatingMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryMul(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (high == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return low / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= high) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [high low].\\n            uint256 remainder;\\n            assembly (\\\"memory-safe\\\") {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                high := sub(high, gt(remainder, low))\\n                low := sub(low, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly (\\\"memory-safe\\\") {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [high low] by twos.\\n                low := div(low, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from high into low.\\n            low |= high * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and high\\n            // is no longer required.\\n            result = low * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y >> n) with full precision. Throws if result overflows a uint256.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n            if (high >= 1 << n) {\\n                Panic.panic(Panic.UNDER_OVERFLOW);\\n            }\\n            return (high << (256 - n)) | (low >> n);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y >> n with full precision, following the selected rounding direction.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n, Rounding rounding) internal pure returns (uint256) {\\n        return mulShr(x, y, n) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, 1 << n) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // If upper 8 bits of 16-bit half set, add 8 to result\\n        r |= SafeCast.toUint((x >> r) > 0xff) << 3;\\n        // If upper 4 bits of 8-bit half set, add 4 to result\\n        r |= SafeCast.toUint((x >> r) > 0xf) << 2;\\n\\n        // Shifts value right by the current result and use it as an index into this lookup table:\\n        //\\n        // | x (4 bits) |  index  | table[index] = MSB position |\\n        // |------------|---------|-----------------------------|\\n        // |    0000    |    0    |        table[0] = 0         |\\n        // |    0001    |    1    |        table[1] = 0         |\\n        // |    0010    |    2    |        table[2] = 1         |\\n        // |    0011    |    3    |        table[3] = 1         |\\n        // |    0100    |    4    |        table[4] = 2         |\\n        // |    0101    |    5    |        table[5] = 2         |\\n        // |    0110    |    6    |        table[6] = 2         |\\n        // |    0111    |    7    |        table[7] = 2         |\\n        // |    1000    |    8    |        table[8] = 3         |\\n        // |    1001    |    9    |        table[9] = 3         |\\n        // |    1010    |   10    |        table[10] = 3        |\\n        // |    1011    |   11    |        table[11] = 3        |\\n        // |    1100    |   12    |        table[12] = 3        |\\n        // |    1101    |   13    |        table[13] = 3        |\\n        // |    1110    |   14    |        table[14] = 3        |\\n        // |    1111    |   15    |        table[15] = 3        |\\n        //\\n        // The lookup table is represented as a 32-byte value with the MSB positions for 0-15 in the last 16 bytes.\\n        assembly (\\\"memory-safe\\\") {\\n            r := or(r, byte(shr(r, x), 0x0000010102020202030303030303030300000000000000000000000000000000))\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // Add 1 if upper 8 bits of 16-bit half set, and divide accumulated result by 8\\n        return (r >> 3) | SafeCast.toUint((x >> r) > 0xff);\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"contracts/BullaFactoring.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.20;\\nimport '@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol';\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport {console} from \\\"../lib/forge-std/src/console.sol\\\";\\nimport \\\"./interfaces/IInvoiceProviderAdapter.sol\\\";\\nimport \\\"./interfaces/IBullaFactoring.sol\\\";\\nimport \\\"./Permissions.sol\\\";\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport \\\"@bulla/contracts-v2/src/interfaces/IBullaFrendLend.sol\\\";\\n\\n/// @title Bulla Factoring Fund\\n/// @author @solidoracle\\n/// @notice Bulla Factoring Fund is a ERC4626 compatible fund that allows for the factoring of invoices\\ncontract BullaFactoringV2 is IBullaFactoringV2, ERC20, ERC4626, Ownable {\\n    using Math for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Address of the Bulla DAO, a trusted multisig\\n    address public bullaDao;\\n    /// @notice Protocol fee in basis points\\n    uint16 public protocolFeeBps;\\n    /// @notice Admin fee in basis points\\n    uint16 public adminFeeBps;\\n    /// @notice Accumulated protocol fee balance\\n    uint256 public protocolFeeBalance;\\n    /// @notice Accumulated admin fee balance\\n    uint256 public adminFeeBalance;\\n    /// @notice Accumulated spread gains balance\\n    uint256 public spreadGainsBalance;\\n    /// @notice Address of the underlying asset token (e.g., USDC)\\n    IERC20 public assetAddress;\\n    /// @notice Address of the invoice provider contract adapter\\n    IInvoiceProviderAdapterV2 public invoiceProviderAdapter;\\n    uint256 private totalDeposits; \\n    uint256 private totalWithdrawals;\\n    /// @notice Address of the bulla frendlend contract\\n    IBullaFrendLend public bullaFrendLend;\\n    /// @notice Address of the underwriter, trusted to approve invoices\\n    address public underwriter;\\n    /// @notice Timestamp of the fund's creation\\n    uint256 public creationTimestamp;\\n    /// @notice Reserve amount for impairment\\n    uint256 public impairReserve;\\n    /// @notice Name of the factoring pool\\n    string public poolName;\\n    /// @notice Target yield in basis points\\n    uint16 public targetYieldBps;\\n\\n    /// @notice Grace period for invoices\\n    uint256 public gracePeriodDays = 60;\\n\\n    /// @notice Permissions contracts for deposit and factoring\\n    Permissions public depositPermissions;\\n    Permissions public redeemPermissions;\\n    Permissions public factoringPermissions;\\n\\n    /// Mapping of paid invoices ID to track gains/losses\\n    mapping(uint256 => uint256) public paidInvoicesGain;\\n\\n    /// Mapping of paid invoices ID to track spread gains, that belong to pool owner and are not part of the pool's yield\\n    mapping(uint256 => uint256) public paidInvoicesSpreadGain;\\n\\n    /// Mapping from invoice ID to original creditor's address\\n    mapping(uint256 => address) public originalCreditors;\\n\\n    /// Mapping from invoice ID to invoice approval details\\n    mapping(uint256 => InvoiceApproval) public approvedInvoices;\\n    /// @notice The duration of invoice approval before it expires\\n    uint256 public approvalDuration = 1 hours;\\n\\n    /// Array to hold the IDs of all active invoices\\n    uint256[] public activeInvoices;\\n\\n    /// Array to track IDs of paid invoices\\n    uint256[] private paidInvoicesIds;\\n\\n    /// Array to track IDs of impaired invoices by fund\\n    uint256[] private impairedByFundInvoicesIds;\\n\\n    /// Mapping from invoice ID to impairment details\\n    mapping(uint256 => ImpairmentDetails) public impairments;\\n\\n    /// Mapping from loan offer ID to pending loan offer details\\n    mapping(uint256 => PendingLoanOfferInfo) public pendingLoanOffersByLoanOfferId;\\n\\n    /// Array to track IDs of pending loan offers\\n    uint256[] public pendingLoanOffersIds;\\n\\n    /// Errors\\n    error CallerNotUnderwriter();\\n    error DeductionsExceedsRealisedGains();\\n    error InvoiceNotApproved();\\n    error ApprovalExpired();\\n    error InvoiceCanceled();\\n    error InvoicePaidAmountChanged();\\n    error FunctionNotSupported();\\n    error UnauthorizedDeposit(address caller);\\n    error UnauthorizedFactoring(address caller);\\n    error UnpaidInvoice();\\n    error InvoiceNotImpaired();\\n    error InvoiceAlreadyPaid();\\n    error InvoiceAlreadyImpairedByFund();\\n    error CallerNotOriginalCreditor();\\n    error CallerNotBullaFrendLend();\\n    error InvalidPercentage();\\n    error CallerNotBullaDao();\\n    error NoFeesToWithdraw();\\n    error InvalidAddress();\\n    error ImpairReserveMustBeGreater();\\n    error InvoiceCreditorChanged();\\n    error ImpairReserveNotSet();\\n    error InvoiceCannotBePaid();\\n    error InvoiceTokenMismatch();\\n    error InvoiceAlreadyFunded();\\n    error LoanOfferNotExists();\\n    error LoanOfferAlreadyAccepted();\\n    error InsufficientFunds(uint256 available, uint256 required);\\n\\n    /// @param _asset underlying supported stablecoin asset for deposit \\n    /// @param _invoiceProviderAdapter adapter for invoice provider\\n    /// @param _underwriter address of the underwriter\\n    constructor(\\n        IERC20 _asset, \\n        IInvoiceProviderAdapterV2 _invoiceProviderAdapter, \\n        IBullaFrendLend _bullaFrendLend,\\n        address _underwriter,\\n        Permissions _depositPermissions,\\n        Permissions _redeemPermissions,\\n        Permissions _factoringPermissions,\\n        address _bullaDao,\\n        uint16 _protocolFeeBps,\\n        uint16 _adminFeeBps,\\n        string memory _poolName,\\n        uint16 _targetYieldBps,\\n        string memory _tokenName, \\n        string memory _tokenSymbol\\n    ) ERC20(_tokenName, _tokenSymbol) ERC4626(_asset) Ownable(_msgSender()) {\\n        if (_protocolFeeBps <= 0 || _protocolFeeBps > 10000) revert InvalidPercentage();\\n        if (_adminFeeBps <= 0 || _adminFeeBps > 10000) revert InvalidPercentage();\\n\\n        assetAddress = _asset;\\n        invoiceProviderAdapter = _invoiceProviderAdapter;\\n        bullaFrendLend = _bullaFrendLend;\\n        underwriter = _underwriter;\\n        depositPermissions = _depositPermissions;\\n        redeemPermissions = _redeemPermissions;\\n        factoringPermissions = _factoringPermissions;\\n        bullaDao = _bullaDao;\\n        protocolFeeBps = _protocolFeeBps;\\n        adminFeeBps = _adminFeeBps; \\n        creationTimestamp = block.timestamp;\\n        poolName = _poolName;\\n        targetYieldBps = _targetYieldBps;\\n    }\\n\\n    /// @notice Returns the number of decimals the token uses, same as the underlying asset\\n    /// @return The number of decimals for this token\\n    function decimals() public view override(ERC20, ERC4626) returns (uint8) {\\n        return ERC20(address(assetAddress)).decimals();\\n    }\\n\\n    function offerLoan(address debtor, uint16 _targetYieldBps, uint16 spreadBps, uint256 principalAmount, uint256 termLength, uint16 numberOfPeriodsPerYear, string memory description)\\n        public returns (uint256 loanOfferId) {\\n        if (msg.sender != underwriter) revert CallerNotUnderwriter();\\n        if (numberOfPeriodsPerYear > 365) revert InvalidPercentage();\\n\\n        LoanRequestParams memory loanRequestParams = LoanRequestParams({\\n            termLength: termLength,\\n            interestConfig: InterestConfig({\\n                interestRateBps: _targetYieldBps + spreadBps + adminFeeBps + protocolFeeBps,\\n                numberOfPeriodsPerYear: numberOfPeriodsPerYear\\n            }),\\n            loanAmount: principalAmount,\\n            creditor: address(this),\\n            debtor: debtor,\\n            description: description,\\n            token: address(assetAddress),\\n            impairmentGracePeriod: gracePeriodDays * 1 days,\\n            expiresAt: block.timestamp + approvalDuration,\\n            callbackContract: address(this),\\n            callbackSelector: this.onLoanOfferAccepted.selector\\n        });\\n\\n        assetAddress.safeIncreaseAllowance(address(bullaFrendLend), principalAmount);\\n        loanOfferId = bullaFrendLend.offerLoan(loanRequestParams);\\n\\n        pendingLoanOffersByLoanOfferId[loanOfferId] = PendingLoanOfferInfo({\\n            exists: true,\\n            feeParams: FeeParams({\\n                spreadBps: spreadBps,\\n                upfrontBps: 100_00,\\n                protocolFeeBps: protocolFeeBps,\\n                adminFeeBps: adminFeeBps,\\n                minDaysInterestApplied: 0,\\n                targetYieldBps: _targetYieldBps\\n            }),\\n            principalAmount: principalAmount,\\n            termLength: termLength,\\n            offeredAt: block.timestamp\\n        });\\n\\n        pendingLoanOffersIds.push(loanOfferId);\\n\\n        return loanOfferId;\\n    }\\n\\n    function onLoanOfferAccepted(uint256 loanOfferId, uint256 loanId) public {\\n        if (msg.sender != address(bullaFrendLend)) revert CallerNotBullaFrendLend();\\n        PendingLoanOfferInfo memory pendingLoanOffer = pendingLoanOffersByLoanOfferId[loanOfferId];\\n        if (!pendingLoanOffer.exists) revert LoanOfferNotExists();\\n        if (approvedInvoices[loanId].approved) revert LoanOfferAlreadyAccepted();\\n\\n        pendingLoanOffersByLoanOfferId[loanOfferId].exists = false;\\n        removePendingLoanOffer(loanOfferId);\\n\\n        approvedInvoices[loanOfferId] = InvoiceApproval({\\n            approved: true,\\n            validUntil: pendingLoanOffer.offeredAt,\\n            fundedTimestamp: block.timestamp,\\n            feeParams: pendingLoanOffer.feeParams,\\n            fundedAmountGross: pendingLoanOffer.principalAmount,\\n            fundedAmountNet: pendingLoanOffer.principalAmount,\\n            initialFullInvoiceAmount: pendingLoanOffer.principalAmount,\\n            initialPaidAmount: 0,\\n            invoiceDueDate: block.timestamp + pendingLoanOffer.termLength,\\n            receiverAddress: address(this),\\n            creditor: address(this)\\n        });\\n\\n        originalCreditors[loanId] = address(this);\\n        activeInvoices.push(loanId);\\n        \\n        emit InvoiceFunded(loanId, pendingLoanOffer.principalAmount, address(this), block.timestamp + pendingLoanOffer.termLength, pendingLoanOffer.feeParams.upfrontBps);\\n    }\\n\\n    /// @notice Approves an invoice for funding, can only be called by the underwriter\\n    /// @param invoiceId The ID of the invoice to approve\\n    /// @param _targetYieldBps The target yield in basis points\\n    /// @param _spreadBps The spread in basis points to add on top of target yield\\n    /// @param _upfrontBps The maximum upfront percentage the factorer can request\\n    /// @param minDaysInterestApplied The minimum number of days interest must be applied\\n    function approveInvoice(uint256 invoiceId, uint16 _targetYieldBps, uint16 _spreadBps, uint16 _upfrontBps, uint16 minDaysInterestApplied) public {\\n        if (_upfrontBps <= 0 || _upfrontBps > 10000) revert InvalidPercentage();\\n        if (msg.sender != underwriter) revert CallerNotUnderwriter();\\n        uint256 _validUntil = block.timestamp + approvalDuration;\\n        IInvoiceProviderAdapterV2.Invoice memory invoiceSnapshot = invoiceProviderAdapter.getInvoiceDetails(invoiceId);\\n        if (invoiceSnapshot.invoiceAmount - invoiceSnapshot.paidAmount == 0) revert InvoiceCannotBePaid();\\n        // if invoice already got approved and funded (creditor/owner of invoice is this contract), do not override storage\\n        // we assume that invoices are always from the bulla protocol and the creditor is always the NFT owner\\n        if (invoiceSnapshot.creditor == address(this)) revert InvoiceAlreadyFunded();\\n        // check claim token is equal to pool token\\n        address claimToken = invoiceSnapshot.tokenAddress;\\n        if (claimToken != address(assetAddress)) revert InvoiceTokenMismatch();\\n\\n        FeeParams memory feeParams = FeeParams({\\n            targetYieldBps: _targetYieldBps,\\n            spreadBps: _spreadBps,\\n            upfrontBps: _upfrontBps,\\n            protocolFeeBps: protocolFeeBps,\\n            adminFeeBps: adminFeeBps,\\n            minDaysInterestApplied: minDaysInterestApplied\\n        });\\n\\n        approvedInvoices[invoiceId] = InvoiceApproval({\\n            approved: true,\\n            validUntil: _validUntil,\\n            creditor: invoiceSnapshot.creditor,\\n            fundedTimestamp: 0,\\n            feeParams: feeParams,\\n            fundedAmountGross: 0,\\n            fundedAmountNet: 0,\\n            initialFullInvoiceAmount: invoiceSnapshot.invoiceAmount,\\n            initialPaidAmount: invoiceSnapshot.paidAmount,\\n            receiverAddress: address(0),\\n            invoiceDueDate: invoiceSnapshot.dueDate\\n        });\\n        emit InvoiceApproved(invoiceId, _validUntil, feeParams);\\n    }\\n\\n    /// @notice Calculates the interest, protocol fee, admin fee, and spread for a given invoice approval over a specified number of days\\n    /// @param approval The invoice approval details\\n    /// @param daysOfInterest The number of days over which interest is calculated\\n    /// @return interest The calculated base interest amount (target yield portion)\\n    /// @return spreadAmount The calculated spread amount\\n    /// @return protocolFee The calculated protocol fee amount\\n    /// @return adminFee The calculated admin fee amount\\n    function calculateFees(InvoiceApproval memory approval, uint256 daysOfInterest, IInvoiceProviderAdapterV2.Invoice memory invoice) private pure returns (uint256 interest, uint256 spreadAmount, uint256 protocolFee, uint256 adminFee, uint256 kickbackAmount) {\\n        // Calculate the APR discount for the payment period\\n        // millibips used due to the small nature of the fees\\n        uint256 _targetYieldMbps = Math.mulDiv(uint256(approval.feeParams.targetYieldBps) * 1000, daysOfInterest, 365);\\n        uint256 spreadRateMbps = Math.mulDiv(uint256(approval.feeParams.spreadBps) * 1000, daysOfInterest, 365);\\n        \\n        // Calculate the admin fee rate\\n        uint256 adminFeeRateMbps = Math.mulDiv(uint256(approval.feeParams.adminFeeBps) * 1000, daysOfInterest, 365);\\n\\n        uint256 protocolFeeRateMbps = Math.mulDiv(uint256(approval.feeParams.protocolFeeBps) * 1000, daysOfInterest, 365);\\n        \\n        // Calculate the total fee rate Mbps (base yield + spread + protocol fee + admin fee)\\n        uint256 totalFeeRateMbps = _targetYieldMbps + spreadRateMbps + adminFeeRateMbps + protocolFeeRateMbps;\\n        \\n        // Calculate the principal amount, net of any paid amount\\n        uint256 principalAmount = approval.initialFullInvoiceAmount - approval.initialPaidAmount;\\n\\n        // cap kickback amount to the principal amount\\n        uint256 capKickbackAmount = principalAmount > approval.fundedAmountNet ? principalAmount - approval.fundedAmountNet : 0;\\n        \\n        // cap total fees to max available to distribute\\n        // invoice amount includes interest\\n        uint256 capTotalFees = invoice.invoiceAmount - approval.initialPaidAmount - approval.fundedAmountNet;\\n\\n        // Calculate total fees on the principal amount only\\n        uint256 totalFees = Math.max(Math.min(capTotalFees, Math.mulDiv(principalAmount, totalFeeRateMbps, 10_000_000)), capTotalFees - capKickbackAmount);\\n        \\n        adminFee = totalFeeRateMbps == 0 ? 0 : Math.mulDiv(totalFees, adminFeeRateMbps, totalFeeRateMbps);\\n        interest = totalFeeRateMbps == 0 ? 0 : Math.mulDiv(totalFees, _targetYieldMbps, totalFeeRateMbps);\\n        spreadAmount = totalFeeRateMbps == 0 ? 0 : Math.mulDiv(totalFees, spreadRateMbps, totalFeeRateMbps);\\n        protocolFee = totalFees - adminFee - interest - spreadAmount;\\n\\n        uint256 totalDueToCreditor = invoice.invoiceAmount - approval.initialPaidAmount - adminFee - interest - spreadAmount - protocolFee;\\n        kickbackAmount = totalDueToCreditor > approval.fundedAmountNet ? totalDueToCreditor - approval.fundedAmountNet : 0;\\n\\n        return (interest, spreadAmount, protocolFee, adminFee, kickbackAmount);\\n    }\\n\\n    /// @notice Calculates the kickback amount for a given funded amount allowing early payment\\n    /// @param invoiceId The ID of the invoice for which to calculate the kickback amount\\n    /// @return kickbackAmount The calculated kickback amount\\n    /// @return trueInterest The true interest amount\\n    /// @return trueSpreadAmount The true spread amount\\n    /// @return trueProtocolFee The true protocol fee amount\\n    /// @return trueAdminFee The true admin fee amount\\n    function calculateKickbackAmount(uint256 invoiceId) public view returns (uint256 kickbackAmount, uint256 trueInterest, uint256 trueSpreadAmount, uint256 trueProtocolFee, uint256 trueAdminFee) {\\n        InvoiceApproval memory approval = approvedInvoices[invoiceId];\\n        IInvoiceProviderAdapterV2.Invoice memory invoice = invoiceProviderAdapter.getInvoiceDetails(invoiceId);\\n\\n        uint256 daysSinceFunded = (block.timestamp > approval.fundedTimestamp) ? Math.mulDiv(block.timestamp - approval.fundedTimestamp, 1, 1 days, Math.Rounding.Ceil) : 0;\\n        \\n        uint256 daysOfInterest = daysSinceFunded = Math.max(daysSinceFunded, approval.feeParams.minDaysInterestApplied);\\n\\n        (trueInterest, trueSpreadAmount, trueProtocolFee, trueAdminFee, kickbackAmount) = calculateFees(approval, daysOfInterest, invoice);\\n\\n\\n        return (kickbackAmount, trueInterest, trueSpreadAmount, trueProtocolFee, trueAdminFee);\\n    }\\n\\n    /// @notice Calculates the total realized gain or loss from paid and impaired invoices\\n    /// @return The total realized gain adjusted for losses\\n    function calculateRealizedGainLoss() public view returns (int256) {\\n        int256 realizedGains = 0;\\n        // Consider gains from paid invoices\\n        for (uint256 i = 0; i < paidInvoicesIds.length; i++) {\\n            uint256 invoiceId = paidInvoicesIds[i];\\n            realizedGains += int256(paidInvoicesGain[invoiceId]);\\n        }\\n\\n        // Consider losses from impaired invoices by fund\\n        for (uint256 i = 0; i < impairedByFundInvoicesIds.length; i++) {\\n            uint256 invoiceId = impairedByFundInvoicesIds[i];\\n            realizedGains += int256(impairments[invoiceId].gainAmount);\\n            realizedGains -= int256(impairments[invoiceId].lossAmount);\\n        }\\n\\n        // Consider losses from impaired invoices in activeInvoices\\n        for (uint256 i = 0; i < activeInvoices.length; i++) {\\n            uint256 invoiceId = activeInvoices[i];\\n            if (isInvoiceImpaired(invoiceId)) {\\n                uint256 fundedAmount = approvedInvoices[invoiceId].fundedAmountNet;\\n                realizedGains -= int256(fundedAmount);\\n            }\\n        }\\n\\n        return realizedGains;\\n    }\\n\\n    /// @notice Calculates the capital account balance, including deposits, withdrawals, and realized gains/losses\\n    /// @return The calculated capital account balance\\n    function calculateCapitalAccount() public view returns (uint256) {\\n        int256 realizedGainLoss = calculateRealizedGainLoss();\\n\\n        int256 depositsMinusWithdrawals = int256(totalDeposits) - int256(totalWithdrawals);\\n        int256 capitalAccount = depositsMinusWithdrawals + realizedGainLoss;\\n\\n        return capitalAccount > 0 ? uint(capitalAccount) : 0;\\n    }\\n\\n    /// @notice Calculates the current price per share of the fund, \\n    /// @return The current price per share, scaled to the underlying asset's decimal places\\n    function pricePerShare() public view returns (uint256) {\\n        return previewRedeem(10**decimals());\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\\n     */\\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view override returns (uint256) {\\n        uint256 _totalSupply = totalSupply();\\n        \\n        if (_totalSupply == 0) {\\n            return assets;\\n        }\\n\\n        return assets.mulDiv(_totalSupply, calculateCapitalAccount(), rounding);\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\\n     */\\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view override returns (uint256) {\\n        uint256 _totalSupply = totalSupply();\\n\\n        if (_totalSupply == 0) {\\n            return shares;\\n        }\\n\\n        return shares.mulDiv(calculateCapitalAccount(), _totalSupply, rounding);\\n    }\\n\\n    /// @notice Calculates the total accrued profits from all active invoices\\n    /// @dev Iterates through all active invoices, calculates interest for each and sums the net accrued interest\\n    /// @return accruedProfits The total net accrued profits across all active invoices\\n    function calculateAccruedProfits() public view returns (uint256 accruedProfits) {\\n        for (uint256 i = 0; i < activeInvoices.length; i++) {\\n            uint256 invoiceId = activeInvoices[i];\\n            \\n            if(!isInvoiceImpaired(invoiceId)) {\\n                (,uint256 trueInterest,,,) = calculateKickbackAmount(invoiceId);\\n                accruedProfits += trueInterest;\\n            }\\n        }\\n\\n        return accruedProfits;\\n    }\\n\\n    /** @dev See {IERC4626-previewDeposit}. */\\n    function previewDeposit(uint256 assets) public view override returns (uint256) {\\n        uint256 capitalAccount = calculateCapitalAccount();\\n        uint256 sharesOutstanding = totalSupply();\\n        uint256 shares;\\n\\n        if(sharesOutstanding == 0) {\\n            shares = assets;\\n        } else {\\n            uint256 accruedProfits = calculateAccruedProfits();\\n            shares = Math.mulDiv(assets, sharesOutstanding, (capitalAccount + accruedProfits), Math.Rounding.Floor);\\n        }\\n\\n        return shares;\\n    }\\n\\n    /// @notice Helper function to handle the logic of depositing assets in exchange for fund shares\\n    /// @param receiver The address to receive the fund shares\\n    /// @param assets The amount of assets to deposit\\n    /// @return The number of shares issued for the deposit\\n    function deposit(uint256 assets,address receiver) public override returns (uint256) {\\n        if (!depositPermissions.isAllowed(_msgSender())) revert UnauthorizedDeposit(_msgSender());\\n        \\n        uint256 shares = super.deposit(assets, receiver);\\n        totalDeposits += assets;\\n        return shares;\\n    }\\n\\n    /// @notice Allows for the deposit of assets in exchange for fund shares with an attachment\\n    /// @param assets The amount of assets to deposit\\n    /// @param receiver The address to receive the fund shares\\n    /// @param attachment The attachment data for the deposit\\n    /// @return The number of shares issued for the deposit\\n    function depositWithAttachment(uint256 assets, address receiver, Multihash calldata attachment) external returns (uint256) {\\n        uint256 shares = deposit(assets, receiver);\\n        emit DepositMadeWithAttachment(_msgSender(), assets, shares, attachment);\\n        return shares;\\n    }\\n\\n    /// @notice Calculates the true fees and net funded amount for a given invoice and factorer's upfront bps, annualised\\n    /// @param invoiceId The ID of the invoice for which to calculate the fees\\n    /// @param factorerUpfrontBps The upfront bps specified by the factorer\\n    /// @return fundedAmountGross The gross amount to be funded to the factorer\\n    /// @return adminFee The target calculated admin fee\\n    /// @return targetInterest The calculated interest fee\\n    /// @return targetSpreadAmount The calculated spread amount\\n    /// @return targetProtocolFee The calculated protocol fee\\n    /// @return netFundedAmount The net amount that will be funded to the factorer after deducting fees\\n    function calculateTargetFees(uint256 invoiceId, uint16 factorerUpfrontBps) public view returns (uint256 fundedAmountGross, uint256 adminFee, uint256 targetInterest, uint256 targetSpreadAmount, uint256 targetProtocolFee, uint256 netFundedAmount) {\\n        InvoiceApproval memory approval = approvedInvoices[invoiceId];\\n        IInvoiceProviderAdapterV2.Invoice memory invoice = invoiceProviderAdapter.getInvoiceDetails(invoiceId);\\n\\n        if (!approval.approved) revert InvoiceNotApproved();\\n        if (factorerUpfrontBps > approval.feeParams.upfrontBps || factorerUpfrontBps == 0) revert InvalidPercentage();\\n\\n        uint256 trueInitialFaceValue = approval.initialFullInvoiceAmount - approval.initialPaidAmount;\\n\\n        fundedAmountGross = Math.mulDiv(trueInitialFaceValue, factorerUpfrontBps, 10000);\\n\\n        uint256 daysUntilDue =  Math.mulDiv(approval.invoiceDueDate - block.timestamp, 1, 1 days, Math.Rounding.Ceil);\\n\\n        /// @dev minDaysInterestApplied is the minimum number of days the invoice can be funded for, set by the underwriter during approval\\n        daysUntilDue = Math.max(daysUntilDue, approval.feeParams.minDaysInterestApplied);\\n\\n        (targetInterest, targetSpreadAmount, targetProtocolFee, adminFee, ) = calculateFees(approval, daysUntilDue, invoice);\\n\\n        uint256 totalFees = adminFee + targetInterest + targetSpreadAmount + targetProtocolFee;\\n        netFundedAmount = fundedAmountGross - totalFees;\\n\\n        return (fundedAmountGross, adminFee, targetInterest, targetSpreadAmount, targetProtocolFee, netFundedAmount);\\n    }\\n\\n    /// @notice Funds a single invoice, transferring the funded amount from the fund to the caller and transferring the invoice NFT to the fund\\n    /// @dev No checks needed for the creditor, as transferFrom will revert unless it gets executed by the nft owner (i.e. claim creditor)\\n    /// @param invoiceId The ID of the invoice to fund\\n    /// @param factorerUpfrontBps factorer specified upfront bps\\n    /// @param receiverAddress Address to receive the funds, if address(0) then funds go to msg.sender\\n    function fundInvoice(uint256 invoiceId, uint16 factorerUpfrontBps, address receiverAddress) external returns(uint256) {\\n        if (!factoringPermissions.isAllowed(msg.sender)) revert UnauthorizedFactoring(msg.sender);\\n        if (!approvedInvoices[invoiceId].approved) revert InvoiceNotApproved();\\n        if (factorerUpfrontBps > approvedInvoices[invoiceId].feeParams.upfrontBps || factorerUpfrontBps == 0) revert InvalidPercentage();\\n        if (block.timestamp > approvedInvoices[invoiceId].validUntil) revert ApprovalExpired();\\n        IInvoiceProviderAdapterV2.Invoice memory invoicesDetails = invoiceProviderAdapter.getInvoiceDetails(invoiceId);\\n        if (invoicesDetails.isCanceled) revert InvoiceCanceled();\\n        if (approvedInvoices[invoiceId].initialPaidAmount != invoicesDetails.paidAmount) revert InvoicePaidAmountChanged();\\n        if (approvedInvoices[invoiceId].creditor != invoicesDetails.creditor) revert InvoiceCreditorChanged();\\n\\n        (uint256 fundedAmountGross,,,,,uint256 fundedAmountNet) = calculateTargetFees(invoiceId, factorerUpfrontBps);\\n        uint256 _totalAssets = totalAssets();\\n        if(fundedAmountNet > _totalAssets) revert InsufficientFunds(_totalAssets, fundedAmountNet);\\n\\n        // store values in approvedInvoices\\n        approvedInvoices[invoiceId].fundedAmountGross = fundedAmountGross;\\n        approvedInvoices[invoiceId].fundedAmountNet = fundedAmountNet;\\n        approvedInvoices[invoiceId].fundedTimestamp = block.timestamp;\\n        // update upfrontBps with what was passed in the arg by the factorer\\n        approvedInvoices[invoiceId].feeParams.upfrontBps = factorerUpfrontBps; \\n\\n        // Determine the actual receiver address - use msg.sender if receiverAddress is address(0)\\n        address actualReceiver = receiverAddress == address(0) ? msg.sender : receiverAddress;\\n\\n        // Store the receiver address for future kickback payments\\n        approvedInvoices[invoiceId].receiverAddress = actualReceiver;\\n\\n        // transfer net funded amount to caller to the actual receiver\\n        assetAddress.safeTransfer(actualReceiver, fundedAmountNet);\\n\\n        // transfer invoice nft ownership to vault\\n        address invoiceContractAddress = invoiceProviderAdapter.getInvoiceContractAddress(invoiceId);\\n        IERC721(invoiceContractAddress).transferFrom(msg.sender, address(this), invoiceId);\\n\\n        originalCreditors[invoiceId] = msg.sender;\\n        activeInvoices.push(invoiceId);\\n\\n        emit InvoiceFunded(invoiceId, fundedAmountNet, msg.sender, approvedInvoices[invoiceId].invoiceDueDate, factorerUpfrontBps);\\n        return fundedAmountNet;\\n    }\\n\\n    /// @notice Provides a view of the pool's status, listing paid and impaired invoices, to be called by Gelato or alike\\n    /// @return paidInvoices An array of paid invoice IDs\\n    /// @return impairedInvoices An array of impaired invoice IDs\\n    function viewPoolStatus() public view returns (uint256[] memory paidInvoices, uint256[] memory impairedInvoices) {\\n        uint256 activeCount = activeInvoices.length;\\n        uint256 impairedByFundCount = impairedByFundInvoicesIds.length;\\n        \\n        paidInvoices = new uint256[](activeCount + impairedByFundCount);\\n        impairedInvoices = new uint256[](activeCount);\\n        \\n        uint256 paidCount = 0;\\n        uint256 impairedCount = 0;\\n\\n        // Check active invoices\\n        for (uint256 i = 0; i < activeCount; i++) {\\n            uint256 invoiceId = activeInvoices[i];\\n            \\n            if (isInvoicePaid(invoiceId)) {\\n                paidInvoices[paidCount++] = invoiceId;\\n            } else if (isInvoiceImpaired(invoiceId)) {\\n                impairedInvoices[impairedCount++] = invoiceId;\\n            }\\n        }\\n\\n        // Check impaired invoices by the fund\\n        for (uint256 i = 0; i < impairedByFundCount; i++) {\\n            uint256 invoiceId = impairedByFundInvoicesIds[i];\\n            \\n            if (isInvoicePaid(invoiceId)) {\\n                paidInvoices[paidCount++] = invoiceId;\\n            }\\n        }\\n\\n        // Overwrite the length of the arrays\\n        assembly {\\n            mstore(paidInvoices, paidCount)\\n            mstore(impairedInvoices, impairedCount)\\n        }\\n\\n        return (paidInvoices, impairedInvoices);\\n    }\\n\\n    /// @notice Checks if an invoice is fully paid\\n    /// @param invoiceId The ID of the invoice to check\\n    /// @return True if the invoice is fully paid, false otherwise\\n    function isInvoicePaid(uint256 invoiceId) private view returns (bool) {\\n        IInvoiceProviderAdapterV2.Invoice memory invoicesDetails = invoiceProviderAdapter.getInvoiceDetails(invoiceId);\\n        return invoicesDetails.isPaid;\\n    }\\n\\n    /// @notice Checks if an invoice is impaired, based on its due date and a grace period\\n    /// @param invoiceId The ID of the invoice to check\\n    /// @return True if the invoice is impaired, false otherwise\\n    function isInvoiceImpaired(uint256 invoiceId) private view returns (bool) {\\n        IInvoiceProviderAdapterV2.Invoice memory invoice = invoiceProviderAdapter.getInvoiceDetails(invoiceId);\\n        uint256 DaysAfterDueDate = invoice.dueDate + (gracePeriodDays * 1 days); \\n        return block.timestamp > DaysAfterDueDate;\\n    }\\n\\n    function getFundedAmount(uint invoiceId) public view returns (uint) {\\n        return approvedInvoices[invoiceId].fundedAmountNet;\\n    }\\n    \\n    /// @notice Increments the profit, and fee balances for a given invoice\\n    /// @param invoiceId The ID of the invoice\\n    /// @param trueInterest The true interest amount for the invoice\\n    /// @param trueSpreadAmount The true spread amount for the invoice\\n    /// @param trueProtocolFee The true protocol fee amount for the invoice\\n    /// @param trueAdminFee The true admin fee amount for the invoice\\n    function incrementProfitAndFeeBalances(uint256 invoiceId, uint256 trueInterest, uint256 trueSpreadAmount, uint256 trueProtocolFee, uint256 trueAdminFee) private {\\n        // Add the admin fee to the balance\\n        adminFeeBalance += trueAdminFee;\\n\\n        // store factoring gain (base yield only)\\n        paidInvoicesGain[invoiceId] = trueInterest;\\n\\n        // store spread gain separately\\n        paidInvoicesSpreadGain[invoiceId] = trueSpreadAmount;\\n        spreadGainsBalance += trueSpreadAmount;\\n\\n        // Update protocol fee balance\\n        protocolFeeBalance += trueProtocolFee;\\n\\n        // Add the invoice ID to the paidInvoicesIds array\\n        paidInvoicesIds.push(invoiceId);\\n    }\\n\\n    /// @notice Reconciles the list of active invoices with those that have been paid, updating the fund's records\\n    /// @dev This function should be called when viewPoolStatus returns some updates, to ensure accurate accounting\\n    function reconcileActivePaidInvoices() external {\\n        (uint256[] memory paidInvoiceIds, ) = viewPoolStatus();\\n\\n        for (uint256 i = 0; i < paidInvoiceIds.length; i++) {\\n            uint256 invoiceId = paidInvoiceIds[i];\\n            \\n            // calculate kickback amount adjusting for true interest, protocol and admin fees\\n            (uint256 kickbackAmount, uint256 trueInterest, uint256 trueSpreadAmount, uint256 trueProtocolFee, uint256 trueAdminFee) = calculateKickbackAmount(invoiceId);\\n \\n            incrementProfitAndFeeBalances(invoiceId, trueInterest, trueSpreadAmount, trueProtocolFee, trueAdminFee);   \\n\\n            address receiverAddress = approvedInvoices[invoiceId].receiverAddress;\\n            \\n            if (kickbackAmount != 0) {\\n                assetAddress.safeTransfer(receiverAddress, kickbackAmount);\\n                emit InvoiceKickbackAmountSent(invoiceId, kickbackAmount, receiverAddress);\\n            }\\n\\n            // Check if the invoice was previously marked as impaired by the fund\\n            if (impairments[invoiceId].isImpaired) {\\n                // Remove the invoice from impaired array\\n                removeImpairedByFundInvoice(invoiceId);\\n\\n                // Adjust impairment in fund records\\n                delete impairments[invoiceId];\\n            } else {\\n                // Remove the invoice from activeInvoices array\\n                removeActivePaidInvoice(invoiceId);   \\n            }\\n\\n            InvoiceApproval memory approval = approvedInvoices[invoiceId];\\n            emit InvoicePaid(invoiceId, trueInterest, trueSpreadAmount, trueProtocolFee, trueAdminFee, approval.fundedAmountNet, kickbackAmount, receiverAddress);\\n        }\\n        emit ActivePaidInvoicesReconciled(paidInvoiceIds);\\n    }\\n\\n    function removeImpairedByFundInvoice(uint256 invoiceId) private {\\n        for (uint256 i = 0; i < impairedByFundInvoicesIds.length; i++) {\\n            if (impairedByFundInvoicesIds[i] == invoiceId) {\\n                impairedByFundInvoicesIds[i] = impairedByFundInvoicesIds[impairedByFundInvoicesIds.length - 1];\\n                impairedByFundInvoicesIds.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function removePendingLoanOffer(uint256 loanOfferId) private {\\n        for (uint256 i = 0; i < pendingLoanOffersIds.length; i++) {\\n            if (pendingLoanOffersIds[i] == loanOfferId) {\\n                pendingLoanOffersIds[i] = pendingLoanOffersIds[pendingLoanOffersIds.length - 1];\\n                pendingLoanOffersIds.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    /// @notice Unfactors an invoice, returning the invoice NFT to the original creditor and refunding the funded amount\\n    /// @param invoiceId The ID of the invoice to unfactor\\n    function unfactorInvoice(uint256 invoiceId) external {\\n        if (isInvoicePaid(invoiceId)) revert InvoiceAlreadyPaid();\\n        address originalCreditor = originalCreditors[invoiceId];\\n        if (originalCreditor != msg.sender) revert CallerNotOriginalCreditor();\\n\\n        InvoiceApproval memory approval = approvedInvoices[invoiceId];\\n        IInvoiceProviderAdapterV2.Invoice memory invoice = invoiceProviderAdapter.getInvoiceDetails(invoiceId);\\n        // Calculate the funded amount for the invoice\\n        uint256 fundedAmount = approval.fundedAmountNet;\\n\\n        // Calculate the number of days since funding\\n         uint256 daysSinceFunded = (block.timestamp > approval.fundedTimestamp) ? Math.mulDiv(block.timestamp - approval.fundedTimestamp, 1, 1 days, Math.Rounding.Ceil) : 0;\\n        (uint256 trueInterest, uint256 trueSpreadAmount, uint256 trueProtocolFee, uint256 trueAdminFee, ) = calculateFees(approval, daysSinceFunded, invoice);\\n        int256 totalRefundOrPaymentAmount = int256(fundedAmount + trueInterest + trueSpreadAmount + trueProtocolFee + trueAdminFee) - int256(getPaymentsOnInvoiceSinceFunding(invoiceId));\\n\\n        // positive number means the original creditor owes us the amount\\n        if(totalRefundOrPaymentAmount > 0) {\\n            // Refund the funded amount to the fund from the original creditor\\n            assetAddress.safeTransferFrom(originalCreditor, address(this), uint256(totalRefundOrPaymentAmount));\\n        } else if (totalRefundOrPaymentAmount < 0) {\\n            // negative number means we owe them\\n            assetAddress.safeTransfer(originalCreditor, uint256(-totalRefundOrPaymentAmount));\\n        }\\n\\n        address invoiceContractAddress = invoiceProviderAdapter.getInvoiceContractAddress(invoiceId);\\n        IERC721(invoiceContractAddress).transferFrom(address(this), originalCreditor, invoiceId);\\n\\n        // Update the contract's state to reflect the unfactoring\\n        removeActivePaidInvoice(invoiceId);\\n        incrementProfitAndFeeBalances(invoiceId, trueInterest, trueSpreadAmount, trueProtocolFee, trueAdminFee);\\n\\n        delete originalCreditors[invoiceId];\\n\\n        emit InvoiceUnfactored(invoiceId, originalCreditor, totalRefundOrPaymentAmount, trueInterest, trueSpreadAmount, trueProtocolFee, trueAdminFee);\\n    }\\n\\n    /// @notice Removes an invoice from the list of active invoices once it has been paid\\n    /// @param invoiceId The ID of the invoice to remove\\n    function removeActivePaidInvoice(uint256 invoiceId) private {\\n        for (uint256 i = 0; i < activeInvoices.length; i++) {\\n            if (activeInvoices[i] == invoiceId) {\\n                activeInvoices[i] = activeInvoices[activeInvoices.length - 1];\\n                activeInvoices.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function getPaymentsOnInvoiceSinceFunding(uint256 invoiceId) private view returns (uint256) {\\n        IInvoiceProviderAdapterV2.Invoice memory invoice = invoiceProviderAdapter.getInvoiceDetails(invoiceId);\\n\\n        // Need to subtract payments since funding start\\n        uint256 paymentSinceFunding = invoice.paidAmount - approvedInvoices[invoiceId].initialPaidAmount;\\n\\n        return paymentSinceFunding;\\n    }\\n\\n    /// @notice Calculates the total funded amount for all active invoices.\\n    /// @return The total funded amount for all active invoices\\n    function deployedCapitalForActiveInvoicesExcludingImpaired() public view returns (uint256) {\\n        uint256 deployedCapital = 0;\\n        for (uint256 i = 0; i < activeInvoices.length; i++) {\\n            uint256 invoiceId = activeInvoices[i];\\n            uint256 deployedCapitalOfInvoice = (isInvoiceImpaired(invoiceId)) ? 0 : getFundedAmount(invoiceId);\\n            deployedCapital += deployedCapitalOfInvoice;\\n        }\\n        return deployedCapital;\\n    }\\n\\n    /// @notice Calculates all payments of active invoices since funding\\n    /// @return The sum of all payments of active invoices since funding\\n    function getAllIncomingPaymentsForActiveInvoices() private view returns (uint256) {\\n        uint256 incomingFunds = 0;\\n        for (uint256 i = 0; i < activeInvoices.length; i++) {\\n            uint256 invoiceId = activeInvoices[i];\\n            incomingFunds += getPaymentsOnInvoiceSinceFunding(invoiceId);\\n        }\\n        return incomingFunds;\\n    }\\n\\n    /// @notice Sums the target fees for all active invoices\\n    /// @return targetFees The total fees for all active invoices\\n    function sumTargetFeesForActiveInvoices() private view returns (uint256 targetFees) {\\n        targetFees = 0;\\n        for (uint256 i = 0; i < activeInvoices.length; i++) {\\n            uint256 invoiceId = activeInvoices[i];\\n            targetFees += approvedInvoices[invoiceId].fundedAmountGross - approvedInvoices[invoiceId].fundedAmountNet;\\n        }\\n        return targetFees;\\n    }\\n\\n    /// @notice Calculates the available assets in the fund net of fees and impair reserve\\n    /// @return The amount of assets available for withdrawal or new investments, excluding funds allocated to active invoices\\n    function totalAssets() public view override returns (uint256) {\\n        return calculateCapitalAccount()\\n                - deployedCapitalForActiveInvoicesExcludingImpaired()\\n                - sumTargetFeesForActiveInvoices(); // withheld projected fees, accounted for in total assets but not available for profit distribution;\\n    }\\n\\n    /// @notice Calculates the maximum amount of shares that can be redeemed based on the total assets in the fund\\n    /// @return The maximum number of shares that can be redeemed\\n    function maxRedeem() public view returns (uint256) {\\n        uint256 _totalAssets = totalAssets();\\n        uint256 capitalAccount = calculateCapitalAccount();\\n\\n        if (capitalAccount == 0) {\\n            return 0;\\n        }\\n\\n        uint256 maxWithdrawableShares = convertToShares(_totalAssets);\\n        return maxWithdrawableShares;\\n    }\\n\\n    /// @notice Calculates the maximum amount of shares that can be redeemed based on the total assets in the fund\\n    /// @param _owner The owner of the shares being redeemed\\n    /// @return The maximum number of shares that can be redeemed\\n    function maxRedeem(address _owner) public view override returns (uint256) {\\n        return Math.min(super.maxRedeem(_owner), maxRedeem());\\n    }\\n\\n    /// @notice Calculates the maximum amount of assets that can be withdrawn\\n    /// @param _owner The owner of the assets to be withdrawn\\n    /// @return The maximum number of assets that can be withdrawn\\n    function maxWithdraw(address _owner) public view override returns (uint256) {\\n        return Math.min(super.maxWithdraw(_owner), totalAssets());\\n    }\\n\\n    /// @notice Helper function to handle the logic of withdrawing assets in exchange for fund shares\\n    /// @param receiver The address to receive the assets\\n    /// @param _owner The address who owns the shares to redeem\\n    /// @param assets The amount of assets to withdraw\\n    /// @return The number of shares redeemed\\n    function withdraw(uint256 assets, address receiver, address _owner) public override returns (uint256) {\\n        if (!redeemPermissions.isAllowed(_msgSender())) revert UnauthorizedDeposit(_msgSender());\\n        if (!redeemPermissions.isAllowed(_owner)) revert UnauthorizedDeposit(_owner);\\n \\n        uint256 shares = super.withdraw(assets, receiver, _owner);\\n\\n        totalWithdrawals += assets;\\n        return shares;\\n    }\\n\\n    /// @notice Helper function to handle the logic of redeeming shares in exchange for assets\\n    /// @param shares The number of shares to redeem\\n    /// @param receiver The address to receive the assets\\n    /// @param _owner The owner of the shares being redeemed\\n    /// @return The number of shares redeemed\\n    function redeem(uint256 shares, address receiver, address _owner) public override returns (uint256) {\\n        if (!redeemPermissions.isAllowed(_msgSender())) revert UnauthorizedDeposit(_msgSender());\\n        if (!redeemPermissions.isAllowed(_owner)) revert UnauthorizedDeposit(_owner);\\n        \\n        uint256 assets = super.redeem(shares, receiver, _owner);\\n\\n        totalWithdrawals += assets;\\n\\n        return assets;\\n    }\\n\\n    /// @notice Redeems shares for underlying assets with an attachment, transferring the assets to the specified receiver\\n    /// @param shares The number of shares to redeem\\n    /// @param receiver The address to receive the redeemed assets\\n    /// @param _owner The owner of the shares being redeemed\\n    /// @param attachment The attachment data for the redemption\\n    /// @return The amount of assets redeemed\\n    function redeemWithAttachment(uint256 shares, address receiver, address _owner, Multihash calldata attachment) external returns (uint256) {\\n        uint256 assets = redeem(shares, receiver, _owner);\\n        emit SharesRedeemedWithAttachment(_msgSender(), shares, assets, attachment);\\n        return assets;\\n    }\\n\\n    /// @notice Sets the grace period in days for determining if an invoice is impaired\\n    /// @param _days The number of days for the grace period\\n    /// @dev This function can only be called by the contract owner\\n    function setGracePeriodDays(uint256 _days) public onlyOwner {\\n        gracePeriodDays = _days;\\n        emit GracePeriodDaysChanged(_days);\\n    }\\n\\n    /// @notice Sets the duration for which invoice approvals are valid\\n    /// @param _duration The new duration in seconds\\n    /// @dev This function can only be called by the contract owner\\n    function setApprovalDuration(uint256 _duration) public onlyOwner {\\n        approvalDuration = _duration;\\n        emit ApprovalDurationChanged(_duration);\\n    }\\n\\n    /// @notice Sets a new underwriter for the contract\\n    /// @param _newUnderwriter The address of the new underwriter\\n    function setUnderwriter(address _newUnderwriter) public onlyOwner {\\n        if (_newUnderwriter == address(0)) revert InvalidAddress();\\n        address oldUnderwriter = underwriter;\\n        underwriter = _newUnderwriter;\\n        emit UnderwriterChanged(oldUnderwriter, _newUnderwriter);\\n    }\\n\\n    /// @notice Allows the Bulla DAO to withdraw accumulated protocol fees.\\n    function withdrawProtocolFees() external onlyBullaDao {\\n        uint256 feeAmount = protocolFeeBalance;\\n        if (feeAmount == 0) revert NoFeesToWithdraw();\\n        protocolFeeBalance = 0;\\n        assetAddress.safeTransfer(bullaDao, feeAmount);\\n        emit ProtocolFeesWithdrawn(bullaDao, feeAmount);\\n    }\\n\\n    /// @notice Allows the Pool Owner to withdraw accumulated admin fees and spread gains.\\n    function withdrawAdminFeesAndSpreadGains() onlyOwner public {\\n        uint256 adminFeeAmount = adminFeeBalance;\\n        uint256 spreadAmount = spreadGainsBalance;\\n        uint256 totalAmount = adminFeeAmount + spreadAmount;\\n        \\n        if (totalAmount == 0) revert NoFeesToWithdraw();\\n        \\n        adminFeeBalance = 0;\\n        spreadGainsBalance = 0;\\n        \\n        assetAddress.safeTransfer(msg.sender, totalAmount);\\n        emit AdminFeesWithdrawn(msg.sender, adminFeeAmount);\\n        emit SpreadGainsWithdrawn(msg.sender, spreadAmount);\\n    }\\n\\n    /// @notice Updates the Bulla DAO address\\n    /// @param _newBullaDao The new address for the Bulla DAO\\n    function setBullaDaoAddress(address _newBullaDao) public onlyBullaDao {\\n        if (_newBullaDao == address(0)) revert InvalidAddress();\\n        address oldBullaDao = bullaDao;\\n        bullaDao = _newBullaDao;\\n        emit BullaDaoAddressChanged(oldBullaDao, _newBullaDao);\\n    }\\n\\n    /// @notice Updates the protocol fee in basis points (bps)\\n    /// @param _newProtocolFeeBps The new protocol fee in basis points\\n    function setProtocolFeeBps(uint16 _newProtocolFeeBps) public onlyBullaDao {\\n        if (_newProtocolFeeBps > 10000) revert InvalidPercentage();\\n        uint16 oldProtocolFeeBps = protocolFeeBps;\\n        protocolFeeBps = _newProtocolFeeBps;\\n        emit ProtocolFeeBpsChanged(oldProtocolFeeBps, _newProtocolFeeBps);\\n    }\\n\\n    /// @notice Sets the admin fee in basis points\\n    /// @param _newAdminFeeBps The new admin fee in basis points\\n    function setAdminFeeBps(uint16 _newAdminFeeBps) public onlyOwner {\\n        if (_newAdminFeeBps > 10000) revert InvalidPercentage();\\n        uint16 oldAdminFeeBps = adminFeeBps;\\n        adminFeeBps = _newAdminFeeBps;\\n        emit AdminFeeBpsChanged(oldAdminFeeBps, _newAdminFeeBps);\\n    }\\n\\n    function mint(uint256, address) public pure override returns (uint256){\\n        revert FunctionNotSupported();\\n    }\\n\\n    /// @notice Updates the deposit permissions contract\\n    /// @param _newDepositPermissionsAddress The new deposit permissions contract address\\n    function setDepositPermissions(address _newDepositPermissionsAddress) public onlyOwner {\\n        depositPermissions = Permissions(_newDepositPermissionsAddress);\\n        emit DepositPermissionsChanged(_newDepositPermissionsAddress);\\n    }\\n\\n    /// @notice Updates the redeem permissions contract\\n    /// @param _newRedeemPermissionsAddress The new redeem permissions contract address\\n    function setRedeemPermissions(address _newRedeemPermissionsAddress) public onlyOwner {\\n        redeemPermissions = Permissions(_newRedeemPermissionsAddress);\\n        emit RedeemPermissionsChanged(_newRedeemPermissionsAddress);\\n    }\\n\\n    /// @notice Updates the factoring permissions contract\\n    /// @param _newFactoringPermissionsAddress The address of the new factoring permissions contract\\n    function setFactoringPermissions(address _newFactoringPermissionsAddress) public onlyOwner {\\n        factoringPermissions = Permissions(_newFactoringPermissionsAddress);\\n        emit FactoringPermissionsChanged(_newFactoringPermissionsAddress);\\n    }\\n\\n    /// @notice Sets the impair reserve amount\\n    /// @param _impairReserve The new impair reserve amount\\n    function setImpairReserve(uint256 _impairReserve) public onlyOwner {\\n        if (_impairReserve < impairReserve) revert ImpairReserveMustBeGreater();\\n        uint256 amountToAdd = _impairReserve - impairReserve;\\n        assetAddress.safeTransferFrom(msg.sender, address(this), amountToAdd);\\n        impairReserve = _impairReserve;\\n        emit ImpairReserveChanged(_impairReserve);\\n    }\\n\\n    /// @notice Sets the target yield in basis points\\n    /// @param _targetYieldBps The new target yield in basis points\\n    function setTargetYield(uint16 _targetYieldBps) public onlyOwner {\\n        if (_targetYieldBps > 10000) revert InvalidPercentage();\\n        targetYieldBps = _targetYieldBps;\\n        emit TargetYieldChanged(_targetYieldBps);\\n    }\\n\\n    /// @notice Retrieves the fund information\\n    /// @return FundInfo The fund information\\n    function getFundInfo() external view returns (FundInfo memory) {\\n        uint256 fundBalance = totalAssets();\\n        uint256 deployedCapital = deployedCapitalForActiveInvoicesExcludingImpaired();\\n        uint256 capitalAccount = calculateCapitalAccount();\\n        uint256 price = pricePerShare();\\n        uint256 tokensAvailableForRedemption = maxRedeem();\\n\\n        return FundInfo({\\n            name: poolName,\\n            creationTimestamp: creationTimestamp,\\n            fundBalance: fundBalance,\\n            deployedCapital: deployedCapital,\\n            capitalAccount: capitalAccount,\\n            price: price,\\n            tokensAvailableForRedemption: tokensAvailableForRedemption,\\n            adminFeeBps: adminFeeBps,\\n            impairReserve: impairReserve,\\n            targetYieldBps: targetYieldBps\\n        });\\n    }\\n\\n    /// @notice Impairs an invoice, using the impairment reserve to cover the loss\\n    /// @param invoiceId The ID of the invoice to impair\\n    function impairInvoice(uint256 invoiceId) public onlyOwner {\\n        if (impairReserve == 0) revert ImpairReserveNotSet();\\n        if (!isInvoiceImpaired(invoiceId)) revert InvoiceNotImpaired();\\n\\n        if (impairments[invoiceId].isImpaired) {\\n            revert InvoiceAlreadyImpairedByFund();\\n        }\\n\\n        uint256 fundedAmount = approvedInvoices[invoiceId].fundedAmountNet;\\n        uint256 impairAmount = impairReserve / 2;\\n        impairReserve -= impairAmount; // incidentially adds impairAmount to fund balance as seen in availableAssets\\n\\n        // deduct from capital at risk\\n        removeActivePaidInvoice(invoiceId);\\n\\n        // add to impairedByFundInvoicesIds\\n        impairedByFundInvoicesIds.push(invoiceId);\\n\\n        // Record impairment details\\n        impairments[invoiceId] = ImpairmentDetails({\\n            gainAmount: impairAmount,\\n            lossAmount: fundedAmount,\\n            isImpaired: true\\n        });\\n\\n        emit InvoiceImpaired(invoiceId, fundedAmount, impairAmount);\\n    }\\n\\n    modifier onlyBullaDao() {\\n        if (msg.sender != bullaDao) revert CallerNotBullaDao();\\n        _;\\n    }\\n}\",\"keccak256\":\"0xf5ad4d068d3a4f3c1f3a7fc4364af000ca73797ef582259afc21f2262d7cb1b6\",\"license\":\"BUSL-1.1\"},\"contracts/Permissions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nabstract contract Permissions {\\n    event AccessGranted(address indexed _account);\\n    event AccessRevoked(address indexed _account);\\n\\n    function isAllowed(address _address) virtual external view returns (bool);\\n}\",\"keccak256\":\"0x8bdcc615d9e779530079fd83978ffa0b420dc5b1ed2d0c0f4e9e28b94fc72139\",\"license\":\"MIT\"},\"contracts/interfaces/IBullaFactoring.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC4626.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"./IInvoiceProviderAdapter.sol\\\";\\n\\n/// @notice Interface for the Bulla Factoring contract\\ninterface IBullaFactoringV2 {\\n\\n    // Structs\\n    struct FeeParams {\\n        uint16 targetYieldBps;\\n        uint16 spreadBps;\\n        uint16 upfrontBps;\\n        uint16 protocolFeeBps;\\n        uint16 adminFeeBps;\\n        uint16 minDaysInterestApplied;\\n    }\\n\\n    // The rest of the info can be retrieved from the loan offer\\n    struct PendingLoanOfferInfo {\\n        bool exists;\\n        uint256 offeredAt;\\n        uint256 principalAmount;\\n        uint256 termLength;\\n        FeeParams feeParams;\\n    }\\n\\n    struct InvoiceApproval {\\n        bool approved;\\n        address creditor;\\n        uint256 validUntil;\\n        uint256 invoiceDueDate;\\n        uint256 fundedTimestamp;\\n        FeeParams feeParams;\\n        uint256 fundedAmountGross;\\n        uint256 fundedAmountNet;\\n        uint256 initialFullInvoiceAmount;\\n        uint256 initialPaidAmount;\\n        address receiverAddress;\\n    }\\n\\n    struct Multihash {\\n        bytes32 hash;\\n        uint8 hashFunction;\\n        uint8 size;\\n    }\\n\\n    struct FundInfo {\\n        string name;\\n        uint256 creationTimestamp;\\n        uint256 fundBalance;\\n        uint256 deployedCapital;\\n        uint256 capitalAccount;\\n        uint256 price;\\n        uint256 tokensAvailableForRedemption;\\n        uint16 adminFeeBps;\\n        uint256 impairReserve;\\n        uint256 targetYieldBps;\\n    }\\n\\n    struct ImpairmentDetails {\\n        uint256 gainAmount;\\n        uint256 lossAmount;\\n        bool isImpaired;\\n    }\\n\\n    // Events\\n    event InvoiceApproved(uint256 indexed invoiceId, uint256 validUntil, FeeParams feeParams);\\n    event InvoiceFunded(uint256 indexed invoiceId, uint256 fundedAmount, address indexed originalCreditor, uint256 dueDate, uint16 upfrontBps);\\n    event ActivePaidInvoicesReconciled(uint256[] paidInvoiceIds);\\n    event GracePeriodDaysChanged(uint256 newGracePeriodDays);\\n    event ApprovalDurationChanged(uint256 newDuration);\\n    event UnderwriterChanged(address indexed oldUnderwriter, address indexed newUnderwriter);\\n    event InvoiceKickbackAmountSent(uint256 indexed invoiceId, uint256 kickbackAmount, address indexed originalCreditor);\\n    event InvoicePaid(uint256 indexed invoiceId, uint256 trueInterest, uint256 trueSpreadAmount, uint256 trueProtocolFee, uint256 trueAdminFee, uint256 fundedAmountNet, uint256 kickbackAmount, address indexed originalCreditor);\\n    event InvoiceUnfactored(uint256 indexed invoiceId, address originalCreditor, int256 totalRefundOrPaymentAmount, uint256 interestToCharge, uint256 spreadAmount, uint256 protocolFee, uint256 adminFee);\\n    event DepositMadeWithAttachment(address indexed depositor, uint256 assets, uint256 shares, Multihash attachment);\\n    event SharesRedeemedWithAttachment(address indexed redeemer, uint256 shares, uint256 assets, Multihash attachment);\\n    event BullaDaoAddressChanged(address indexed oldAddress, address indexed newAddress);\\n    event ProtocolFeeBpsChanged(uint16 oldProtocolFeeBps, uint16 newProtocolFeeBps);\\n    event ProtocolFeesWithdrawn(address indexed bullaDao, uint256 amount);\\n    event AdminFeeBpsChanged(uint16 indexed oldFeeBps, uint16 indexed newFeeBps);\\n    event AdminFeesWithdrawn(address indexed bullaDao, uint256 amount);\\n    event SpreadGainsWithdrawn(address indexed owner, uint256 amount);\\n    event DepositPermissionsChanged(address newAddress);\\n    event RedeemPermissionsChanged(address newAddress);\\n    event FactoringPermissionsChanged(address newAddress);\\n    event InvoiceImpaired(uint256 indexed invoiceId, uint256 lossAmount, uint256 gainAmount);\\n    event ImpairReserveChanged(uint256 newImpairReserve);\\n    event TargetYieldChanged(uint16 newTargetYield);\\n\\n    // Functions\\n    function approveInvoice(uint256 invoiceId, uint16 _interestApr, uint16 _spreadBps, uint16 _upfrontBps, uint16 minDaysInterestApplied) external;\\n    function pricePerShare() external view returns (uint256);\\n    function fundInvoice(uint256 invoiceId, uint16 factorerUpfrontBps, address receiverAddress) external returns (uint256);\\n    function viewPoolStatus() external view returns (uint256[] memory paidInvoices, uint256[] memory impairedInvoices);\\n    function reconcileActivePaidInvoices() external;\\n    function setGracePeriodDays(uint256 _days) external;\\n    function setApprovalDuration(uint256 _duration) external;\\n    function assetAddress() external view returns (IERC20);\\n}\",\"keccak256\":\"0x3ab3eae8e205621556f4bcc2cab79767dc6ec002f279bfb3b97a3de338e00011\",\"license\":\"MIT\"},\"contracts/interfaces/IInvoiceProviderAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.20;\\n\\n/// @notice Interface for the invoice provider adapter contract\\ninterface IInvoiceProviderAdapterV2 {\\n\\n    struct Invoice {\\n        uint256 invoiceAmount;\\n        address creditor;\\n        address debtor;\\n        uint256 dueDate;\\n        address tokenAddress;\\n        uint256 paidAmount;\\n        bool isCanceled;\\n        bool isPaid;\\n    }\\n\\n    function getInvoiceDetails(uint256 invoiceId) external view returns (Invoice memory);\\n    function getInvoiceContractAddress(uint256 invoiceId) external view returns (address);\\n}\",\"keccak256\":\"0x1dfc6f5f70b7a842ad8e47ac524fe91c7b813e080c964e7b07843f9fbf7e5aec\",\"license\":\"BUSL-1.1\"},\"lib/forge-std/src/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, int256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,int256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n}\\n\",\"keccak256\":\"0x4bbf47eb762cef93729d6ef15e78789957147039b113e5d4df48e3d3fd16d0f5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361015610011575f80fd5b5f3560e01c8063015995ad1461058a57806301e1d1141461058557806306fdde031461058057806307a2d13a1461050d57806308bb5f7b1461057b578063095ea7b3146105765780630a22d68c146105715780630a28a4771461056c5780630ce6b419146105675780631348ed5e14610562578063173693241461055d57806318160ddd146105585780631859caa8146105535780631ba46cfd1461054e5780631be4c4d41461054957806323b872dd146105445780632d896b2a1461053f5780632f3183e71461053a5780632f5d8aa914610535578063313ce5671461053057806335659fb81461052b57806338d52e0f14610526578063402d267d1461044a57806342b3b12b1461052157806344fcb5cc1461051c57806345b3677314610517578063494112ac146105125780634cdad5061461050d57806353a3417b1461050857806356984d9f14610503578063591e1788146104fe5780635e20bfc8146104f95780636e553f65146104f45780636f31ab34146104ef578063706a3f7d146104ea57806370a08231146104e5578063715018a6146104e057806372c5c144146104db57806376138f55146104d65780637fbc9622146104d1578063800120fa146104cc57806383de3aed146104c75780638795cccb146104c25780638c335f9b146104bd5780638da5cb5b146104b85780638e73836c146104b357806394bf804d146104ae578063951e4bee146104a957806395d89b41146104a4578063987699261461049f5780639948ff451461049a57806399530b0614610495578063a36e9fe714610490578063a3d1612c1461048b578063a85f571414610486578063a9059cbb14610481578063ac27a24f1461047c578063b331108614610477578063b3d7f6b914610472578063b460af941461046d578063b73afe8c14610468578063b9b060b014610463578063ba0876521461045e578063be37b12c14610459578063c42f18f514610454578063c5c1d2461461044f578063c63d75b61461044a578063c6e6f59214610445578063ce96cb7714610440578063cec5a5581461043b578063cf0160f914610436578063d8cf9e3814610431578063d905777e1461042c578063dc2dc8ff14610427578063dd0a12bc14610422578063dd62ed3e1461041d578063e22ddb5214610418578063e300a0f414610413578063e6f0681c1461040e578063e72f0f0514610409578063e9ff17ef14610404578063ec233684146103ff578063ef8b30f7146103fa578063efe0707b146103f5578063f00db260146103f0578063f2fde38b146103eb578063f3466dfa146103e65763fa1fc2e9146103e1575f80fd5b6130df565b6130b0565b612f65565b612f3d565b612ec4565b612ea6565b612dd6565b612d26565b612d09565b612ce5565b612ca8565b612c80565b612c21565b612c00565b6128f1565b6128b6565b612866565b61277d565b612731565b61270a565b6126ec565b6111af565b6126c4565b61266d565b6125dd565b6125c4565b612514565b6124ac565b612389565b612342565b612325565b6122ac565b612282565b61225a565b612228565b6121a6565b612113565b6120eb565b6120d1565b61201c565b611ff2565b611fc7565b611fad565b611f85565b611a9e565b6119fc565b6119e2565b611972565b61194a565b611763565b611749565b6116ee565b6116b2565b61166d565b611653565b611629565b61160c565b6115ce565b61158b565b6114ed565b610a1c565b61135f565b61127f565b6111f3565b6111d6565b61116b565b611147565b611122565b6110b2565b61103b565b61101e565b610fd3565b610e98565b610e70565b610c77565b610c5a565b610c32565b610c15565b610bc9565b610bab565b610b8e565b610ad1565b610a4b565b610929565b6108cf565b6105f9565b6024359061ffff821682036105a057565b5f80fd5b6044359061ffff821682036105a057565b6064359061ffff821682036105a057565b6084359061ffff821682036105a057565b60a4359061ffff821682036105a057565b6004359061ffff821682036105a057565b346105a05760a03660031901126105a05760043561061561058f565b61061d6105a4565b906106266105b5565b9161062f6105c6565b61ffff841680159081156108b9575b506108aa57600f54610660906001600160a01b03165b6001600160a01b031690565b330361089b57610672601c544261316d565b600b5490949061068a906001600160a01b0316610654565b60405163484d384560e11b815260048101889052929061010090849060249082905afa928315610896575f93610865575b508251936106cf60a0850195865190613225565b15610856576020840180519093906001600160a01b03166001600160a01b031630146108475760808501516001600160a01b0316600a5461071a90610654906001600160a01b031681565b6001600160a01b0390911603610838576006549060a082901c61ffff169160b01c61ffff1692610748611301565b61ffff909916895261ffff16602089015261ffff16604088015261ffff16606087015261ffff16608086015261ffff1660a0850152516001600160a01b031691815190519160600151610799611312565b60018152936001600160a01b031660208501528560408501526060840152608083015f90528360a084015260c083015f905260e083015f905261010083015261012082015261014081015f90526107f8845f52601b60205260405f2090565b9061080291613232565b60405191829161081291836133a2565b037f9a6de9d77d72a8097b391e8a8de244f0be5f1344b06d6c4f000bd98f08c7b16691a2005b6322b96ac960e01b5f5260045ffd5b639c20501360e01b5f5260045ffd5b63c627ace960e01b5f5260045ffd5b6108889193506101003d811161088f575b61088081836112df565b810190613192565b915f6106bb565b503d610876565b61321a565b632e83528960e01b5f5260045ffd5b631f3b85d360e01b5f5260045ffd5b6127109150115f61063e565b5f9103126105a057565b346105a0575f3660031901126105a05760206108e96133b8565b604051908152f35b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b9060206109269281815201906108f1565b90565b346105a0575f3660031901126105a0576040515f6003548060011c9060018116908115610a12575b6020831082146109fe5782855260208501919081156109e55750600114610993575b61098f84610983818603826112df565b60405191829182610915565b0390f35b60035f9081529250907fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b8184106109d15750500161098382610973565b8054848401526020909301926001016109be565b60ff191682525090151560051b01905061098382610973565b634e487b7160e01b5f52602260045260245ffd5b91607f1691610951565b346105a05760203660031901126105a05760206108e960043561440d565b6001600160a01b038116036105a057565b346105a05760203660031901126105a057600435610a6881610a3a565b610a70614446565b6001600160a01b03168015610ac257600f80546001600160a01b0319811683179091556001600160a01b03167fae536502f25a82de70abed467008489d54fa0cbf58cdc51718efe6d49406724f5f80a3005b63e6c4247b60e01b5f5260045ffd5b346105a05760403660031901126105a057600435610aee81610a3a565b6024353315610b7b576001600160a01b038216918215610b6857610b2e8291335f52600160205260405f209060018060a01b03165f5260205260405f2090565b5560405190815233907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590602090a3602060405160018152f35b634a1406b160e11b5f525f60045260245ffd5b63e602df0560e01b5f525f60045260245ffd5b346105a0575f3660031901126105a0576020600754604051908152f35b346105a05760203660031901126105a05760206108e960043561446d565b346105a05760203660031901126105a0577fe595c99430465234d1ec90ffa3458590c544d5349139442d6911452a7b8e82fa6020600435610c08614446565b80601455604051908152a1005b346105a0575f3660031901126105a0576020601454604051908152f35b346105a0575f3660031901126105a0576015546040516001600160a01b039091168152602090f35b346105a0575f3660031901126105a0576020600254604051908152f35b346105a05760403660031901126105a057600435602435600e54610ca590610654906001600160a01b031681565b3303610e6157610cc5610cc0835f52602160205260405f2090565b613434565b610cd6610cd28251151590565b1590565b610e5257610cf6610cef835f52601b60205260405f2090565b5460ff1690565b610e435782610e246040610e197f35284f4a1ce24397c38a20540fd2ed28844bd658c44b1f0bd206c8fd3861262494610d47610d3d610d76995f52602160205260405f2090565b805460ff19169055565b610d50856144a2565b610dd26020820151610dcd6080840197885194878101956060875192019d8e514261316d565b610d7e611312565b6001815295306020880152868b0152606086015242608086015260a085015260c0840181905260e084018190526101008401525f610120840152306101408401525f52601b60205260405f2090565b613232565b610e0730610de8895f52601a60205260405f2090565b80546001600160a01b0319166001600160a01b03909216919091179055565b610e108761348d565b5196514261316d565b9251015161ffff1690565b60408051958652602086019290925261ffff16908401523092606090a3005b631df7d2dd60e01b5f5260045ffd5b632c0d11d960e01b5f5260045ffd5b6332d10c3f60e01b5f5260045ffd5b346105a0575f3660031901126105a057600a546040516001600160a01b039091168152602090f35b346105a05760203660031901126105a057600435610eb4614446565b6011548015610fc457610ec9610cd283614587565b610fb557610eeb6002610ee3845f526020805260405f2090565b015460ff1690565b610fa6577ff95dd13343beabbe284b7f97d54b2d4fda5841bab502d60164e8ede601fbe3ac906006610f25845f52601b60205260405f2090565b0154610f43610f3e610f378460011c90565b8094613225565b601155565b610f4c84614600565b610f55846134c3565b610f8c610f60611322565b838152826020820152610f766040820160019052565b610f87865f526020805260405f2090565b613578565b60408051918252602082019290925290819081015b0390a2005b633235e0c760e21b5f5260045ffd5b632d9bb54f60e11b5f5260045ffd5b6357154c3f60e01b5f5260045ffd5b346105a05760603660031901126105a057611013600435610ff381610a3a565b602435610fff81610a3a565b6044359161100e8333836146a1565b614749565b602060405160018152f35b346105a0575f3660031901126105a0576020600854604051908152f35b346105a05760a03660031901126105a05760243560043561105b82610a3a565b60603660431901126105a05761107360209282613e33565b907f393f5b2cbcf0aa47eaec63eb01049e213dc0a29e5bf9b323471be5f5125fc50c604051806110a76044863396846135b0565b0390a2604051908152f35b346105a05760203660031901126105a0577f93e489c437f6f04520047095a2da3d2f1ee89075b945d9283437bd175a6a79a160206004356110f281610a3a565b6110fa614446565b601680546001600160a01b0319166001600160a01b03929092169182179055604051908152a1005b346105a0575f3660031901126105a057602061113c6135f3565b60ff60405191168152f35b346105a0575f3660031901126105a057602061ffff60065460a01c16604051908152f35b346105a0575f3660031901126105a0576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346105a05760203660031901126105a0576111cb600435610a3a565b60206040515f198152f35b346105a0575f3660031901126105a0576020600954604051908152f35b346105a05760203660031901126105a05760043561120f614446565b60115480821061127057810381811161126b577f96ef0ad874bac1a0f28dd6bb42d3cd79816d65910307ac7d95d97bb464cbb94a9161125e60209260018060a01b03600a541630903390614845565b80601155604051908152a1005b613159565b631506ed4b60e01b5f5260045ffd5b346105a05760203660031901126105a0576004355f526019602052602060405f2054604051908152f35b634e487b7160e01b5f52604160045260245ffd5b610100810190811067ffffffffffffffff8211176112da57604052565b6112a9565b90601f8019910116810190811067ffffffffffffffff8211176112da57604052565b6040519061131060c0836112df565b565b60405190611310610160836112df565b604051906113106060836112df565b60405190611310610140836112df565b604051906113106040836112df565b6040519061131060a0836112df565b346105a05760e03660031901126105a05760043561137c81610a3a565b61138461058f565b9061138d6105a4565b9060643560843561139c6105d7565b9160c4359467ffffffffffffffff86116105a057366023870112156105a05785600401359667ffffffffffffffff88116112da57604051956113e8601f8a01601f1916602001886112df565b8887523660248a8a0101116105a0575f60208a61098f9b60246114139c01838c0137890101526138a4565b6040519081529081906020820190565b9060405160c081019080821067ffffffffffffffff8311176112da576113109160405260a061149f82955461ffff8116845261ffff8160101c16602085015261ffff8160201c16604085015261148761ffff8260301c16606086019061ffff169052565b61ffff604082901c16608085015260501c61ffff1690565b61ffff16910152565b61ffff60a08092828151168552826020820151166020860152826040820151166040860152826060820151166060860152826080820151166080860152015116910152565b346105a05760203660031901126105a0576004355f52602160205261014060405f2061155660ff825416916001810154906002810154611534600460038401549301611423565b92604051951515865260208601526040850152606084015260808301906114a8565bf35b90602080835192838152019201905f5b8181106115755750505090565b8251845260209384019390920191600101611568565b346105a0575f3660031901126105a0576115c061098f6115a9613b8e565b604092919251938493604085526040850190611558565b908382036020850152611558565b346105a05760203660031901126105a05760a06115ec600435613d47565b926040929192519485526020850152604084015260608301526080820152f35b346105a0575f3660031901126105a0576020601c54604051908152f35b346105a05760403660031901126105a05760206108e960243560043561164e82610a3a565b613e33565b346105a0575f3660031901126105a05760206108e9613eb3565b346105a05760203660031901126105a0576004355f5260208052606060405f2080549060ff600260018301549201541690604051928352602083015215156040820152f35b346105a05760203660031901126105a05760206108e96004356116d481610a3a565b6001600160a01b03165f9081526020819052604090205490565b346105a0575f3660031901126105a057611706614446565b600580546001600160a01b031981169091555f906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346105a0575f3660031901126105a05760206108e9613f09565b346105a0575f3660031901126105a05761177b613b8e565b505f5b8151811015611915578061189f61179760019385613b7a565b517ff4b7ee7b3c866d6de6f4e7e344e9be6acc18862b774122bedba082657a30e8d16117c282613d47565b92969193906117d48482878b8b614dbb565b6117f960096117eb895f52601b60205260405f2090565b01546001600160a01b031690565b93826118b6575b6118166002610ee38a5f526020805260405f2090565b156118a85761182488614e89565b611849611838895f526020805260405f2090565b60025f918281558260018201550155565b60e06118656118608a5f52601b60205260405f2090565b613c83565b0151916040519687968d8060a01b03169a879260a094919796959260c0850198855260208501526040840152606083015260808201520152565b0390a30161177e565b6118b188614600565b611849565b600a546118cf90849087906001600160a01b0316614e50565b604051887ff0552a3665368b7e77abbd2bbfe72b2615793841acfd3da5b7df5f330cc00eae8d8060a01b038816928061190d88829190602083019252565b0390a3611800565b6040517f71c060a755cff9c84db9f4be3b4fac0b83f3ffe4e7ff3ebc0be0420d28fb1de090806119458582613ffb565b0390a1005b346105a0575f3660031901126105a057600b546040516001600160a01b039091168152602090f35b346105a05760203660031901126105a0577fbc05deec4ecd4d9295d36f7434b1feee89ac308d4040e0133f06bff4635cf70a60206004356119b281610a3a565b6119ba614446565b601780546001600160a01b0319166001600160a01b03929092169182179055604051908152a1005b346105a0575f3660031901126105a05760206108e961400c565b346105a0575f3660031901126105a0576006546001600160a01b031633819003611a8f57600754908115611a80575f600755600a54611a459183916001600160a01b0316614e50565b6006546040519182526001600160a01b0316907fa087657e3d85162090ffd700fbfdf5070d816f63aa5da00063f6ffd369c8a6db90602090a2005b630d00db4d60e31b5f5260045ffd5b6307c68f0f60e11b5f5260045ffd5b346105a05760603660031901126105a057600435611aba61058f565b60443590611ac782610a3a565b601754611adc906001600160a01b0316610654565b60405163babcc53960e01b815233600482015290602090829060249082905afa908115610896575f91611f56575b5015611f4357611b28610cd2610cef855f52601b60205260405f2090565b611f3457611b59611b526004611b46865f52601b60205260405f2090565b015460201c61ffff1690565b61ffff1690565b61ffff8216908111908115611f2b575b506108aa576001611b82845f52601b60205260405f2090565b01544211611f1c57600b54611b9f906001600160a01b0316610654565b60405163484d384560e11b8152600481018590529061010090829060249082905afa908115610896575f91611efd575b5060c0810151611eee576008611bed855f52601b60205260405f2090565b015460a082015103611edf57611c356106546020611c26611c16885f52601b60205260405f2090565b5460081c6001600160a01b031690565b9301516001600160a01b031690565b6001600160a01b0390911603611ed057611c4f8184614203565b96949350505050611c5e6133b8565b808511611eba57506005611c7a865f52601b60205260405f2090565b0155826006611c91865f52601b60205260405f2090565b0155426003611ca8865f52601b60205260405f2090565b0155611ce1826004611cc2875f52601b60205260405f2090565b019065ffff0000000082549160201b169065ffff000000001916179055565b826001600160a01b038216611eb157611d409150335b611d2f816009611d0f895f52601b60205260405f2090565b0180546001600160a01b0319166001600160a01b03909216919091179055565b600a546001600160a01b0316614e50565b600b54611d55906001600160a01b0316610654565b604051631d14b7f760e31b81526004810185905290602090829060249082905afa908115610896575f91611e82575b506001600160a01b031692833b156105a0576040516323b872dd60e01b815233600482015230602482015260448101829052935f908590606490829084905af19384156108965761098f94611e68575b50611deb33610de8835f52601a60205260405f2090565b611df48161348d565b7f35284f4a1ce24397c38a20540fd2ed28844bd658c44b1f0bd206c8fd38612624611e556002611e2c845f52601b60205260405f2090565b0154936040519182913396888491604091949361ffff9160608501968552602085015216910152565b0390a36040519081529081906020820190565b80611e765f611e7c936112df565b806108c5565b5f611dd4565b611ea4915060203d602011611eaa575b611e9c81836112df565b810190614076565b5f611d84565b503d611e92565b611d4091611cf7565b62fae2d560e21b5f52600452602484905260445ffd5b63f18c77f960e01b5f5260045ffd5b63971ccc7760e01b5f5260045ffd5b637ccc2bd960e11b5f5260045ffd5b611f1691506101003d811161088f5761088081836112df565b5f611bcf565b634aad99a560e11b5f5260045ffd5b9050155f611b69565b63649ac74160e11b5f5260045ffd5b637190a79560e11b5f523360045260245ffd5b611f78915060203d602011611f7e575b611f7081836112df565b810190613e1f565b5f611b0a565b503d611f66565b346105a0575f3660031901126105a0576005546040516001600160a01b039091168152602090f35b346105a0575f3660031901126105a05760206108e961408b565b346105a05760403660031901126105a057611fe3602435610a3a565b6369bd111d60e11b5f5260045ffd5b346105a05760203660031901126105a0576004355f526018602052602060405f2054604051908152f35b346105a0575f3660031901126105a0576040515f6004548060011c90600181169081156120c7575b6020831082146109fe5782855260208501919081156109e557506001146120755761098f84610983818603826112df565b60045f9081529250907f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8184106120b35750500161098382610973565b8054848401526020909301926001016120a0565b91607f1691612044565b346105a0575f3660031901126105a05760206108e96140b5565b346105a0575f3660031901126105a0576006546040516001600160a01b039091168152602090f35b346105a0575f3660031901126105a05760206108e96121386121336135f3565b614118565b61440d565b999693612180936101e09a97939d9c9996929d6102008d019e15158d5260018060a01b031660208d015260408c015260608b015260808a015260a08901906114a8565b6101608701526101808601526101a08501526101c08401526001600160a01b0316910152565b346105a05760203660031901126105a0576004355f52601b60205260405f20805461098f60018301549260028101549060038101546121e760048301611423565b6005830154600684015491600785015493600886015495600960018060a01b0391015416966040519a8b9a60ff60018060a01b038260081c1691168c61213d565b346105a05760203660031901126105a0576004355f52601a602052602060018060a01b0360405f205416604051908152f35b346105a0575f3660031901126105a0576017546040516001600160a01b039091168152602090f35b346105a05760403660031901126105a0576110136004356122a281610a3a565b6024359033614749565b346105a05760203660031901126105a0576122c56105e8565b6122cd614446565b61ffff81169061271082116108aa576006805461ffff60b01b19811660b093841b61ffff60b01b1617909155901c61ffff167fcc9b1d1e60d76e8755bd2ceaeb3d3ccfe5e5bb556097b7ce618b0a60480ef3e15f80a3005b346105a0575f3660031901126105a0576020601054604051908152f35b346105a05760203660031901126105a05760206108e960043561442e565b60609060031901126105a0576004359060243561237c81610a3a565b9060443561092681610a3a565b346105a05761239736612360565b601654909291906123b0906001600160a01b0316610654565b60405163babcc53960e01b8152336004820152602081602481855afa908115610896575f9161248d575b501561247a5760405163babcc53960e01b81526001600160a01b038516600482015290602090829060249082905afa908115610896575f9161245b575b501561243f5761243a61243161098f946114139385614f3d565b92600d5461316d565b600d55565b635ebb5e2160e11b5f526001600160a01b03831660045260245ffd5b612474915060203d602011611f7e57611f7081836112df565b5f612417565b635ebb5e2160e11b5f523360045260245ffd5b6124a6915060203d602011611f7e57611f7081836112df565b5f6123da565b346105a05760203660031901126105a05761ffff6124c86105e8565b6124d0614446565b1661271081116108aa576020817f70804697a7389a86ccbf4594ad23c117ecf0a1ffb94ae9516dc15f85ac7c29c89261ffff196013541617601355604051908152a1005b346105a0575f3660031901126105a05761252c614446565b6008546009549081810180821161126b578015611a80575f6008819055600955600a54612564919033906001600160a01b0316614e50565b6040519081527fcdcaff67ac16639664e5f9343c9223a1dc9c972ec367b69ae9fc1325c7be547460203392a260405190815233907f0af619ed8af584dcf5cc78faac4031c6286187dd1d2d7a82e466a0e6242e3b35908060208101610fa1565b346105a05760206108e96125d736612360565b91614129565b346105a05760203660031901126105a0576125f66105e8565b600654906001600160a01b0382163303611a8f5761ffff81169161271083116108aa5761ffff60a01b19811660a092831b61ffff60a01b1617600655604080519190921c61ffff16815260208101929092527f2ea630a8e6f6f7590aa81eb8993a1c4a49a0913effd00467ddd761d45867a3ee91a1005b346105a05760403660031901126105a05761098f61269560043561268f61058f565b90614203565b604080519687526020870195909552938501929092526060840152608083015260a082015290819060c0820190565b346105a0575f3660031901126105a057600e546040516001600160a01b039091168152602090f35b346105a05760203660031901126105a05760206108e960043561448b565b346105a05760203660031901126105a05760206108e960043561272c81610a3a565b614342565b346105a05760203660031901126105a0577f6afefcb7619ccdb73c8fdd4304d507509f1d2327b6f29ff2b9c77a1fa760687d6020600435612770614446565b80601c55604051908152a1005b346105a05760203660031901126105a0577ff6a412f75fe107fb805f9acb0408b3ac23ff1d0381fc83f6ef4352a8c9727f8960206004356127bd81610a3a565b6127c5614446565b601580546001600160a01b0319166001600160a01b03929092169182179055604051908152a1005b634e487b7160e01b5f52603260045260245ffd5b601d5481101561281957601d5f5260205f2001905f90565b6127ed565b601f5481101561281957601f5f5260205f2001905f90565b601e5481101561281957601e5f5260205f2001905f90565b6022548110156128195760225f5260205f2001905f90565b346105a05760203660031901126105a0576004356022548110156105a05760209060225f527f61035b26e3e9eee00e0d72fd1ee8ddca6894550dca6916ea2ac6baa90d11e5100154604051908152f35b346105a05760203660031901126105a05760206128d86004356116d481610a3a565b6128e0613eb3565b908180821091180218604051908152f35b346105a05760203660031901126105a05760043561290e816149d3565b612bf157612934612927825f52601a60205260405f2090565b546001600160a01b031690565b336001600160a01b03821603612be257612959611860835f52601b60205260405f2090565b600b54909190612971906001600160a01b0316610654565b60405163484d384560e11b815260048101859052919061010090839060249082905afa918215610896576129f3612a076129f86129e36129f3966129f3955f91612bc3575b5060e08901519860808101518042115f14612bbb576129d86129dd9142613225565b614a38565b90614ab7565b509582829a8589969a959d61316d565b61316d565b612a01886151a2565b90613ef1565b935f851315612b8e57600a54612a2a9086906001600160a01b0316863091614845565b600b54612a3f906001600160a01b0316610654565b604051631d14b7f760e31b81526004810189905290602090829060249082905afa908115610896575f91612b6f575b506001600160a01b031695863b156105a0576040516323b872dd60e01b81523060048201526001600160a01b038616602482015260448101899052965f908890606490829084905af1938415610896577f7b7fc0959014b873972d408951ea66a16dde2b5e376c2ce9b0eb3bc7b6d30b3297610fa195612b5b575b50612af389614600565b612b00848484848d614dbb565b612b25612b158a5f52601a60205260405f2090565b80546001600160a01b0319169055565b604051968796879260a094919796959260c0850198600180881b0316855260208501526040840152606083015260808201520152565b80611e765f612b69936112df565b5f612ae9565b612b88915060203d602011611eaa57611e9c81836112df565b5f612a6e565b5f851215612a2a57600a54612bb6906001600160a01b031685612bb088614371565b91614e50565b612a2a565b505f90614ab7565b612bdc91506101003d811161088f5761088081836112df565b5f6129b6565b6398c1b40760e01b5f5260045ffd5b631915f32960e11b5f5260045ffd5b346105a0575f3660031901126105a057602061ffff60135416604051908152f35b346105a05760403660031901126105a0576020612c77600435612c4381610a3a565b60243590612c5082610a3a565b60018060a01b03165f526001835260405f209060018060a01b03165f5260205260405f2090565b54604051908152f35b346105a0575f3660031901126105a0576016546040516001600160a01b039091168152602090f35b346105a05760203660031901126105a057600435601d548110156105a057602090601d5f525f5160206153cc5f395f51905f520154604051908152f35b346105a0575f3660031901126105a057602061ffff60065460b01c16604051908152f35b346105a0575f3660031901126105a0576020601154604051908152f35b346105a05760203660031901126105a05760206108e96004355f52601b602052600660405f20015490565b60208152610140610120612d7184518360208601526101608501906108f1565b93602081015160408501526040810151606085015260608101516080850152608081015160a085015260a081015160c085015260c081015160e0850152612dc460e082015161010086019061ffff169052565b61010081015182850152015191015290565b346105a0575f3660031901126105a057612dee614381565b5061098f612dfa6133b8565b61ffff612e0561400c565b91612e0e61408b565b92612e8d612e206121386121336135f3565b94612e29613eb3565b60105496612e3e60065461ffff9060b01c1690565b9260115495612e5060135461ffff1690565b97612e59611331565b9a612e62612fef565b8c5260208c015260408b015260608a0152608089015260a088015260c087015261ffff1660e0860152565b6101008401521661012082015260405191829182612d51565b346105a05760203660031901126105a05760206108e96004356143de565b346105a05760203660031901126105a057600435612ee181610a3a565b600654906001600160a01b0382169033829003611a8f576001600160a01b0316918215610ac2576001600160a01b03191682176006557f2e7dcd5549bd379d2c481c56fc3dbe7db94761cb60cbbc301f807e31cc4a99445f80a3005b346105a0575f3660031901126105a057600f546040516001600160a01b039091168152602090f35b346105a05760203660031901126105a057600435612f8281610a3a565b612f8a614446565b6001600160a01b03168015612fdc57600580546001600160a01b0319811683179091556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3005b631e4fbdf760e01b5f525f60045260245ffd5b604051905f6012548060011c916001821680156130a6575b6020841081146109fe578386528592602084019190811561308d5750600114613038575b50611310925003836112df565b60125f90815291507fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec34445b84831061307657506113109350015f61302b565b805482840152869350602090920191600101613062565b60ff191682525061131093151560051b0190505f61302b565b92607f1692613007565b346105a0575f3660031901126105a05761098f6130cb612fef565b6040519182916020835260208301906108f1565b346105a05760c03660031901126105a0576024356004356130ff82610a3a565b6044359161310c83610a3a565b60603660631901126105a0576020926131259183614129565b907f8b96c40bd23d041868dce7135e6994e68df1b292276db8f707c6c35873c1e201604051806110a76064863396846135b0565b634e487b7160e01b5f52601160045260245ffd5b9190820180921161126b57565b519061131082610a3a565b519081151582036105a057565b90816101009103126105a05761321260e0604051926131b0846112bd565b805184526131c06020820161317a565b60208501526131d16040820161317a565b6040850152606081015160608501526131ec6080820161317a565b608085015260a081015160a085015261320760c08201613185565b60c085015201613185565b60e082015290565b6040513d5f823e3d90fd5b9190820391821161126b57565b60096133816101406113109461325d61324b8251151590565b869060ff801983541691151516179055565b6020810151613291906001600160a01b03168654610100600160a81b03191660089190911b610100600160a81b0316178655565b60408101516001860155606081015160028601556080810151600386015561334960a082015160048701815181546020808501516040808701516060880151608089015160a0909901519890921b61ffff60401b1660309290921b67ffff00000000000016931b65ffff000000001660109290921b63ffff00001661ffff9095166bffffffffffffffffffffffff19909416939093179390931792909217919091171760509290921b61ffff60501b16919091179055565b60c0810151600586015560e081015160068601556101008101516007860155610120810151600886015501516001600160a01b031690565b910180546001600160a01b0319166001600160a01b03909216919091179055565b90815260e08101929161131091602001906114a8565b6133c061408b565b6133c861400c565b810390811161126b57601d545f929091835b83851015613427575f5160206153cc5f395f51905f528501545f908152601b6020526040902060058101549060060154810390811161126b57810180911161126b576001909401936133da565b9193506109269250613225565b9060405160a0810181811067ffffffffffffffff8211176112da5760405260806134886004839560ff8154161515855260018101546020860152600281015460408601526003810154606086015201611423565b910152565b601d54600160401b8110156112da5760018101601d55601d5481101561281957601d5f525f5160206153cc5f395f51905f520155565b601f54600160401b8110156112da5760018101601f55601f5481101561281957601f5f527fa03837a25210ee280c2113ff4b77ca23440b19d4866cca721c801278fd08d8070155565b602254600160401b8110156112da57600181016022556022548110156128195760225f527f61035b26e3e9eee00e0d72fd1ee8ddca6894550dca6916ea2ac6baa90d11e5100155565b634e487b7160e01b5f52601260045260245ffd5b8115613573570490565b613555565b600260406113109380518455602081015160018501550151151591019060ff801983541691151516179055565b60ff8116036105a057565b916040608092959460ff9260a0860197865260208601528035828601528260208201356135dc816135a5565b16606086015201356135ed816135a5565b16910152565b600a5460405163313ce56760e01b815290602090829060049082906001600160a01b03165afa908115610896575f9161362a575090565b90506020813d602011613657575b81613645602093836112df565b810103126105a05751610926816135a5565b3d9150613638565b9061ffff8091169116019061ffff821161126b57565b906201518082029180830462015180149015171561126b57565b906103e88202918083046103e8149015171561126b57565b908160209103126105a0575190565b602080825282518183015282810151805161ffff9081166040850152910151166060820152610926906040830151608082015260608301516001600160a01b031660a082015260808301516001600160a01b031660c082015261018061014061372e60a08601518360e08601526101a08501906108f1565b60c08601516001600160a01b03166101008501529460e081015161012085810191909152610100820151838601528101516001600160a01b031661016085015201516001600160e01b031916910152565b9061388860a060806004611310956137a686511515829060ff801983541691151516179055565b602086015160018201556040860151600282015560608601516003820155019301516137e361ffff825116859061ffff1661ffff19825416179055565b6020818101518554604084015165ffffffff00001990911660109290921b63ffff00001691909117911b65ffff000000001617845561384c61382a606083015161ffff1690565b855467ffff000000000000191660309190911b67ffff00000000000016178555565b61387f61385e608083015161ffff1690565b855469ffff0000000000000000191660409190911b61ffff60401b16178555565b015161ffff1690565b815461ffff60501b191660509190911b61ffff60501b16179055565b600f549296959394919391926138c2906001600160a01b0316610654565b330361089b5761016d61ffff8316116108aa57826139f1865f98602095613a239561393d61391d6138f38f8d61365f565b61390c6139126006549261390c8461ffff9060b01c1690565b9061365f565b9160a01c61ffff1690565b92613933613929611341565b61ffff9095168552565b61ffff16838a0152565b600a546139b6906001600160a01b0316936001600160a01b038516906139a1613967601454613675565b94613974601c544261316d565b9661397d611312565b9b8c528d8c015260408b018990523060608c01526001600160a01b031660808b0152565b60a08901526001600160a01b031660c0880152565b60e08601526101008501523061012085015263030b395560e31b610140850152600e546139eb906001600160a01b0316610654565b90614896565b600e54613a06906001600160a01b0316610654565b9060405197888094819363a15c24f360e01b8352600483016136b6565b03925af1938415610896575f94613aeb575b50613aa3613ae29495613a98600654613a85613a64613a598361ffff9060a01c1690565b9260b01c61ffff1690565b93613a7a613a70611301565b61ffff9099168952565b61ffff166020880152565b612710604087015261ffff166060860152565b61ffff166080840152565b5f60a0830152613ab1611350565b6001815292426020850152604084015260608301526080820152613add835f52602160205260405f2090565b61377f565b6109268161350c565b613ae29450613b14613aa39160203d602011613b1b575b613b0c81836112df565b8101906136a7565b9450613a35565b503d613b02565b67ffffffffffffffff81116112da5760051b60200190565b90613b4482613b22565b613b5160405191826112df565b8281528092613b62601f1991613b22565b0190602036910137565b5f19811461126b5760010190565b80518210156128195760209160051b010190565b601d5490601f5491613ba8613ba3848361316d565b613b3a565b90613bb281613b3a565b935f905f925f5b818110613c1d5750505f5b818110613bd5575050825283529190565b80613bee613be460019361281e565b90549060031b1c90565b613bf7816149d3565b613c03575b5001613bc4565b613c16613c0f86613b6c565b9588613b7a565b525f613bfc565b80613c2c613be4600193612801565b613c35816149d3565b15613c5557613c4d613c4687613b6c565b9689613b7a565b525b01613bb9565b613c5e81614587565b613c69575b50613c4f565b613c7c613c7588613b6c565b978b613b7a565b525f613c63565b90611310613d366009613c94611312565b94613ccf613cbf8254613cb0613caa8260ff1690565b15158a52565b60081c6001600160a01b031690565b6001600160a01b03166020880152565b600181015460408701526002810154606087015260038101546080870152613cf960048201611423565b60a0870152600581015460c0870152600681015460e08701526007810154610100870152600881015461012087015201546001600160a01b031690565b6001600160a01b0316610140840152565b613d9b90610100613d63611860835f52601b60205260405f2090565b600b54909290613d7b906001600160a01b0316610654565b604051808096819463484d384560e11b8352600483019190602083019252565b03915afa90811561089657613df1925f92613dfe575b5060808101518042115f14613df457613dd06129d86129dd9242613225565b60a0838101510151613de59061ffff16611b52565b90818082119118021890565b94565b506129dd5f613dd0565b613e189192506101003d811161088f5761088081836112df565b905f613db1565b908160209103126105a05761092690613185565b60155460405163babcc53960e01b815233600482015291929190602090829060249082906001600160a01b03165afa908115610896575f91613e94575b501561247a57613e8f613e866109269284614cd3565b92600c5461316d565b600c55565b613ead915060203d602011611f7e57611f7081836112df565b5f613e70565b613ebb6133b8565b613ec361408b565b15613ed1576109269061448b565b505f90565b9190915f838201938412911290801582169115161761126b57565b81810392915f13801582851316918412161761126b57565b5f5f601e545b808210613fce5750505f601f545b808210613f84575050601d545f5b818110613f3757505090565b613f43613be482612801565b613f4c81614587565b613f5a575b50600101613f2b565b600191936006613f75613f7d935f52601b60205260405f2090565b015490613ef1565b9290613f51565b9091613fc660019182613f75613fb8613f9f613be48961281e565b93613fb1855f526020805260405f2090565b5490613ed6565b925f526020805260405f2090565b920190613f1d565b9091613ff3600191613fb1613fe5613be487612836565b5f52601860205260405f2090565b920190613f0f565b906020610926928181520190611558565b601d545f91825b8284101561407057601d5f52835f5160206153cc5f395f51905f52015461403981614587565b1561405557505f5b810180911161126b57600190930192614013565b61406b905f52601b602052600660405f20015490565b614041565b92509050565b908160209103126105a0575161092681610a3a565b6140aa614096613f09565b6140a5600c54600d5490613ef1565b613ed6565b5f811315613ed15790565b601d545f91825b8281101561411357601d5f52805f5160206153cc5f395f51905f5201546140e281614587565b156140f1575b506001016140bc565b6140fd90949194613d47565b5050509050810180911161126b579260016140e8565b509050565b60ff16604d811161126b57600a0a90565b60165461413e906001600160a01b0316610654565b60405163babcc53960e01b8152336004820152602081602481855afa908115610896575f916141e4575b501561247a5760405163babcc53960e01b81526001600160a01b038516600482015290602090829060249082905afa908115610896575f916141c5575b501561243f57906141b69291614f8d565b61092661243a82600d5461316d565b6141de915060203d602011611f7e57611f7081836112df565b5f6141a5565b6141fd915060203d602011611f7e57611f7081836112df565b5f614168565b9190614258610100614220611860865f52601b60205260405f2090565b600b54909590614238906001600160a01b0316610654565b604051808095819463484d384560e11b8352600483019190602083019252565b03915afa908115610896575f91614323575b50614278610cd28551151590565b611f345760a084019361ffff614297611b5260408851015161ffff1690565b9316928311801561431b575b6108aa576129dd6142cb6142f1946142c661010085015161012086015190613225565b614ffa565b95613de5611b5260a06142e66129d860608801514290613225565b9351015161ffff1690565b50949091929361431261430c846129f3876129f38a8c61316d565b83613225565b91959493929190565b5082156142a3565b61433c91506101003d811161088f5761088081836112df565b5f61426a565b60018060a01b03165f525f60205261435d60405f205461440d565b6143656133b8565b90818082109118021890565b600160ff1b811461126b575f0390565b60405190610140820182811067ffffffffffffffff8211176112da576040525f61012083606081528260208201528260408201528260608201528260808201528260a08201528260c08201528260e0820152826101008201520152565b6143e661408b565b600254806143f357505090565b6143fb6140b5565b820180921161126b5761092692615117565b600254801561442a575f906109269261442461408b565b90614a59565b5090565b600254801561442a576001906109269261442461408b565b6005546001600160a01b0316330361445a57565b63118cdaa760e01b5f523360045260245ffd5b600254801561442a576109269160019161448561408b565b91614a59565b600254801561442a57610926915f9161448561408b565b5f5b602254808210156145825760225f5282827f61035b26e3e9eee00e0d72fd1ee8ddca6894550dca6916ea2ac6baa90d11e5100154146144e657506001016144a4565b5f1981019250821161126b5761450e6145016145269361284e565b90549060031b1c9161284e565b90919082549060031b91821b915f19901b1916179055565b602254801561456e575f198101906022548210156128195760225f9081527f61035b26e3e9eee00e0d72fd1ee8ddca6894550dca6916ea2ac6baa90d11e50f90910155602255565b634e487b7160e01b5f52603160045260245ffd5b505050565b600b5460405163484d384560e11b8152600481019290925261010090829060249082906001600160a01b03165afa8015610896576060915f916145e1575b5001516145d3601454613675565b810180911161126b57421190565b6145fa91506101003d811161088f5761088081836112df565b5f6145c5565b5f5b601d548082101561458257601d5f5282825f5160206153cc5f395f51905f520154146146315750600101614602565b5f1981019250821161126b5761450e61464c61465993612801565b90549060031b1c91612801565b601d54801561456e575f19810190601d5482101561281957601d5f9081527f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc146134e90910155601d55565b6001600160a01b039081165f81815260016020908152604080832094861683529390529190912091929091545f1981106146dc575b50505050565b818110614728578215610b7b576001600160a01b03841615610b685761471e925f526001602052039160405f209060018060a01b03165f5260205260405f2090565b555f8080806146d6565b83637dc7a0d960e11b5f5260018060a01b031660045260245260445260645ffd5b916001600160a01b038316918215614832576001600160a01b03811693841561481f576001600160a01b0381165f908152602081905260409020548381106147fa57916147e8916147ce857fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9695039160018060a01b03165f525f60205260405f2090565b556001600160a01b03165f90815260208190526040902090565b805482019055604051908152602090a3565b63391434e360e21b5f526001600160a01b03909116600452602452604482905260645ffd5b63ec442f0560e01b5f525f60045260245ffd5b634b637e8f60e11b5f525f60045260245ffd5b6040516323b872dd60e01b60208201526001600160a01b03928316602482015292909116604483015260648201929092526113109161489182608481015b03601f1981018452836112df565b615225565b604051636eb1769f60e11b81523060048201526001600160a01b038084166024830152929390926020908490604490829086165afa928315610896575f936149b2575b50820180921161126b5760405163095ea7b360e01b60208083019182526001600160a01b03861660248401526044808401959095529382529092905f906149216064866112df565b84519082855af15f51903d81614986575b501590505b61494057505050565b60405163095ea7b360e01b60208201526001600160a01b039390931660248401525f604480850191909152835261131092614891906149806064826112df565b82615225565b151590506149a657506149376001600160a01b0382163b15155b5f614932565b600161493791146149a0565b6149cc91935060203d602011613b1b57613b0c81836112df565b915f6148d9565b600b5460405163484d384560e11b8152600481019290925261010090829060249082906001600160a01b03165afa80156108965760e0915f91614a19575b500151151590565b614a3291506101003d811161088f5761088081836112df565b5f614a11565b620151806001614a49828285615117565b92091515810180911161126b5790565b9190614a66828285615117565b936004811015614aa3576001809116149283614a8e575b5050501515810180911161126b5790565b909180935015613573570915155f8080614a7d565b634e487b7160e01b5f52602160045260245ffd5b60a08101805151929490928590614ad19061ffff1661368f565b90614adb91615061565b9185845160200151614aee9061ffff1690565b61ffff16614afb9061368f565b90614b0591615061565b9580855160800151614b189061ffff1690565b61ffff16614b259061368f565b90614b2f91615061565b945160600151614b429061ffff1661368f565b90614b4c91615061565b84614b57888661316d565b90614b619161316d565b90614b6b9161316d565b9261010082015195846101208401978851614b8591613225565b9360e001938451898183115f1493614be094614cba57614bcf614bda91614bc9614bc1614bb5613de59789613225565b955b8a51905190613225565b8b5190613225565b956150b4565b808518818610021890565b92613225565b95851590868215614ca75750505f809781945b888415614c935750505f9a8b9889945b15614c655750505f9a614c2f614c4096614c2f614c348f614c2f614c2f99614c2f839a614c2f9a613225565b613225565b9d8e9851905190613225565b905180821115614c5c57614c5391613225565b915b9493929190565b50505f91614c55565b614c6f9183615117565b9a614c2f614c4096614c2f614c348f614c2f614c2f99614c2f839a614c2f9a613225565b614c9d9183615117565b9a8b988994614c03565b614cb19189615117565b80978194614bf3565b613de59250614bcf614bda91614bc9614bc15f95614bb7565b90614cdd826143de565b91614d138130337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316614845565b6001600160a01b03821691821561481f576002549084820180921161126b57614d4e9160025560018060a01b03165f525f60205260405f2090565b80548401905560405183815282905f907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602090a3604080519182526020820184905233917fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d79190a390565b9360085490810180911161126b57600855835f52601860205260405f2055825f5260196020528060405f205560095490810180911161126b5760095560075490810180911161126b57600755601e54600160401b8110156112da5760018101601e55601e5481101561281957601e5f527f50bb669a95c7b50b7e8a6f09454034b2b14cf2b85c730dca9a539ca82cb6e3500155565b60405163a9059cbb60e01b60208201526001600160a01b0390921660248301526044820192909252611310916148918260648101614883565b5f5b601f548082101561458257601f5f5282827fa03837a25210ee280c2113ff4b77ca23440b19d4866cca721c801278fd08d807015414614ecd5750600101614e8b565b5f1981019250821161126b5761450e614ee8614ef59361281e565b90549060031b1c9161281e565b601f54801561456e575f19810190601f5482101561281957601f5f9081527fa03837a25210ee280c2113ff4b77ca23440b19d4866cca721c801278fd08d80690910155601f55565b929190614f4982614342565b93848111614f6a5761092692939450614f618161446d565b9384923361527d565b925050633fa733bb60e21b5f5260018060a01b031660045260245260445260645ffd5b90614fa88360018060a01b03165f525f60205260405f205490565b614fb0613eb3565b908180821091180218808311614fd857509061092691614fcf8261440d565b9384913361527d565b8284632e52afbb60e21b5f5260018060a01b031660045260245260445260645ffd5b61500482826153a8565b9181156150565781612710111561504f577fbc01a36e2eb1c432ca57a786c226809d495182a9930be0ded288ce703afb7e9193612710910990828211900360fc1b910360041c170290565b60116153bb565b506127109250500490565b61506b82826153a8565b919080156150a95761016d111561504f577f4ff4c73064ff4c73064ff4c73064ff4c73064ff4c73064ff4c73064ff4c730659261016d910990030290565b5061016d9250500490565b6150be82826153a8565b91811561510b578162989680111561504f577f5fb648fcc913daa857a27e44a97d3c6bc1193a63a91cc45be5032477ae8d46a59362989680910990828211900360f91b910360071c170290565b50629896809250500490565b9161512282846153a8565b929093841561519557848311156151885790829109815f0382168092046002816003021880820260020302808202600203028082026002030280820260020302808202600203028091026002030293600183805f03040190848311900302920304170290565b60116003841502186153bb565b5050906109269250613569565b600b5460405163484d384560e11b8152600481018390529061010090829060249082906001600160a01b03165afa80156108965760a06151f8916008935f91615206575b500151925f52601b60205260405f2090565b0154810390811161126b5790565b61521f91506101003d811161088f5761088081836112df565b5f6151e6565b905f602091828151910182855af11561321a575f513d61527457506001600160a01b0381163b155b6152545750565b635274afe760e01b5f9081526001600160a01b0391909116600452602490fd5b6001141561524d565b6001600160a01b03808416959082169390929183878603615397575b50508515614832576001600160a01b0381165f908152602081905260409020548381106147fa5790615300847ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db959493039160018060a01b03165f525f60205260405f2090565b5561530e8260025403600255565b5f867fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6040518061534487829190602083019252565b0390a361537b85827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316614e50565b6040805195865260208601929092526001600160a01b031693a4565b6153a191836146a1565b5f83615299565b905f198183099102908180821091030391565b634e487b715f526020526024601cfdfe6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc146134fa2646970667358221220035768f4e527cbc27ded9145b279b6c3465a98cb92e32bece8e0208f7dde8d5d64736f6c634300081e0033",
  "devdoc": {
    "author": "@solidoracle",
    "errors": {
      "ERC20InsufficientAllowance(address,uint256,uint256)": [
        {
          "details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
          "params": {
            "allowance": "Amount of tokens a `spender` is allowed to operate with.",
            "needed": "Minimum amount required to perform a transfer.",
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC20InsufficientBalance(address,uint256,uint256)": [
        {
          "details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
          "params": {
            "balance": "Current balance for the interacting account.",
            "needed": "Minimum amount required to perform a transfer.",
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC20InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSpender(address)": [
        {
          "details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
          "params": {
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC4626ExceededMaxDeposit(address,uint256,uint256)": [
        {
          "details": "Attempted to deposit more assets than the max amount for `receiver`."
        }
      ],
      "ERC4626ExceededMaxMint(address,uint256,uint256)": [
        {
          "details": "Attempted to mint more shares than the max amount for `receiver`."
        }
      ],
      "ERC4626ExceededMaxRedeem(address,uint256,uint256)": [
        {
          "details": "Attempted to redeem more shares than the max amount for `receiver`."
        }
      ],
      "ERC4626ExceededMaxWithdraw(address,uint256,uint256)": [
        {
          "details": "Attempted to withdraw more assets than the max amount for `receiver`."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC-20 token failed."
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      }
    },
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "approveInvoice(uint256,uint16,uint16,uint16,uint16)": {
        "params": {
          "_spreadBps": "The spread in basis points to add on top of target yield",
          "_targetYieldBps": "The target yield in basis points",
          "_upfrontBps": "The maximum upfront percentage the factorer can request",
          "invoiceId": "The ID of the invoice to approve",
          "minDaysInterestApplied": "The minimum number of days interest must be applied"
        }
      },
      "asset()": {
        "details": "See {IERC4626-asset}. "
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "calculateAccruedProfits()": {
        "details": "Iterates through all active invoices, calculates interest for each and sums the net accrued interest",
        "returns": {
          "accruedProfits": "The total net accrued profits across all active invoices"
        }
      },
      "calculateCapitalAccount()": {
        "returns": {
          "_0": "The calculated capital account balance"
        }
      },
      "calculateKickbackAmount(uint256)": {
        "params": {
          "invoiceId": "The ID of the invoice for which to calculate the kickback amount"
        },
        "returns": {
          "kickbackAmount": "The calculated kickback amount",
          "trueAdminFee": "The true admin fee amount",
          "trueInterest": "The true interest amount",
          "trueProtocolFee": "The true protocol fee amount",
          "trueSpreadAmount": "The true spread amount"
        }
      },
      "calculateRealizedGainLoss()": {
        "returns": {
          "_0": "The total realized gain adjusted for losses"
        }
      },
      "calculateTargetFees(uint256,uint16)": {
        "params": {
          "factorerUpfrontBps": "The upfront bps specified by the factorer",
          "invoiceId": "The ID of the invoice for which to calculate the fees"
        },
        "returns": {
          "adminFee": "The target calculated admin fee",
          "fundedAmountGross": "The gross amount to be funded to the factorer",
          "netFundedAmount": "The net amount that will be funded to the factorer after deducting fees",
          "targetInterest": "The calculated interest fee",
          "targetProtocolFee": "The calculated protocol fee",
          "targetSpreadAmount": "The calculated spread amount"
        }
      },
      "constructor": {
        "params": {
          "_asset": "underlying supported stablecoin asset for deposit ",
          "_invoiceProviderAdapter": "adapter for invoice provider",
          "_underwriter": "address of the underwriter"
        }
      },
      "convertToAssets(uint256)": {
        "details": "See {IERC4626-convertToAssets}. "
      },
      "convertToShares(uint256)": {
        "details": "See {IERC4626-convertToShares}. "
      },
      "decimals()": {
        "returns": {
          "_0": "The number of decimals for this token"
        }
      },
      "deployedCapitalForActiveInvoicesExcludingImpaired()": {
        "returns": {
          "_0": "The total funded amount for all active invoices"
        }
      },
      "deposit(uint256,address)": {
        "params": {
          "assets": "The amount of assets to deposit",
          "receiver": "The address to receive the fund shares"
        },
        "returns": {
          "_0": "The number of shares issued for the deposit"
        }
      },
      "depositWithAttachment(uint256,address,(bytes32,uint8,uint8))": {
        "params": {
          "assets": "The amount of assets to deposit",
          "attachment": "The attachment data for the deposit",
          "receiver": "The address to receive the fund shares"
        },
        "returns": {
          "_0": "The number of shares issued for the deposit"
        }
      },
      "fundInvoice(uint256,uint16,address)": {
        "details": "No checks needed for the creditor, as transferFrom will revert unless it gets executed by the nft owner (i.e. claim creditor)",
        "params": {
          "factorerUpfrontBps": "factorer specified upfront bps",
          "invoiceId": "The ID of the invoice to fund",
          "receiverAddress": "Address to receive the funds, if address(0) then funds go to msg.sender"
        }
      },
      "getFundInfo()": {
        "returns": {
          "_0": "FundInfo The fund information"
        }
      },
      "impairInvoice(uint256)": {
        "params": {
          "invoiceId": "The ID of the invoice to impair"
        }
      },
      "maxDeposit(address)": {
        "details": "See {IERC4626-maxDeposit}. "
      },
      "maxMint(address)": {
        "details": "See {IERC4626-maxMint}. "
      },
      "maxRedeem()": {
        "returns": {
          "_0": "The maximum number of shares that can be redeemed"
        }
      },
      "maxRedeem(address)": {
        "params": {
          "_owner": "The owner of the shares being redeemed"
        },
        "returns": {
          "_0": "The maximum number of shares that can be redeemed"
        }
      },
      "maxWithdraw(address)": {
        "params": {
          "_owner": "The owner of the assets to be withdrawn"
        },
        "returns": {
          "_0": "The maximum number of assets that can be withdrawn"
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "previewDeposit(uint256)": {
        "details": "See {IERC4626-previewDeposit}. "
      },
      "previewMint(uint256)": {
        "details": "See {IERC4626-previewMint}. "
      },
      "previewRedeem(uint256)": {
        "details": "See {IERC4626-previewRedeem}. "
      },
      "previewWithdraw(uint256)": {
        "details": "See {IERC4626-previewWithdraw}. "
      },
      "pricePerShare()": {
        "returns": {
          "_0": "The current price per share, scaled to the underlying asset's decimal places"
        }
      },
      "reconcileActivePaidInvoices()": {
        "details": "This function should be called when viewPoolStatus returns some updates, to ensure accurate accounting"
      },
      "redeem(uint256,address,address)": {
        "params": {
          "_owner": "The owner of the shares being redeemed",
          "receiver": "The address to receive the assets",
          "shares": "The number of shares to redeem"
        },
        "returns": {
          "_0": "The number of shares redeemed"
        }
      },
      "redeemWithAttachment(uint256,address,address,(bytes32,uint8,uint8))": {
        "params": {
          "_owner": "The owner of the shares being redeemed",
          "attachment": "The attachment data for the redemption",
          "receiver": "The address to receive the redeemed assets",
          "shares": "The number of shares to redeem"
        },
        "returns": {
          "_0": "The amount of assets redeemed"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setAdminFeeBps(uint16)": {
        "params": {
          "_newAdminFeeBps": "The new admin fee in basis points"
        }
      },
      "setApprovalDuration(uint256)": {
        "details": "This function can only be called by the contract owner",
        "params": {
          "_duration": "The new duration in seconds"
        }
      },
      "setBullaDaoAddress(address)": {
        "params": {
          "_newBullaDao": "The new address for the Bulla DAO"
        }
      },
      "setDepositPermissions(address)": {
        "params": {
          "_newDepositPermissionsAddress": "The new deposit permissions contract address"
        }
      },
      "setFactoringPermissions(address)": {
        "params": {
          "_newFactoringPermissionsAddress": "The address of the new factoring permissions contract"
        }
      },
      "setGracePeriodDays(uint256)": {
        "details": "This function can only be called by the contract owner",
        "params": {
          "_days": "The number of days for the grace period"
        }
      },
      "setImpairReserve(uint256)": {
        "params": {
          "_impairReserve": "The new impair reserve amount"
        }
      },
      "setProtocolFeeBps(uint16)": {
        "params": {
          "_newProtocolFeeBps": "The new protocol fee in basis points"
        }
      },
      "setRedeemPermissions(address)": {
        "params": {
          "_newRedeemPermissionsAddress": "The new redeem permissions contract address"
        }
      },
      "setTargetYield(uint16)": {
        "params": {
          "_targetYieldBps": "The new target yield in basis points"
        }
      },
      "setUnderwriter(address)": {
        "params": {
          "_newUnderwriter": "The address of the new underwriter"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalAssets()": {
        "returns": {
          "_0": "The amount of assets available for withdrawal or new investments, excluding funds allocated to active invoices"
        }
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unfactorInvoice(uint256)": {
        "params": {
          "invoiceId": "The ID of the invoice to unfactor"
        }
      },
      "viewPoolStatus()": {
        "returns": {
          "impairedInvoices": "An array of impaired invoice IDs",
          "paidInvoices": "An array of paid invoice IDs"
        }
      },
      "withdraw(uint256,address,address)": {
        "params": {
          "_owner": "The address who owns the shares to redeem",
          "assets": "The amount of assets to withdraw",
          "receiver": "The address to receive the assets"
        },
        "returns": {
          "_0": "The number of shares redeemed"
        }
      }
    },
    "title": "Bulla Factoring Fund",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "CallerNotUnderwriter()": [
        {
          "notice": "Errors"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "activeInvoices(uint256)": {
        "notice": "Array to hold the IDs of all active invoices"
      },
      "adminFeeBalance()": {
        "notice": "Accumulated admin fee balance"
      },
      "adminFeeBps()": {
        "notice": "Admin fee in basis points"
      },
      "approvalDuration()": {
        "notice": "The duration of invoice approval before it expires"
      },
      "approveInvoice(uint256,uint16,uint16,uint16,uint16)": {
        "notice": "Approves an invoice for funding, can only be called by the underwriter"
      },
      "approvedInvoices(uint256)": {
        "notice": "Mapping from invoice ID to invoice approval details"
      },
      "assetAddress()": {
        "notice": "Address of the underlying asset token (e.g., USDC)"
      },
      "bullaDao()": {
        "notice": "Address of the Bulla DAO, a trusted multisig"
      },
      "bullaFrendLend()": {
        "notice": "Address of the bulla frendlend contract"
      },
      "calculateAccruedProfits()": {
        "notice": "Calculates the total accrued profits from all active invoices"
      },
      "calculateCapitalAccount()": {
        "notice": "Calculates the capital account balance, including deposits, withdrawals, and realized gains/losses"
      },
      "calculateKickbackAmount(uint256)": {
        "notice": "Calculates the kickback amount for a given funded amount allowing early payment"
      },
      "calculateRealizedGainLoss()": {
        "notice": "Calculates the total realized gain or loss from paid and impaired invoices"
      },
      "calculateTargetFees(uint256,uint16)": {
        "notice": "Calculates the true fees and net funded amount for a given invoice and factorer's upfront bps, annualised"
      },
      "creationTimestamp()": {
        "notice": "Timestamp of the fund's creation"
      },
      "decimals()": {
        "notice": "Returns the number of decimals the token uses, same as the underlying asset"
      },
      "deployedCapitalForActiveInvoicesExcludingImpaired()": {
        "notice": "Calculates the total funded amount for all active invoices."
      },
      "deposit(uint256,address)": {
        "notice": "Helper function to handle the logic of depositing assets in exchange for fund shares"
      },
      "depositPermissions()": {
        "notice": "Permissions contracts for deposit and factoring"
      },
      "depositWithAttachment(uint256,address,(bytes32,uint8,uint8))": {
        "notice": "Allows for the deposit of assets in exchange for fund shares with an attachment"
      },
      "fundInvoice(uint256,uint16,address)": {
        "notice": "Funds a single invoice, transferring the funded amount from the fund to the caller and transferring the invoice NFT to the fund"
      },
      "getFundInfo()": {
        "notice": "Retrieves the fund information"
      },
      "gracePeriodDays()": {
        "notice": "Grace period for invoices"
      },
      "impairInvoice(uint256)": {
        "notice": "Impairs an invoice, using the impairment reserve to cover the loss"
      },
      "impairReserve()": {
        "notice": "Reserve amount for impairment"
      },
      "impairments(uint256)": {
        "notice": "Mapping from invoice ID to impairment details"
      },
      "invoiceProviderAdapter()": {
        "notice": "Address of the invoice provider contract adapter"
      },
      "maxRedeem()": {
        "notice": "Calculates the maximum amount of shares that can be redeemed based on the total assets in the fund"
      },
      "maxRedeem(address)": {
        "notice": "Calculates the maximum amount of shares that can be redeemed based on the total assets in the fund"
      },
      "maxWithdraw(address)": {
        "notice": "Calculates the maximum amount of assets that can be withdrawn"
      },
      "originalCreditors(uint256)": {
        "notice": "Mapping from invoice ID to original creditor's address"
      },
      "paidInvoicesGain(uint256)": {
        "notice": "Mapping of paid invoices ID to track gains/losses"
      },
      "paidInvoicesSpreadGain(uint256)": {
        "notice": "Mapping of paid invoices ID to track spread gains, that belong to pool owner and are not part of the pool's yield"
      },
      "pendingLoanOffersByLoanOfferId(uint256)": {
        "notice": "Mapping from loan offer ID to pending loan offer details"
      },
      "pendingLoanOffersIds(uint256)": {
        "notice": "Array to track IDs of pending loan offers"
      },
      "poolName()": {
        "notice": "Name of the factoring pool"
      },
      "pricePerShare()": {
        "notice": "Calculates the current price per share of the fund, "
      },
      "protocolFeeBalance()": {
        "notice": "Accumulated protocol fee balance"
      },
      "protocolFeeBps()": {
        "notice": "Protocol fee in basis points"
      },
      "reconcileActivePaidInvoices()": {
        "notice": "Reconciles the list of active invoices with those that have been paid, updating the fund's records"
      },
      "redeem(uint256,address,address)": {
        "notice": "Helper function to handle the logic of redeeming shares in exchange for assets"
      },
      "redeemWithAttachment(uint256,address,address,(bytes32,uint8,uint8))": {
        "notice": "Redeems shares for underlying assets with an attachment, transferring the assets to the specified receiver"
      },
      "setAdminFeeBps(uint16)": {
        "notice": "Sets the admin fee in basis points"
      },
      "setApprovalDuration(uint256)": {
        "notice": "Sets the duration for which invoice approvals are valid"
      },
      "setBullaDaoAddress(address)": {
        "notice": "Updates the Bulla DAO address"
      },
      "setDepositPermissions(address)": {
        "notice": "Updates the deposit permissions contract"
      },
      "setFactoringPermissions(address)": {
        "notice": "Updates the factoring permissions contract"
      },
      "setGracePeriodDays(uint256)": {
        "notice": "Sets the grace period in days for determining if an invoice is impaired"
      },
      "setImpairReserve(uint256)": {
        "notice": "Sets the impair reserve amount"
      },
      "setProtocolFeeBps(uint16)": {
        "notice": "Updates the protocol fee in basis points (bps)"
      },
      "setRedeemPermissions(address)": {
        "notice": "Updates the redeem permissions contract"
      },
      "setTargetYield(uint16)": {
        "notice": "Sets the target yield in basis points"
      },
      "setUnderwriter(address)": {
        "notice": "Sets a new underwriter for the contract"
      },
      "spreadGainsBalance()": {
        "notice": "Accumulated spread gains balance"
      },
      "targetYieldBps()": {
        "notice": "Target yield in basis points"
      },
      "totalAssets()": {
        "notice": "Calculates the available assets in the fund net of fees and impair reserve"
      },
      "underwriter()": {
        "notice": "Address of the underwriter, trusted to approve invoices"
      },
      "unfactorInvoice(uint256)": {
        "notice": "Unfactors an invoice, returning the invoice NFT to the original creditor and refunding the funded amount"
      },
      "viewPoolStatus()": {
        "notice": "Provides a view of the pool's status, listing paid and impaired invoices, to be called by Gelato or alike"
      },
      "withdraw(uint256,address,address)": {
        "notice": "Helper function to handle the logic of withdrawing assets in exchange for fund shares"
      },
      "withdrawAdminFeesAndSpreadGains()": {
        "notice": "Allows the Pool Owner to withdraw accumulated admin fees and spread gains."
      },
      "withdrawProtocolFees()": {
        "notice": "Allows the Bulla DAO to withdraw accumulated protocol fees."
      }
    },
    "notice": "Bulla Factoring Fund is a ERC4626 compatible fund that allows for the factoring of invoices",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4820,
        "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4826,
        "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 4828,
        "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 4830,
        "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 4832,
        "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 4257,
        "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
        "label": "_owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 10604,
        "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
        "label": "bullaDao",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 10607,
        "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
        "label": "protocolFeeBps",
        "offset": 20,
        "slot": "6",
        "type": "t_uint16"
      },
      {
        "astId": 10610,
        "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
        "label": "adminFeeBps",
        "offset": 22,
        "slot": "6",
        "type": "t_uint16"
      },
      {
        "astId": 10613,
        "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
        "label": "protocolFeeBalance",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 10616,
        "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
        "label": "adminFeeBalance",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 10619,
        "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
        "label": "spreadGainsBalance",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 10623,
        "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
        "label": "assetAddress",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IERC20)5390"
      },
      {
        "astId": 10627,
        "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
        "label": "invoiceProviderAdapter",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(IInvoiceProviderAdapterV2)15464"
      },
      {
        "astId": 10629,
        "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
        "label": "totalDeposits",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 10631,
        "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
        "label": "totalWithdrawals",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 10635,
        "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
        "label": "bullaFrendLend",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(IBullaFrendLend)1338"
      },
      {
        "astId": 10638,
        "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
        "label": "underwriter",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 10641,
        "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
        "label": "creationTimestamp",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 10644,
        "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
        "label": "impairReserve",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 10647,
        "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
        "label": "poolName",
        "offset": 0,
        "slot": "18",
        "type": "t_string_storage"
      },
      {
        "astId": 10650,
        "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
        "label": "targetYieldBps",
        "offset": 0,
        "slot": "19",
        "type": "t_uint16"
      },
      {
        "astId": 10654,
        "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
        "label": "gracePeriodDays",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 10658,
        "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
        "label": "depositPermissions",
        "offset": 0,
        "slot": "21",
        "type": "t_contract(Permissions)14905"
      },
      {
        "astId": 10661,
        "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
        "label": "redeemPermissions",
        "offset": 0,
        "slot": "22",
        "type": "t_contract(Permissions)14905"
      },
      {
        "astId": 10664,
        "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
        "label": "factoringPermissions",
        "offset": 0,
        "slot": "23",
        "type": "t_contract(Permissions)14905"
      },
      {
        "astId": 10669,
        "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
        "label": "paidInvoicesGain",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 10674,
        "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
        "label": "paidInvoicesSpreadGain",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 10679,
        "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
        "label": "originalCreditors",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 10685,
        "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
        "label": "approvedInvoices",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_uint256,t_struct(InvoiceApproval)15071_storage)"
      },
      {
        "astId": 10689,
        "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
        "label": "approvalDuration",
        "offset": 0,
        "slot": "28",
        "type": "t_uint256"
      },
      {
        "astId": 10693,
        "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
        "label": "activeInvoices",
        "offset": 0,
        "slot": "29",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 10697,
        "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
        "label": "paidInvoicesIds",
        "offset": 0,
        "slot": "30",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 10701,
        "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
        "label": "impairedByFundInvoicesIds",
        "offset": 0,
        "slot": "31",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 10707,
        "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
        "label": "impairments",
        "offset": 0,
        "slot": "32",
        "type": "t_mapping(t_uint256,t_struct(ImpairmentDetails)15106_storage)"
      },
      {
        "astId": 10713,
        "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
        "label": "pendingLoanOffersByLoanOfferId",
        "offset": 0,
        "slot": "33",
        "type": "t_mapping(t_uint256,t_struct(PendingLoanOfferInfo)15047_storage)"
      },
      {
        "astId": 10717,
        "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
        "label": "pendingLoanOffersIds",
        "offset": 0,
        "slot": "34",
        "type": "t_array(t_uint256)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBullaFrendLend)1338": {
        "encoding": "inplace",
        "label": "contract IBullaFrendLend",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)5390": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IInvoiceProviderAdapterV2)15464": {
        "encoding": "inplace",
        "label": "contract IInvoiceProviderAdapterV2",
        "numberOfBytes": "20"
      },
      "t_contract(Permissions)14905": {
        "encoding": "inplace",
        "label": "contract Permissions",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(ImpairmentDetails)15106_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IBullaFactoringV2.ImpairmentDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(ImpairmentDetails)15106_storage"
      },
      "t_mapping(t_uint256,t_struct(InvoiceApproval)15071_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IBullaFactoringV2.InvoiceApproval)",
        "numberOfBytes": "32",
        "value": "t_struct(InvoiceApproval)15071_storage"
      },
      "t_mapping(t_uint256,t_struct(PendingLoanOfferInfo)15047_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IBullaFactoringV2.PendingLoanOfferInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PendingLoanOfferInfo)15047_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(FeeParams)15035_storage": {
        "encoding": "inplace",
        "label": "struct IBullaFactoringV2.FeeParams",
        "members": [
          {
            "astId": 15024,
            "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
            "label": "targetYieldBps",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 15026,
            "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
            "label": "spreadBps",
            "offset": 2,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 15028,
            "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
            "label": "upfrontBps",
            "offset": 4,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 15030,
            "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
            "label": "protocolFeeBps",
            "offset": 6,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 15032,
            "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
            "label": "adminFeeBps",
            "offset": 8,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 15034,
            "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
            "label": "minDaysInterestApplied",
            "offset": 10,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(ImpairmentDetails)15106_storage": {
        "encoding": "inplace",
        "label": "struct IBullaFactoringV2.ImpairmentDetails",
        "members": [
          {
            "astId": 15101,
            "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
            "label": "gainAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 15103,
            "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
            "label": "lossAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 15105,
            "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
            "label": "isImpaired",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(InvoiceApproval)15071_storage": {
        "encoding": "inplace",
        "label": "struct IBullaFactoringV2.InvoiceApproval",
        "members": [
          {
            "astId": 15049,
            "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
            "label": "approved",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 15051,
            "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
            "label": "creditor",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 15053,
            "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
            "label": "validUntil",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 15055,
            "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
            "label": "invoiceDueDate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 15057,
            "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
            "label": "fundedTimestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 15060,
            "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
            "label": "feeParams",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(FeeParams)15035_storage"
          },
          {
            "astId": 15062,
            "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
            "label": "fundedAmountGross",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 15064,
            "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
            "label": "fundedAmountNet",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 15066,
            "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
            "label": "initialFullInvoiceAmount",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 15068,
            "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
            "label": "initialPaidAmount",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 15070,
            "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
            "label": "receiverAddress",
            "offset": 0,
            "slot": "9",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(PendingLoanOfferInfo)15047_storage": {
        "encoding": "inplace",
        "label": "struct IBullaFactoringV2.PendingLoanOfferInfo",
        "members": [
          {
            "astId": 15037,
            "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
            "label": "exists",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 15039,
            "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
            "label": "offeredAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 15041,
            "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
            "label": "principalAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 15043,
            "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
            "label": "termLength",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 15046,
            "contract": "contracts/BullaFactoring.sol:BullaFactoringV2",
            "label": "feeParams",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(FeeParams)15035_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}